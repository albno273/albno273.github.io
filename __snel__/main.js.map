{"version":3,"file":"main.js","sources":["https://cdn.skypack.dev/-/svelte@v3.46.4-xym63myK8b1EihujDDAL/dist=es2019,mode=imports/optimized/common/global-5c50bad9.js","https://cdn.skypack.dev/-/svelte@v3.46.4-xym63myK8b1EihujDDAL/dist=es2019,mode=imports/optimized/svelte/internal.js","../Users/yuki.umeda/portfolio/src/components/Home.svelte","https://cdn.jsdelivr.net/npm/svelte@3.46.4/compiler.mjs","https://cdn.skypack.dev/-/path-to-regexp@v6.2.0-EkiJ65zFBOdDtXSMzE7f/dist=es2019,mode=imports/optimized/path-to-regexp.js","https://deno.land/x/snel@v0.7.0/core/utils/Env.ts","https://deno.land/x/snel@v0.7.0/core/utils/RouteParams.ts","../Users/yuki.umeda/portfolio/src/App.svelte"],"sourcesContent":["var global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\nexport {global$1 as g};\nexport default null;\n","import {g as global} from \"../common/global-5c50bad9.js\";\nfunction noop() {\n}\nconst identity = (x) => x;\nfunction assign(tar, src) {\n  for (const k in src)\n    tar[k] = src[k];\n  return tar;\n}\nfunction is_promise(value) {\n  return value && typeof value === \"object\" && typeof value.then === \"function\";\n}\nfunction add_location(element2, file, line, column, char) {\n  element2.__svelte_meta = {\n    loc: {file, line, column, char}\n  };\n}\nfunction run(fn) {\n  return fn();\n}\nfunction blank_object() {\n  return Object.create(null);\n}\nfunction run_all(fns) {\n  fns.forEach(run);\n}\nfunction is_function(thing) {\n  return typeof thing === \"function\";\n}\nfunction safe_not_equal(a, b) {\n  return a != a ? b == b : a !== b || (a && typeof a === \"object\" || typeof a === \"function\");\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n  if (!src_url_equal_anchor) {\n    src_url_equal_anchor = document.createElement(\"a\");\n  }\n  src_url_equal_anchor.href = url;\n  return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n  return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n  return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n  if (store != null && typeof store.subscribe !== \"function\") {\n    throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n  }\n}\nfunction subscribe(store, ...callbacks) {\n  if (store == null) {\n    return noop;\n  }\n  const unsub = store.subscribe(...callbacks);\n  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n  let value;\n  subscribe(store, (_) => value = _)();\n  return value;\n}\nfunction component_subscribe(component, store, callback) {\n  component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n  if (definition) {\n    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n    return definition[0](slot_ctx);\n  }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n  if (definition[2] && fn) {\n    const lets = definition[2](fn(dirty));\n    if ($$scope.dirty === void 0) {\n      return lets;\n    }\n    if (typeof lets === \"object\") {\n      const merged = [];\n      const len = Math.max($$scope.dirty.length, lets.length);\n      for (let i = 0; i < len; i += 1) {\n        merged[i] = $$scope.dirty[i] | lets[i];\n      }\n      return merged;\n    }\n    return $$scope.dirty | lets;\n  }\n  return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n  if (slot_changes) {\n    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n    slot.p(slot_context, slot_changes);\n  }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n  const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n  update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n  if ($$scope.ctx.length > 32) {\n    const dirty = [];\n    const length = $$scope.ctx.length / 32;\n    for (let i = 0; i < length; i++) {\n      dirty[i] = -1;\n    }\n    return dirty;\n  }\n  return -1;\n}\nfunction exclude_internal_props(props) {\n  const result = {};\n  for (const k in props)\n    if (k[0] !== \"$\")\n      result[k] = props[k];\n  return result;\n}\nfunction compute_rest_props(props, keys) {\n  const rest = {};\n  keys = new Set(keys);\n  for (const k in props)\n    if (!keys.has(k) && k[0] !== \"$\")\n      rest[k] = props[k];\n  return rest;\n}\nfunction compute_slots(slots) {\n  const result = {};\n  for (const key in slots) {\n    result[key] = true;\n  }\n  return result;\n}\nfunction once(fn) {\n  let ran = false;\n  return function(...args) {\n    if (ran)\n      return;\n    ran = true;\n    fn.call(this, ...args);\n  };\n}\nfunction null_to_empty(value) {\n  return value == null ? \"\" : value;\n}\nfunction set_store_value(store, ret, value) {\n  store.set(value);\n  return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nconst is_client = typeof window !== \"undefined\";\nlet now = is_client ? () => window.performance.now() : () => Date.now();\nlet raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;\nfunction set_now(fn) {\n  now = fn;\n}\nfunction set_raf(fn) {\n  raf = fn;\n}\nconst tasks = new Set();\nfunction run_tasks(now2) {\n  tasks.forEach((task) => {\n    if (!task.c(now2)) {\n      tasks.delete(task);\n      task.f();\n    }\n  });\n  if (tasks.size !== 0)\n    raf(run_tasks);\n}\nfunction clear_loops() {\n  tasks.clear();\n}\nfunction loop(callback) {\n  let task;\n  if (tasks.size === 0)\n    raf(run_tasks);\n  return {\n    promise: new Promise((fulfill) => {\n      tasks.add(task = {c: callback, f: fulfill});\n    }),\n    abort() {\n      tasks.delete(task);\n    }\n  };\n}\nlet is_hydrating = false;\nfunction start_hydrating() {\n  is_hydrating = true;\n}\nfunction end_hydrating() {\n  is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n  while (low < high) {\n    const mid = low + (high - low >> 1);\n    if (key(mid) <= value) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n}\nfunction init_hydrate(target) {\n  if (target.hydrate_init)\n    return;\n  target.hydrate_init = true;\n  let children2 = target.childNodes;\n  if (target.nodeName === \"HEAD\") {\n    const myChildren = [];\n    for (let i = 0; i < children2.length; i++) {\n      const node = children2[i];\n      if (node.claim_order !== void 0) {\n        myChildren.push(node);\n      }\n    }\n    children2 = myChildren;\n  }\n  const m = new Int32Array(children2.length + 1);\n  const p = new Int32Array(children2.length);\n  m[0] = -1;\n  let longest = 0;\n  for (let i = 0; i < children2.length; i++) {\n    const current = children2[i].claim_order;\n    const seqLen = (longest > 0 && children2[m[longest]].claim_order <= current ? longest + 1 : upper_bound(1, longest, (idx) => children2[m[idx]].claim_order, current)) - 1;\n    p[i] = m[seqLen] + 1;\n    const newLen = seqLen + 1;\n    m[newLen] = i;\n    longest = Math.max(newLen, longest);\n  }\n  const lis = [];\n  const toMove = [];\n  let last = children2.length - 1;\n  for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n    lis.push(children2[cur - 1]);\n    for (; last >= cur; last--) {\n      toMove.push(children2[last]);\n    }\n    last--;\n  }\n  for (; last >= 0; last--) {\n    toMove.push(children2[last]);\n  }\n  lis.reverse();\n  toMove.sort((a, b) => a.claim_order - b.claim_order);\n  for (let i = 0, j = 0; i < toMove.length; i++) {\n    while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n      j++;\n    }\n    const anchor = j < lis.length ? lis[j] : null;\n    target.insertBefore(toMove[i], anchor);\n  }\n}\nfunction append(target, node) {\n  target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n  const append_styles_to = get_root_for_style(target);\n  if (!append_styles_to.getElementById(style_sheet_id)) {\n    const style = element(\"style\");\n    style.id = style_sheet_id;\n    style.textContent = styles;\n    append_stylesheet(append_styles_to, style);\n  }\n}\nfunction get_root_for_style(node) {\n  if (!node)\n    return document;\n  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n  if (root && root.host) {\n    return root;\n  }\n  return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n  const style_element = element(\"style\");\n  append_stylesheet(get_root_for_style(node), style_element);\n  return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n  append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n  if (is_hydrating) {\n    init_hydrate(target);\n    if (target.actual_end_child === void 0 || target.actual_end_child !== null && target.actual_end_child.parentElement !== target) {\n      target.actual_end_child = target.firstChild;\n    }\n    while (target.actual_end_child !== null && target.actual_end_child.claim_order === void 0) {\n      target.actual_end_child = target.actual_end_child.nextSibling;\n    }\n    if (node !== target.actual_end_child) {\n      if (node.claim_order !== void 0 || node.parentNode !== target) {\n        target.insertBefore(node, target.actual_end_child);\n      }\n    } else {\n      target.actual_end_child = node.nextSibling;\n    }\n  } else if (node.parentNode !== target || node.nextSibling !== null) {\n    target.appendChild(node);\n  }\n}\nfunction insert(target, node, anchor) {\n  target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n  if (is_hydrating && !anchor) {\n    append_hydration(target, node);\n  } else if (node.parentNode !== target || node.nextSibling != anchor) {\n    target.insertBefore(node, anchor || null);\n  }\n}\nfunction detach(node) {\n  node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n  for (let i = 0; i < iterations.length; i += 1) {\n    if (iterations[i])\n      iterations[i].d(detaching);\n  }\n}\nfunction element(name) {\n  return document.createElement(name);\n}\nfunction element_is(name, is) {\n  return document.createElement(name, {is});\n}\nfunction object_without_properties(obj, exclude) {\n  const target = {};\n  for (const k in obj) {\n    if (has_prop(obj, k) && exclude.indexOf(k) === -1) {\n      target[k] = obj[k];\n    }\n  }\n  return target;\n}\nfunction svg_element(name) {\n  return document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n}\nfunction text(data) {\n  return document.createTextNode(data);\n}\nfunction space() {\n  return text(\" \");\n}\nfunction empty() {\n  return text(\"\");\n}\nfunction listen(node, event, handler, options) {\n  node.addEventListener(event, handler, options);\n  return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n  return function(event) {\n    event.preventDefault();\n    return fn.call(this, event);\n  };\n}\nfunction stop_propagation(fn) {\n  return function(event) {\n    event.stopPropagation();\n    return fn.call(this, event);\n  };\n}\nfunction self(fn) {\n  return function(event) {\n    if (event.target === this)\n      fn.call(this, event);\n  };\n}\nfunction trusted(fn) {\n  return function(event) {\n    if (event.isTrusted)\n      fn.call(this, event);\n  };\n}\nfunction attr(node, attribute, value) {\n  if (value == null)\n    node.removeAttribute(attribute);\n  else if (node.getAttribute(attribute) !== value)\n    node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n  const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n  for (const key in attributes) {\n    if (attributes[key] == null) {\n      node.removeAttribute(key);\n    } else if (key === \"style\") {\n      node.style.cssText = attributes[key];\n    } else if (key === \"__value\") {\n      node.value = node[key] = attributes[key];\n    } else if (descriptors[key] && descriptors[key].set) {\n      node[key] = attributes[key];\n    } else {\n      attr(node, key, attributes[key]);\n    }\n  }\n}\nfunction set_svg_attributes(node, attributes) {\n  for (const key in attributes) {\n    attr(node, key, attributes[key]);\n  }\n}\nfunction set_custom_element_data(node, prop, value) {\n  if (prop in node) {\n    node[prop] = typeof node[prop] === \"boolean\" && value === \"\" ? true : value;\n  } else {\n    attr(node, prop, value);\n  }\n}\nfunction xlink_attr(node, attribute, value) {\n  node.setAttributeNS(\"http://www.w3.org/1999/xlink\", attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n  const value = new Set();\n  for (let i = 0; i < group.length; i += 1) {\n    if (group[i].checked)\n      value.add(group[i].__value);\n  }\n  if (!checked) {\n    value.delete(__value);\n  }\n  return Array.from(value);\n}\nfunction to_number(value) {\n  return value === \"\" ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n  const array = [];\n  for (let i = 0; i < ranges.length; i += 1) {\n    array.push({start: ranges.start(i), end: ranges.end(i)});\n  }\n  return array;\n}\nfunction children(element2) {\n  return Array.from(element2.childNodes);\n}\nfunction init_claim_info(nodes) {\n  if (nodes.claim_info === void 0) {\n    nodes.claim_info = {last_index: 0, total_claimed: 0};\n  }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n  init_claim_info(nodes);\n  const resultNode = (() => {\n    for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (predicate(node)) {\n        const replacement = processNode(node);\n        if (replacement === void 0) {\n          nodes.splice(i, 1);\n        } else {\n          nodes[i] = replacement;\n        }\n        if (!dontUpdateLastIndex) {\n          nodes.claim_info.last_index = i;\n        }\n        return node;\n      }\n    }\n    for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n      const node = nodes[i];\n      if (predicate(node)) {\n        const replacement = processNode(node);\n        if (replacement === void 0) {\n          nodes.splice(i, 1);\n        } else {\n          nodes[i] = replacement;\n        }\n        if (!dontUpdateLastIndex) {\n          nodes.claim_info.last_index = i;\n        } else if (replacement === void 0) {\n          nodes.claim_info.last_index--;\n        }\n        return node;\n      }\n    }\n    return createNode();\n  })();\n  resultNode.claim_order = nodes.claim_info.total_claimed;\n  nodes.claim_info.total_claimed += 1;\n  return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n  return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n    const remove = [];\n    for (let j = 0; j < node.attributes.length; j++) {\n      const attribute = node.attributes[j];\n      if (!attributes[attribute.name]) {\n        remove.push(attribute.name);\n      }\n    }\n    remove.forEach((v) => node.removeAttribute(v));\n    return void 0;\n  }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n  return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n  return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n  return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n    const dataStr = \"\" + data;\n    if (node.data.startsWith(dataStr)) {\n      if (node.data.length !== dataStr.length) {\n        return node.splitText(dataStr.length);\n      }\n    } else {\n      node.data = dataStr;\n    }\n  }, () => text(data), true);\n}\nfunction claim_space(nodes) {\n  return claim_text(nodes, \" \");\n}\nfunction find_comment(nodes, text2, start) {\n  for (let i = start; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.nodeType === 8 && node.textContent.trim() === text2) {\n      return i;\n    }\n  }\n  return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n  const start_index = find_comment(nodes, \"HTML_TAG_START\", 0);\n  const end_index = find_comment(nodes, \"HTML_TAG_END\", start_index);\n  if (start_index === end_index) {\n    return new HtmlTagHydration();\n  }\n  init_claim_info(nodes);\n  const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n  detach(html_tag_nodes[0]);\n  detach(html_tag_nodes[html_tag_nodes.length - 1]);\n  const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n  for (const n of claimed_nodes) {\n    n.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n  }\n  return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text2, data) {\n  data = \"\" + data;\n  if (text2.wholeText !== data)\n    text2.data = data;\n}\nfunction set_input_value(input, value) {\n  input.value = value == null ? \"\" : value;\n}\nfunction set_input_type(input, type) {\n  try {\n    input.type = type;\n  } catch (e) {\n  }\n}\nfunction set_style(node, key, value, important) {\n  if (value === null) {\n    node.style.removeProperty(key);\n  } else {\n    node.style.setProperty(key, value, important ? \"important\" : \"\");\n  }\n}\nfunction select_option(select, value) {\n  for (let i = 0; i < select.options.length; i += 1) {\n    const option = select.options[i];\n    if (option.__value === value) {\n      option.selected = true;\n      return;\n    }\n  }\n  select.selectedIndex = -1;\n}\nfunction select_options(select, value) {\n  for (let i = 0; i < select.options.length; i += 1) {\n    const option = select.options[i];\n    option.selected = ~value.indexOf(option.__value);\n  }\n}\nfunction select_value(select) {\n  const selected_option = select.querySelector(\":checked\") || select.options[0];\n  return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n  return [].map.call(select.querySelectorAll(\":checked\"), (option) => option.__value);\n}\nlet crossorigin;\nfunction is_crossorigin() {\n  if (crossorigin === void 0) {\n    crossorigin = false;\n    try {\n      if (typeof window !== \"undefined\" && window.parent) {\n        void window.parent.document;\n      }\n    } catch (error) {\n      crossorigin = true;\n    }\n  }\n  return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n  const computed_style = getComputedStyle(node);\n  if (computed_style.position === \"static\") {\n    node.style.position = \"relative\";\n  }\n  const iframe = element(\"iframe\");\n  iframe.setAttribute(\"style\", \"display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;\");\n  iframe.setAttribute(\"aria-hidden\", \"true\");\n  iframe.tabIndex = -1;\n  const crossorigin2 = is_crossorigin();\n  let unsubscribe;\n  if (crossorigin2) {\n    iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n    unsubscribe = listen(window, \"message\", (event) => {\n      if (event.source === iframe.contentWindow)\n        fn();\n    });\n  } else {\n    iframe.src = \"about:blank\";\n    iframe.onload = () => {\n      unsubscribe = listen(iframe.contentWindow, \"resize\", fn);\n    };\n  }\n  append(node, iframe);\n  return () => {\n    if (crossorigin2) {\n      unsubscribe();\n    } else if (unsubscribe && iframe.contentWindow) {\n      unsubscribe();\n    }\n    detach(iframe);\n  };\n}\nfunction toggle_class(element2, name, toggle) {\n  element2.classList[toggle ? \"add\" : \"remove\"](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n  const e = document.createEvent(\"CustomEvent\");\n  e.initCustomEvent(type, bubbles, false, detail);\n  return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n  return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n  constructor() {\n    this.e = this.n = null;\n  }\n  c(html) {\n    this.h(html);\n  }\n  m(html, target, anchor = null) {\n    if (!this.e) {\n      this.e = element(target.nodeName);\n      this.t = target;\n      this.c(html);\n    }\n    this.i(anchor);\n  }\n  h(html) {\n    this.e.innerHTML = html;\n    this.n = Array.from(this.e.childNodes);\n  }\n  i(anchor) {\n    for (let i = 0; i < this.n.length; i += 1) {\n      insert(this.t, this.n[i], anchor);\n    }\n  }\n  p(html) {\n    this.d();\n    this.h(html);\n    this.i(this.a);\n  }\n  d() {\n    this.n.forEach(detach);\n  }\n}\nclass HtmlTagHydration extends HtmlTag {\n  constructor(claimed_nodes) {\n    super();\n    this.e = this.n = null;\n    this.l = claimed_nodes;\n  }\n  c(html) {\n    if (this.l) {\n      this.n = this.l;\n    } else {\n      super.c(html);\n    }\n  }\n  i(anchor) {\n    for (let i = 0; i < this.n.length; i += 1) {\n      insert_hydration(this.t, this.n[i], anchor);\n    }\n  }\n}\nfunction attribute_to_object(attributes) {\n  const result = {};\n  for (const attribute of attributes) {\n    result[attribute.name] = attribute.value;\n  }\n  return result;\n}\nfunction get_custom_elements_slots(element2) {\n  const result = {};\n  element2.childNodes.forEach((node) => {\n    result[node.slot || \"default\"] = true;\n  });\n  return result;\n}\nconst managed_styles = new Map();\nlet active = 0;\nfunction hash(str) {\n  let hash2 = 5381;\n  let i = str.length;\n  while (i--)\n    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);\n  return hash2 >>> 0;\n}\nfunction create_style_information(doc, node) {\n  const info = {stylesheet: append_empty_stylesheet(node), rules: {}};\n  managed_styles.set(doc, info);\n  return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n  const step = 16.666 / duration;\n  let keyframes = \"{\\n\";\n  for (let p = 0; p <= 1; p += step) {\n    const t = a + (b - a) * ease(p);\n    keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;\n  }\n  const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;\n  const name = `__svelte_${hash(rule)}_${uid}`;\n  const doc = get_root_for_style(node);\n  const {stylesheet, rules} = managed_styles.get(doc) || create_style_information(doc, node);\n  if (!rules[name]) {\n    rules[name] = true;\n    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n  }\n  const animation = node.style.animation || \"\";\n  node.style.animation = `${animation ? `${animation}, ` : \"\"}${name} ${duration}ms linear ${delay}ms 1 both`;\n  active += 1;\n  return name;\n}\nfunction delete_rule(node, name) {\n  const previous = (node.style.animation || \"\").split(\", \");\n  const next = previous.filter(name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf(\"__svelte\") === -1);\n  const deleted = previous.length - next.length;\n  if (deleted) {\n    node.style.animation = next.join(\", \");\n    active -= deleted;\n    if (!active)\n      clear_rules();\n  }\n}\nfunction clear_rules() {\n  raf(() => {\n    if (active)\n      return;\n    managed_styles.forEach((info) => {\n      const {stylesheet} = info;\n      let i = stylesheet.cssRules.length;\n      while (i--)\n        stylesheet.deleteRule(i);\n      info.rules = {};\n    });\n    managed_styles.clear();\n  });\n}\nfunction create_animation(node, from, fn, params) {\n  if (!from)\n    return noop;\n  const to = node.getBoundingClientRect();\n  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n    return noop;\n  const {\n    delay = 0,\n    duration = 300,\n    easing = identity,\n    start: start_time = now() + delay,\n    end = start_time + duration,\n    tick: tick2 = noop,\n    css\n  } = fn(node, {from, to}, params);\n  let running = true;\n  let started = false;\n  let name;\n  function start() {\n    if (css) {\n      name = create_rule(node, 0, 1, duration, delay, easing, css);\n    }\n    if (!delay) {\n      started = true;\n    }\n  }\n  function stop() {\n    if (css)\n      delete_rule(node, name);\n    running = false;\n  }\n  loop((now2) => {\n    if (!started && now2 >= start_time) {\n      started = true;\n    }\n    if (started && now2 >= end) {\n      tick2(1, 0);\n      stop();\n    }\n    if (!running) {\n      return false;\n    }\n    if (started) {\n      const p = now2 - start_time;\n      const t = 0 + 1 * easing(p / duration);\n      tick2(t, 1 - t);\n    }\n    return true;\n  });\n  start();\n  tick2(0, 1);\n  return stop;\n}\nfunction fix_position(node) {\n  const style = getComputedStyle(node);\n  if (style.position !== \"absolute\" && style.position !== \"fixed\") {\n    const {width, height} = style;\n    const a = node.getBoundingClientRect();\n    node.style.position = \"absolute\";\n    node.style.width = width;\n    node.style.height = height;\n    add_transform(node, a);\n  }\n}\nfunction add_transform(node, a) {\n  const b = node.getBoundingClientRect();\n  if (a.left !== b.left || a.top !== b.top) {\n    const style = getComputedStyle(node);\n    const transform = style.transform === \"none\" ? \"\" : style.transform;\n    node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n  }\n}\nlet current_component;\nfunction set_current_component(component) {\n  current_component = component;\n}\nfunction get_current_component() {\n  if (!current_component)\n    throw new Error(\"Function called outside component initialization\");\n  return current_component;\n}\nfunction beforeUpdate(fn) {\n  get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n  get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n  get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n  get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n  const component = get_current_component();\n  return (type, detail) => {\n    const callbacks = component.$$.callbacks[type];\n    if (callbacks) {\n      const event = custom_event(type, detail);\n      callbacks.slice().forEach((fn) => {\n        fn.call(component, event);\n      });\n    }\n  };\n}\nfunction setContext(key, context) {\n  get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n  return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n  return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n  return get_current_component().$$.context.has(key);\n}\nfunction bubble(component, event) {\n  const callbacks = component.$$.callbacks[event.type];\n  if (callbacks) {\n    callbacks.slice().forEach((fn) => fn.call(this, event));\n  }\n}\nconst dirty_components = [];\nconst intros = {enabled: false};\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n  if (!update_scheduled) {\n    update_scheduled = true;\n    resolved_promise.then(flush);\n  }\n}\nfunction tick() {\n  schedule_update();\n  return resolved_promise;\n}\nfunction add_render_callback(fn) {\n  render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n  flush_callbacks.push(fn);\n}\nconst seen_callbacks = new Set();\nlet flushidx = 0;\nfunction flush() {\n  const saved_component = current_component;\n  do {\n    while (flushidx < dirty_components.length) {\n      const component = dirty_components[flushidx];\n      flushidx++;\n      set_current_component(component);\n      update(component.$$);\n    }\n    set_current_component(null);\n    dirty_components.length = 0;\n    flushidx = 0;\n    while (binding_callbacks.length)\n      binding_callbacks.pop()();\n    for (let i = 0; i < render_callbacks.length; i += 1) {\n      const callback = render_callbacks[i];\n      if (!seen_callbacks.has(callback)) {\n        seen_callbacks.add(callback);\n        callback();\n      }\n    }\n    render_callbacks.length = 0;\n  } while (dirty_components.length);\n  while (flush_callbacks.length) {\n    flush_callbacks.pop()();\n  }\n  update_scheduled = false;\n  seen_callbacks.clear();\n  set_current_component(saved_component);\n}\nfunction update($$) {\n  if ($$.fragment !== null) {\n    $$.update();\n    run_all($$.before_update);\n    const dirty = $$.dirty;\n    $$.dirty = [-1];\n    $$.fragment && $$.fragment.p($$.ctx, dirty);\n    $$.after_update.forEach(add_render_callback);\n  }\n}\nlet promise;\nfunction wait() {\n  if (!promise) {\n    promise = Promise.resolve();\n    promise.then(() => {\n      promise = null;\n    });\n  }\n  return promise;\n}\nfunction dispatch(node, direction, kind) {\n  node.dispatchEvent(custom_event(`${direction ? \"intro\" : \"outro\"}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n  outros = {\n    r: 0,\n    c: [],\n    p: outros\n  };\n}\nfunction check_outros() {\n  if (!outros.r) {\n    run_all(outros.c);\n  }\n  outros = outros.p;\n}\nfunction transition_in(block, local) {\n  if (block && block.i) {\n    outroing.delete(block);\n    block.i(local);\n  }\n}\nfunction transition_out(block, local, detach2, callback) {\n  if (block && block.o) {\n    if (outroing.has(block))\n      return;\n    outroing.add(block);\n    outros.c.push(() => {\n      outroing.delete(block);\n      if (callback) {\n        if (detach2)\n          block.d(1);\n        callback();\n      }\n    });\n    block.o(local);\n  }\n}\nconst null_transition = {duration: 0};\nfunction create_in_transition(node, fn, params) {\n  let config = fn(node, params);\n  let running = false;\n  let animation_name;\n  let task;\n  let uid = 0;\n  function cleanup() {\n    if (animation_name)\n      delete_rule(node, animation_name);\n  }\n  function go() {\n    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;\n    if (css)\n      animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n    tick2(0, 1);\n    const start_time = now() + delay;\n    const end_time = start_time + duration;\n    if (task)\n      task.abort();\n    running = true;\n    add_render_callback(() => dispatch(node, true, \"start\"));\n    task = loop((now2) => {\n      if (running) {\n        if (now2 >= end_time) {\n          tick2(1, 0);\n          dispatch(node, true, \"end\");\n          cleanup();\n          return running = false;\n        }\n        if (now2 >= start_time) {\n          const t = easing((now2 - start_time) / duration);\n          tick2(t, 1 - t);\n        }\n      }\n      return running;\n    });\n  }\n  let started = false;\n  return {\n    start() {\n      if (started)\n        return;\n      started = true;\n      delete_rule(node);\n      if (is_function(config)) {\n        config = config();\n        wait().then(go);\n      } else {\n        go();\n      }\n    },\n    invalidate() {\n      started = false;\n    },\n    end() {\n      if (running) {\n        cleanup();\n        running = false;\n      }\n    }\n  };\n}\nfunction create_out_transition(node, fn, params) {\n  let config = fn(node, params);\n  let running = true;\n  let animation_name;\n  const group = outros;\n  group.r += 1;\n  function go() {\n    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;\n    if (css)\n      animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n    const start_time = now() + delay;\n    const end_time = start_time + duration;\n    add_render_callback(() => dispatch(node, false, \"start\"));\n    loop((now2) => {\n      if (running) {\n        if (now2 >= end_time) {\n          tick2(0, 1);\n          dispatch(node, false, \"end\");\n          if (!--group.r) {\n            run_all(group.c);\n          }\n          return false;\n        }\n        if (now2 >= start_time) {\n          const t = easing((now2 - start_time) / duration);\n          tick2(1 - t, t);\n        }\n      }\n      return running;\n    });\n  }\n  if (is_function(config)) {\n    wait().then(() => {\n      config = config();\n      go();\n    });\n  } else {\n    go();\n  }\n  return {\n    end(reset) {\n      if (reset && config.tick) {\n        config.tick(1, 0);\n      }\n      if (running) {\n        if (animation_name)\n          delete_rule(node, animation_name);\n        running = false;\n      }\n    }\n  };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n  let config = fn(node, params);\n  let t = intro ? 0 : 1;\n  let running_program = null;\n  let pending_program = null;\n  let animation_name = null;\n  function clear_animation() {\n    if (animation_name)\n      delete_rule(node, animation_name);\n  }\n  function init2(program, duration) {\n    const d = program.b - t;\n    duration *= Math.abs(d);\n    return {\n      a: t,\n      b: program.b,\n      d,\n      duration,\n      start: program.start,\n      end: program.start + duration,\n      group: program.group\n    };\n  }\n  function go(b) {\n    const {delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css} = config || null_transition;\n    const program = {\n      start: now() + delay,\n      b\n    };\n    if (!b) {\n      program.group = outros;\n      outros.r += 1;\n    }\n    if (running_program || pending_program) {\n      pending_program = program;\n    } else {\n      if (css) {\n        clear_animation();\n        animation_name = create_rule(node, t, b, duration, delay, easing, css);\n      }\n      if (b)\n        tick2(0, 1);\n      running_program = init2(program, duration);\n      add_render_callback(() => dispatch(node, b, \"start\"));\n      loop((now2) => {\n        if (pending_program && now2 > pending_program.start) {\n          running_program = init2(pending_program, duration);\n          pending_program = null;\n          dispatch(node, running_program.b, \"start\");\n          if (css) {\n            clear_animation();\n            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n          }\n        }\n        if (running_program) {\n          if (now2 >= running_program.end) {\n            tick2(t = running_program.b, 1 - t);\n            dispatch(node, running_program.b, \"end\");\n            if (!pending_program) {\n              if (running_program.b) {\n                clear_animation();\n              } else {\n                if (!--running_program.group.r)\n                  run_all(running_program.group.c);\n              }\n            }\n            running_program = null;\n          } else if (now2 >= running_program.start) {\n            const p = now2 - running_program.start;\n            t = running_program.a + running_program.d * easing(p / running_program.duration);\n            tick2(t, 1 - t);\n          }\n        }\n        return !!(running_program || pending_program);\n      });\n    }\n  }\n  return {\n    run(b) {\n      if (is_function(config)) {\n        wait().then(() => {\n          config = config();\n          go(b);\n        });\n      } else {\n        go(b);\n      }\n    },\n    end() {\n      clear_animation();\n      running_program = pending_program = null;\n    }\n  };\n}\nfunction handle_promise(promise2, info) {\n  const token = info.token = {};\n  function update2(type, index, key, value) {\n    if (info.token !== token)\n      return;\n    info.resolved = value;\n    let child_ctx = info.ctx;\n    if (key !== void 0) {\n      child_ctx = child_ctx.slice();\n      child_ctx[key] = value;\n    }\n    const block = type && (info.current = type)(child_ctx);\n    let needs_flush = false;\n    if (info.block) {\n      if (info.blocks) {\n        info.blocks.forEach((block2, i) => {\n          if (i !== index && block2) {\n            group_outros();\n            transition_out(block2, 1, 1, () => {\n              if (info.blocks[i] === block2) {\n                info.blocks[i] = null;\n              }\n            });\n            check_outros();\n          }\n        });\n      } else {\n        info.block.d(1);\n      }\n      block.c();\n      transition_in(block, 1);\n      block.m(info.mount(), info.anchor);\n      needs_flush = true;\n    }\n    info.block = block;\n    if (info.blocks)\n      info.blocks[index] = block;\n    if (needs_flush) {\n      flush();\n    }\n  }\n  if (is_promise(promise2)) {\n    const current_component2 = get_current_component();\n    promise2.then((value) => {\n      set_current_component(current_component2);\n      update2(info.then, 1, info.value, value);\n      set_current_component(null);\n    }, (error) => {\n      set_current_component(current_component2);\n      update2(info.catch, 2, info.error, error);\n      set_current_component(null);\n      if (!info.hasCatch) {\n        throw error;\n      }\n    });\n    if (info.current !== info.pending) {\n      update2(info.pending, 0);\n      return true;\n    }\n  } else {\n    if (info.current !== info.then) {\n      update2(info.then, 1, info.value, promise2);\n      return true;\n    }\n    info.resolved = promise2;\n  }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n  const child_ctx = ctx.slice();\n  const {resolved} = info;\n  if (info.current === info.then) {\n    child_ctx[info.value] = resolved;\n  }\n  if (info.current === info.catch) {\n    child_ctx[info.error] = resolved;\n  }\n  info.block.p(child_ctx, dirty);\n}\nconst globals = typeof window !== \"undefined\" ? window : typeof globalThis !== \"undefined\" ? globalThis : global;\nfunction destroy_block(block, lookup) {\n  block.d(1);\n  lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n  transition_out(block, 1, 1, () => {\n    lookup.delete(block.key);\n  });\n}\nfunction fix_and_destroy_block(block, lookup) {\n  block.f();\n  destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n  block.f();\n  outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n  let o = old_blocks.length;\n  let n = list.length;\n  let i = o;\n  const old_indexes = {};\n  while (i--)\n    old_indexes[old_blocks[i].key] = i;\n  const new_blocks = [];\n  const new_lookup = new Map();\n  const deltas = new Map();\n  i = n;\n  while (i--) {\n    const child_ctx = get_context(ctx, list, i);\n    const key = get_key(child_ctx);\n    let block = lookup.get(key);\n    if (!block) {\n      block = create_each_block(key, child_ctx);\n      block.c();\n    } else if (dynamic) {\n      block.p(child_ctx, dirty);\n    }\n    new_lookup.set(key, new_blocks[i] = block);\n    if (key in old_indexes)\n      deltas.set(key, Math.abs(i - old_indexes[key]));\n  }\n  const will_move = new Set();\n  const did_move = new Set();\n  function insert2(block) {\n    transition_in(block, 1);\n    block.m(node, next);\n    lookup.set(block.key, block);\n    next = block.first;\n    n--;\n  }\n  while (o && n) {\n    const new_block = new_blocks[n - 1];\n    const old_block = old_blocks[o - 1];\n    const new_key = new_block.key;\n    const old_key = old_block.key;\n    if (new_block === old_block) {\n      next = new_block.first;\n      o--;\n      n--;\n    } else if (!new_lookup.has(old_key)) {\n      destroy(old_block, lookup);\n      o--;\n    } else if (!lookup.has(new_key) || will_move.has(new_key)) {\n      insert2(new_block);\n    } else if (did_move.has(old_key)) {\n      o--;\n    } else if (deltas.get(new_key) > deltas.get(old_key)) {\n      did_move.add(new_key);\n      insert2(new_block);\n    } else {\n      will_move.add(old_key);\n      o--;\n    }\n  }\n  while (o--) {\n    const old_block = old_blocks[o];\n    if (!new_lookup.has(old_block.key))\n      destroy(old_block, lookup);\n  }\n  while (n)\n    insert2(new_blocks[n - 1]);\n  return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n  const keys = new Set();\n  for (let i = 0; i < list.length; i++) {\n    const key = get_key(get_context(ctx, list, i));\n    if (keys.has(key)) {\n      throw new Error(\"Cannot have duplicate keys in a keyed each\");\n    }\n    keys.add(key);\n  }\n}\nfunction get_spread_update(levels, updates) {\n  const update2 = {};\n  const to_null_out = {};\n  const accounted_for = {$$scope: 1};\n  let i = levels.length;\n  while (i--) {\n    const o = levels[i];\n    const n = updates[i];\n    if (n) {\n      for (const key in o) {\n        if (!(key in n))\n          to_null_out[key] = 1;\n      }\n      for (const key in n) {\n        if (!accounted_for[key]) {\n          update2[key] = n[key];\n          accounted_for[key] = 1;\n        }\n      }\n      levels[i] = n;\n    } else {\n      for (const key in o) {\n        accounted_for[key] = 1;\n      }\n    }\n  }\n  for (const key in to_null_out) {\n    if (!(key in update2))\n      update2[key] = void 0;\n  }\n  return update2;\n}\nfunction get_spread_object(spread_props) {\n  return typeof spread_props === \"object\" && spread_props !== null ? spread_props : {};\n}\nconst boolean_attributes = new Set([\n  \"allowfullscreen\",\n  \"allowpaymentrequest\",\n  \"async\",\n  \"autofocus\",\n  \"autoplay\",\n  \"checked\",\n  \"controls\",\n  \"default\",\n  \"defer\",\n  \"disabled\",\n  \"formnovalidate\",\n  \"hidden\",\n  \"ismap\",\n  \"loop\",\n  \"multiple\",\n  \"muted\",\n  \"nomodule\",\n  \"novalidate\",\n  \"open\",\n  \"playsinline\",\n  \"readonly\",\n  \"required\",\n  \"reversed\",\n  \"selected\"\n]);\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\nfunction spread(args, attrs_to_add) {\n  const attributes = Object.assign({}, ...args);\n  if (attrs_to_add) {\n    const classes_to_add = attrs_to_add.classes;\n    const styles_to_add = attrs_to_add.styles;\n    if (classes_to_add) {\n      if (attributes.class == null) {\n        attributes.class = classes_to_add;\n      } else {\n        attributes.class += \" \" + classes_to_add;\n      }\n    }\n    if (styles_to_add) {\n      if (attributes.style == null) {\n        attributes.style = style_object_to_string(styles_to_add);\n      } else {\n        attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n      }\n    }\n  }\n  let str = \"\";\n  Object.keys(attributes).forEach((name) => {\n    if (invalid_attribute_name_character.test(name))\n      return;\n    const value = attributes[name];\n    if (value === true)\n      str += \" \" + name;\n    else if (boolean_attributes.has(name.toLowerCase())) {\n      if (value)\n        str += \" \" + name;\n    } else if (value != null) {\n      str += ` ${name}=\"${value}\"`;\n    }\n  });\n  return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n  const style_object = {};\n  for (const individual_style of style_attribute.split(\";\")) {\n    const colon_index = individual_style.indexOf(\":\");\n    const name = individual_style.slice(0, colon_index).trim();\n    const value = individual_style.slice(colon_index + 1).trim();\n    if (!name)\n      continue;\n    style_object[name] = value;\n  }\n  for (const name in style_directive) {\n    const value = style_directive[name];\n    if (value) {\n      style_object[name] = value;\n    } else {\n      delete style_object[name];\n    }\n  }\n  return style_object;\n}\nconst escaped = {\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\"\n};\nfunction escape(html) {\n  return String(html).replace(/[\"'&<>]/g, (match) => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n  return typeof value === \"string\" ? escape(value) : value;\n}\nfunction escape_object(obj) {\n  const result = {};\n  for (const key in obj) {\n    result[key] = escape_attribute_value(obj[key]);\n  }\n  return result;\n}\nfunction each(items, fn) {\n  let str = \"\";\n  for (let i = 0; i < items.length; i += 1) {\n    str += fn(items[i], i);\n  }\n  return str;\n}\nconst missing_component = {\n  $$render: () => \"\"\n};\nfunction validate_component(component, name) {\n  if (!component || !component.$$render) {\n    if (name === \"svelte:component\")\n      name += \" this={...}\";\n    throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n  }\n  return component;\n}\nfunction debug(file, line, column, values) {\n  console.log(`{@debug} ${file ? file + \" \" : \"\"}(${line}:${column})`);\n  console.log(values);\n  return \"\";\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n  function $$render(result, props, bindings, slots, context) {\n    const parent_component = current_component;\n    const $$ = {\n      on_destroy,\n      context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n      on_mount: [],\n      before_update: [],\n      after_update: [],\n      callbacks: blank_object()\n    };\n    set_current_component({$$});\n    const html = fn(result, props, bindings, slots);\n    set_current_component(parent_component);\n    return html;\n  }\n  return {\n    render: (props = {}, {$$slots = {}, context = new Map()} = {}) => {\n      on_destroy = [];\n      const result = {title: \"\", head: \"\", css: new Set()};\n      const html = $$render(result, props, {}, $$slots, context);\n      run_all(on_destroy);\n      return {\n        html,\n        css: {\n          code: Array.from(result.css).map((css) => css.code).join(\"\\n\"),\n          map: null\n        },\n        head: result.title + result.head\n      };\n    },\n    $$render\n  };\n}\nfunction add_attribute(name, value, boolean) {\n  if (value == null || boolean && !value)\n    return \"\";\n  return ` ${name}${value === true && boolean_attributes.has(name) ? \"\" : `=${typeof value === \"string\" ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n  return classes ? ` class=\"${classes}\"` : \"\";\n}\nfunction style_object_to_string(style_object) {\n  return Object.keys(style_object).filter((key) => style_object[key]).map((key) => `${key}: ${style_object[key]};`).join(\" \");\n}\nfunction add_styles(style_object) {\n  const styles = style_object_to_string(style_object);\n  return styles ? ` style=\"${styles}\"` : \"\";\n}\nfunction bind(component, name, callback) {\n  const index = component.$$.props[name];\n  if (index !== void 0) {\n    component.$$.bound[index] = callback;\n    callback(component.$$.ctx[index]);\n  }\n}\nfunction create_component(block) {\n  block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n  block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n  const {fragment, on_mount, on_destroy: on_destroy2, after_update} = component.$$;\n  fragment && fragment.m(target, anchor);\n  if (!customElement) {\n    add_render_callback(() => {\n      const new_on_destroy = on_mount.map(run).filter(is_function);\n      if (on_destroy2) {\n        on_destroy2.push(...new_on_destroy);\n      } else {\n        run_all(new_on_destroy);\n      }\n      component.$$.on_mount = [];\n    });\n  }\n  after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n  const $$ = component.$$;\n  if ($$.fragment !== null) {\n    run_all($$.on_destroy);\n    $$.fragment && $$.fragment.d(detaching);\n    $$.on_destroy = $$.fragment = null;\n    $$.ctx = [];\n  }\n}\nfunction make_dirty(component, i) {\n  if (component.$$.dirty[0] === -1) {\n    dirty_components.push(component);\n    schedule_update();\n    component.$$.dirty.fill(0);\n  }\n  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;\n}\nfunction init(component, options, instance, create_fragment, not_equal2, props, append_styles2, dirty = [-1]) {\n  const parent_component = current_component;\n  set_current_component(component);\n  const $$ = component.$$ = {\n    fragment: null,\n    ctx: null,\n    props,\n    update: noop,\n    not_equal: not_equal2,\n    bound: blank_object(),\n    on_mount: [],\n    on_destroy: [],\n    on_disconnect: [],\n    before_update: [],\n    after_update: [],\n    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n    callbacks: blank_object(),\n    dirty,\n    skip_bound: false,\n    root: options.target || parent_component.$$.root\n  };\n  append_styles2 && append_styles2($$.root);\n  let ready = false;\n  $$.ctx = instance ? instance(component, options.props || {}, (i, ret, ...rest) => {\n    const value = rest.length ? rest[0] : ret;\n    if ($$.ctx && not_equal2($$.ctx[i], $$.ctx[i] = value)) {\n      if (!$$.skip_bound && $$.bound[i])\n        $$.bound[i](value);\n      if (ready)\n        make_dirty(component, i);\n    }\n    return ret;\n  }) : [];\n  $$.update();\n  ready = true;\n  run_all($$.before_update);\n  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n  if (options.target) {\n    if (options.hydrate) {\n      start_hydrating();\n      const nodes = children(options.target);\n      $$.fragment && $$.fragment.l(nodes);\n      nodes.forEach(detach);\n    } else {\n      $$.fragment && $$.fragment.c();\n    }\n    if (options.intro)\n      transition_in(component.$$.fragment);\n    mount_component(component, options.target, options.anchor, options.customElement);\n    end_hydrating();\n    flush();\n  }\n  set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === \"function\") {\n  SvelteElement = class extends HTMLElement {\n    constructor() {\n      super();\n      this.attachShadow({mode: \"open\"});\n    }\n    connectedCallback() {\n      const {on_mount} = this.$$;\n      this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n      for (const key in this.$$.slotted) {\n        this.appendChild(this.$$.slotted[key]);\n      }\n    }\n    attributeChangedCallback(attr2, _oldValue, newValue) {\n      this[attr2] = newValue;\n    }\n    disconnectedCallback() {\n      run_all(this.$$.on_disconnect);\n    }\n    $destroy() {\n      destroy_component(this, 1);\n      this.$destroy = noop;\n    }\n    $on(type, callback) {\n      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\n      callbacks.push(callback);\n      return () => {\n        const index = callbacks.indexOf(callback);\n        if (index !== -1)\n          callbacks.splice(index, 1);\n      };\n    }\n    $set($$props) {\n      if (this.$$set && !is_empty($$props)) {\n        this.$$.skip_bound = true;\n        this.$$set($$props);\n        this.$$.skip_bound = false;\n      }\n    }\n  };\n}\nclass SvelteComponent {\n  $destroy() {\n    destroy_component(this, 1);\n    this.$destroy = noop;\n  }\n  $on(type, callback) {\n    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\n    callbacks.push(callback);\n    return () => {\n      const index = callbacks.indexOf(callback);\n      if (index !== -1)\n        callbacks.splice(index, 1);\n    };\n  }\n  $set($$props) {\n    if (this.$$set && !is_empty($$props)) {\n      this.$$.skip_bound = true;\n      this.$$set($$props);\n      this.$$.skip_bound = false;\n    }\n  }\n}\nfunction dispatch_dev(type, detail) {\n  document.dispatchEvent(custom_event(type, Object.assign({version: \"3.46.4\"}, detail), true));\n}\nfunction append_dev(target, node) {\n  dispatch_dev(\"SvelteDOMInsert\", {target, node});\n  append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n  dispatch_dev(\"SvelteDOMInsert\", {target, node});\n  append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n  dispatch_dev(\"SvelteDOMInsert\", {target, node, anchor});\n  insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n  dispatch_dev(\"SvelteDOMInsert\", {target, node, anchor});\n  insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n  dispatch_dev(\"SvelteDOMRemove\", {node});\n  detach(node);\n}\nfunction detach_between_dev(before, after) {\n  while (before.nextSibling && before.nextSibling !== after) {\n    detach_dev(before.nextSibling);\n  }\n}\nfunction detach_before_dev(after) {\n  while (after.previousSibling) {\n    detach_dev(after.previousSibling);\n  }\n}\nfunction detach_after_dev(before) {\n  while (before.nextSibling) {\n    detach_dev(before.nextSibling);\n  }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n  const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n  if (has_prevent_default)\n    modifiers.push(\"preventDefault\");\n  if (has_stop_propagation)\n    modifiers.push(\"stopPropagation\");\n  dispatch_dev(\"SvelteDOMAddEventListener\", {node, event, handler, modifiers});\n  const dispose = listen(node, event, handler, options);\n  return () => {\n    dispatch_dev(\"SvelteDOMRemoveEventListener\", {node, event, handler, modifiers});\n    dispose();\n  };\n}\nfunction attr_dev(node, attribute, value) {\n  attr(node, attribute, value);\n  if (value == null)\n    dispatch_dev(\"SvelteDOMRemoveAttribute\", {node, attribute});\n  else\n    dispatch_dev(\"SvelteDOMSetAttribute\", {node, attribute, value});\n}\nfunction prop_dev(node, property, value) {\n  node[property] = value;\n  dispatch_dev(\"SvelteDOMSetProperty\", {node, property, value});\n}\nfunction dataset_dev(node, property, value) {\n  node.dataset[property] = value;\n  dispatch_dev(\"SvelteDOMSetDataset\", {node, property, value});\n}\nfunction set_data_dev(text2, data) {\n  data = \"\" + data;\n  if (text2.wholeText === data)\n    return;\n  dispatch_dev(\"SvelteDOMSetData\", {node: text2, data});\n  text2.data = data;\n}\nfunction validate_each_argument(arg) {\n  if (typeof arg !== \"string\" && !(arg && typeof arg === \"object\" && \"length\" in arg)) {\n    let msg = \"{#each} only iterates over array-like objects.\";\n    if (typeof Symbol === \"function\" && arg && Symbol.iterator in arg) {\n      msg += \" You can use a spread to convert this iterable into an array.\";\n    }\n    throw new Error(msg);\n  }\n}\nfunction validate_slots(name, slot, keys) {\n  for (const slot_key of Object.keys(slot)) {\n    if (!~keys.indexOf(slot_key)) {\n      console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n    }\n  }\n}\nclass SvelteComponentDev extends SvelteComponent {\n  constructor(options) {\n    if (!options || !options.target && !options.$$inline) {\n      throw new Error(\"'target' is a required option\");\n    }\n    super();\n  }\n  $destroy() {\n    super.$destroy();\n    this.$destroy = () => {\n      console.warn(\"Component was already destroyed\");\n    };\n  }\n  $capture_state() {\n  }\n  $inject_state() {\n  }\n}\nclass SvelteComponentTyped extends SvelteComponentDev {\n  constructor(options) {\n    super(options);\n  }\n}\nfunction loop_guard(timeout) {\n  const start = Date.now();\n  return () => {\n    if (Date.now() - start > timeout) {\n      throw new Error(\"Infinite loop detected\");\n    }\n  };\n}\nexport {HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr};\nexport default null;\n","<script>\n  export let name;\n</script>\n\n<main>\n  <h1>Hello {name}!</h1>\n  <p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n","const now = (typeof process !== 'undefined' && process.hrtime)\n    ? () => {\n        const t = process.hrtime();\n        return t[0] * 1e3 + t[1] / 1e6;\n    }\n    : () => self.performance.now();\nfunction collapse_timings(timings) {\n    const result = {};\n    timings.forEach(timing => {\n        result[timing.label] = Object.assign({\n            total: timing.end - timing.start\n        }, timing.children && collapse_timings(timing.children));\n    });\n    return result;\n}\nclass Stats {\n    constructor() {\n        this.start_time = now();\n        this.stack = [];\n        this.current_children = this.timings = [];\n    }\n    start(label) {\n        const timing = {\n            label,\n            start: now(),\n            end: null,\n            children: []\n        };\n        this.current_children.push(timing);\n        this.stack.push(timing);\n        this.current_timing = timing;\n        this.current_children = timing.children;\n    }\n    stop(label) {\n        if (label !== this.current_timing.label) {\n            throw new Error(`Mismatched timing labels (expected ${this.current_timing.label}, got ${label})`);\n        }\n        this.current_timing.end = now();\n        this.stack.pop();\n        this.current_timing = this.stack[this.stack.length - 1];\n        this.current_children = this.current_timing ? this.current_timing.children : this.timings;\n    }\n    render() {\n        const timings = Object.assign({\n            total: now() - this.start_time\n        }, collapse_timings(this.timings));\n        return {\n            timings\n        };\n    }\n}\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  privateId: new TokenType(\"privateId\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n  coalesce: binop(\"??\", 1),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n  // (2019), 11 (2020), 12 (2021), 13 (2022), or `\"latest\"` (the\n  // latest version the library supports). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features.\n  ecmaVersion: null,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program, and an import.meta expression\n  // in a script isn't considered an error.\n  allowImportExportEverywhere: false,\n  // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: null,\n  // When enabled, super identifiers are not constrained to\n  // appearing in methods and do not raise an error when they appear elsewhere.\n  allowSuperOutsideMethod: null,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nvar warnedAboutEcmaVersion = false;\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion === \"latest\") {\n    options.ecmaVersion = 1e8;\n  } else if (options.ecmaVersion == null) {\n    if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n      warnedAboutEcmaVersion = true;\n      console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n    }\n    options.ecmaVersion = 11;\n  } else if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal* and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0, // Not a binding\n    BIND_VAR = 1, // Var-style binding\n    BIND_LEXICAL = 2, // Let- or const-style binding\n    BIND_FUNCTION = 3, // Function declaration\n    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n  if (options.allowReserved !== true) {\n    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n  this.potentialArrowInForAwait = false;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = Object.create(null);\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n\n  // The stack of private names.\n  // Each element has two properties: 'declared' and 'used'.\n  // When it exited from the outermost class definition, all used private names must be declared.\n  this.privateNameStack = [];\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },inNonArrowFunction: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\nprototypeAccessors.canAwait.get = function () {\n  for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.inClassFieldInit) { return false }\n    if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n  }\n  return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n};\nprototypeAccessors.allowSuper.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n};\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\nprototypeAccessors.inNonArrowFunction.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & SCOPE_FUNCTION) > 0 || inClassFieldInit\n};\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\npp.strictDirective = function(start) {\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === \";\" || next === \"}\" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n    }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var exports = Object.create(null);\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91 || nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '[', '/', astral\n  if (context) { return false }\n\n  if (nextCh === 123) { return true } // '{'\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\n    if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, after;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length ||\n     !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock(true, node)\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (this.options.ecmaVersion > 10 && starttype === types._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node, this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLValPattern(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this.type === types._case || this.type === types._default) {\n      var isCase = this.type === types._case;\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var isForIn = this.type === types._in;\n  this.next();\n\n  if (\n    init.type === \"VariableDeclaration\" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== \"var\" ||\n      init.declarations[0].id.type !== \"Identifier\"\n    )\n  ) {\n    this.raise(\n      init.start,\n      ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n    );\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n    if (this.eat(types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var privateNameMap = this.enterClassBody();\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (this.type !== types.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      } else if (element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n        this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  this.exitClassBody();\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassElement = function(constructorAllowsSuper) {\n  if (this.eat(types.semi)) { return null }\n\n  var ecmaVersion = this.options.ecmaVersion;\n  var node = this.startNode();\n  var keyName = \"\";\n  var isGenerator = false;\n  var isAsync = false;\n  var kind = \"method\";\n\n  // Parse modifiers\n  node.static = false;\n  if (this.eatContextual(\"static\")) {\n    if (this.isClassElementNameStart() || this.type === types.star) {\n      node.static = true;\n    } else {\n      keyName = \"static\";\n    }\n  }\n  if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n    if ((this.isClassElementNameStart() || this.type === types.star) && !this.canInsertSemicolon()) {\n      isAsync = true;\n    } else {\n      keyName = \"async\";\n    }\n  }\n  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types.star)) {\n    isGenerator = true;\n  }\n  if (!keyName && !isAsync && !isGenerator) {\n    var lastValue = this.value;\n    if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n      if (this.isClassElementNameStart()) {\n        kind = lastValue;\n      } else {\n        keyName = lastValue;\n      }\n    }\n  }\n\n  // Parse element name\n  if (keyName) {\n    // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n    // The last token is any of those. Make it the element name.\n    node.computed = false;\n    node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n    node.key.name = keyName;\n    this.finishNode(node.key, \"Identifier\");\n  } else {\n    this.parseClassElementName(node);\n  }\n\n  // Parse element value\n  if (ecmaVersion < 13 || this.type === types.parenL || kind !== \"method\" || isGenerator || isAsync) {\n    var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n    var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n    // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n    if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\n    node.kind = isConstructor ? \"constructor\" : kind;\n    this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n  } else {\n    this.parseClassField(node);\n  }\n\n  return node\n};\n\npp$1.isClassElementNameStart = function() {\n  return (\n    this.type === types.name ||\n    this.type === types.privateId ||\n    this.type === types.num ||\n    this.type === types.string ||\n    this.type === types.bracketL ||\n    this.type.keyword\n  )\n};\n\npp$1.parseClassElementName = function(element) {\n  if (this.type === types.privateId) {\n    if (this.value === \"constructor\") {\n      this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n    }\n    element.computed = false;\n    element.key = this.parsePrivateIdent();\n  } else {\n    this.parsePropertyName(element);\n  }\n};\n\npp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  // Check key and flags\n  var key = method.key;\n  if (method.kind === \"constructor\") {\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n  } else if (method.static && checkKeyName(method, \"prototype\")) {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n\n  // Parse value\n  var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n\n  // Check value\n  if (method.kind === \"get\" && value.params.length !== 0)\n    { this.raiseRecoverable(value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && value.params.length !== 1)\n    { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\n\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$1.parseClassField = function(field) {\n  if (checkKeyName(field, \"constructor\")) {\n    this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n  } else if (field.static && checkKeyName(field, \"prototype\")) {\n    this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n  }\n\n  if (this.eat(types.eq)) {\n    // To raise SyntaxError if 'arguments' exists in the initializer.\n    var scope = this.currentThisScope();\n    var inClassFieldInit = scope.inClassFieldInit;\n    scope.inClassFieldInit = true;\n    field.value = this.parseMaybeAssign();\n    scope.inClassFieldInit = inClassFieldInit;\n  } else {\n    field.value = null;\n  }\n  this.semicolon();\n\n  return this.finishNode(field, \"PropertyDefinition\")\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  if (this.type === types.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\npp$1.enterClassBody = function() {\n  var element = {declared: Object.create(null), used: []};\n  this.privateNameStack.push(element);\n  return element.declared\n};\n\npp$1.exitClassBody = function() {\n  var ref = this.privateNameStack.pop();\n  var declared = ref.declared;\n  var used = ref.used;\n  var len = this.privateNameStack.length;\n  var parent = len === 0 ? null : this.privateNameStack[len - 1];\n  for (var i = 0; i < used.length; ++i) {\n    var id = used[i];\n    if (!has(declared, id.name)) {\n      if (parent) {\n        parent.used.push(id);\n      } else {\n        this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\n      }\n    }\n  }\n};\n\nfunction isPrivateNameConflicted(privateNameMap, element) {\n  var name = element.key.name;\n  var curr = privateNameMap[name];\n\n  var next = \"true\";\n  if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n    next = (element.static ? \"s\" : \"i\") + element.kind;\n  }\n\n  // `class { get #a(){}; static set #a(_){} }` is also conflict.\n  if (\n    curr === \"iget\" && next === \"iset\" ||\n    curr === \"iset\" && next === \"iget\" ||\n    curr === \"sget\" && next === \"sset\" ||\n    curr === \"sset\" && next === \"sget\"\n  ) {\n    privateNameMap[name] = \"true\";\n    return false\n  } else if (!curr) {\n    privateNameMap[name] = next;\n    return false\n  } else {\n    return true\n  }\n}\n\nfunction checkKeyName(node, name) {\n  var computed = node.computed;\n  var key = node.key;\n  return !computed && (\n    key.type === \"Identifier\" && key.name === name ||\n    key.type === \"Literal\" && key.value === name\n  )\n}\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseIdent(true);\n        this.checkExport(exports, node.exported.name, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this.startNode();\n    node.local = this.parseIdent(true);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    this.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLValSimple(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this.startNode();\n    node$2.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node$2.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this.checkLValSimple(node$2.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"AssignmentPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types.comma); }\n    if (allowEmpty && this.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n      this.expect(close);\n      break\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// The following three functions all verify that a node is an lvalue —\n// something that can be bound, or assigned to. In order to do so, they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names, if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g., object and array\n// destructuring), the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere, like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += …;\n//     import a from '…';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports, as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = …);\n//     const a = …;\n//     try { … } catch (a) { … }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports, as well as default assignment\n//   patterns, rest elements, and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case, function parameters also use checkLValInnerPattern(),\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs,\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n// should be set to the appropriate BIND_* constant, like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType, then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e., bindingType is BIND_NONE).\n\npp$2.checkLValSimple = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  var isBind = bindingType !== BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (isBind) {\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    }\n    break\n\n  case \"ChainExpression\":\n    this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n    break\n\n  case \"MemberExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ParenthesizedExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n    return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n  default:\n    this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\npp$2.checkLValPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n    this.checkLValInnerPattern(prop, bindingType, checkClashes);\n    }\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n    }\n    break\n\n  default:\n    this.checkLValSimple(expr, bindingType, checkClashes);\n  }\n};\n\npp$2.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLValPattern(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLValPattern(expr.argument, bindingType, checkClashes);\n    break\n\n  default:\n    this.checkLValPattern(expr, bindingType, checkClashes);\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0)\n            { refDestructuringErrors.doubleProto = key.start; }\n          // Backwards-compat kludge. Can be removed in version 6.0\n        } else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(forInit) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types.parenL || this.type === types.name) {\n    this.potentialArrowAt = this.start;\n    this.potentialArrowInForAwait = forInit === \"await\";\n  }\n  var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    if (this.type === types.eq)\n      { left = this.toAssignable(left, false, refDestructuringErrors); }\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    if (this.type === types.eq)\n      { this.checkLValPattern(left); }\n    else\n      { this.checkLValSimple(left); }\n    node.left = left;\n    this.next();\n    node.right = this.parseMaybeAssign(forInit);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(forInit, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(forInit);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n  var prec = this.type.binop;\n  if (prec != null && (!forInit || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var coalesce = this.type === types.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, forInit);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n      if ((logical && this.type === types.coalesce) || (coalesce && (this.type === types.logicalOR || this.type === types.logicalAND))) {\n        this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n      }\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec) {\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && this.canAwait) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, update);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLValSimple(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\n      { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLValSimple(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!incDec && this.eat(types.starstar)) {\n    if (sawUnary)\n      { this.unexpected(this.lastTokStart); }\n    else\n      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  } else {\n    return expr\n  }\n};\n\nfunction isPrivateFieldAccess(node) {\n  return (\n    node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\n    node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression)\n  )\n}\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n    { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos, startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode, \"ChainExpression\");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n  var computed = this.eat(types.bracketL);\n  if (computed || (optional && this.type !== types.parenL && this.type !== types.backQuote) || this.eat(types.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(types.bracketR);\n    } else if (this.type === types.privateId && base.type !== \"Super\") {\n      node.property = this.parsePrivateIdent();\n    } else {\n      node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n    }\n    node.computed = !!computed;\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n    }\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc &&\n          (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  case types._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport()\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseExprImport = function() {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n  var meta = this.parseIdent(true);\n\n  switch (this.type) {\n  case types.parenL:\n    return this.parseDynamicImport(node)\n  case types.dot:\n    node.meta = meta;\n    return this.parseImportMeta(node)\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  // Verify ending.\n  if (!this.eat(types.parenR)) {\n    var errorPos = this.start;\n    if (this.eat(types.comma) && this.eat(types.parenR)) {\n      this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n    } else {\n      this.unexpected(errorPos);\n    }\n  }\n\n  return this.finishNode(node, \"ImportExpression\")\n};\n\npp$3.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== \"meta\")\n    { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n  if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\n    { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n  return this.finishNode(node, \"MetaProperty\")\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types.parenR) {\n      first ? first = false : this.expect(types.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n    if (!this.inNonArrowFunction)\n      { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (isImport && node.callee.type === \"ImportExpression\") {\n    this.raise(startPos, \"Cannot use new with import()\");\n  }\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n    this.expect(types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else {\n      prop.value = this.copyNode(prop.key);\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var nameHash = Object.create(null);\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types.comma)\n      { elt = null; }\n    else if (this.type === types.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\n    { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next(!!liberal);\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\npp$3.parsePrivateIdent = function() {\n  var node = this.startNode();\n  if (this.type === types.privateId) {\n    node.name = this.value;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"PrivateIdentifier\");\n\n  // For validating existence\n  if (this.privateNameStack.length === 0) {\n    this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\n  } else {\n    this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n  }\n\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function(forInit) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign(forInit);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n  // A switch to disallow the identifier reference 'arguments'\n  this.inClassFieldInit = false;\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$5.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$5.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$5.declareName = function(name, bindingType, pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$5.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$5.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$5.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$5.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\npp$6.copyNode = function(node) {\n  var newNode = new Node(this, node.start, this.startLoc);\n  for (var prop in node) { newNode[prop] = node[prop]; }\n  return newNode\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType === types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n    { return true }\n  if (prevType === types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType === types._var || prevType === types._const || prevType === types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types._else &&\n      !(prevType === types.semi && this.curContext() !== types$1.p_stat) &&\n      !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties,\n  12: ecma12BinaryProperties\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues,\n  12: ecma12ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\nbuildUnicodeData(9);\nbuildUnicodeData(10);\nbuildUnicodeData(11);\nbuildUnicodeData(12);\n\nvar pp$8 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 12 ? 12 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i), next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos, forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos, forceU), forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos, forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nfunction codePointToString(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$8.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$8.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$8.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$8.regexp_disjunction = function(state) {\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$8.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    { }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$8.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$8.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$8.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$8.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$8.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$8.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$8.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$8.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$8.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$8.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$8.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$8.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$8.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$8.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$8.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$8.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$8.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$8.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$8.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$8.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$8.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!has(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\npp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue))\n    { state.raise(\"Invalid property name\"); }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$8.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$8.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* ] */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$8.regexp_classRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$8.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$8.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$8.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$8.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$8.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$8.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$9 = Parser.prototype;\n\n// Move to the next token\n\npp$9.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$9.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$9[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$9.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$9.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$9.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$9.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xdc00) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n};\n\npp$9.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$9.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$9.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$9.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$9.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$9.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$9.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$9.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types.assign, 3) }\n    }\n    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$9.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$9.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$9.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$9.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$9.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types.questionDot, 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types.assign, 3) }\n      }\n      return this.finishOp(types.coalesce, 2)\n    }\n  }\n  return this.finishOp(types.question, 1)\n};\n\npp$9.readToken_numberSign = function() { // '#'\n  var ecmaVersion = this.options.ecmaVersion;\n  var code = 35; // '#'\n  if (ecmaVersion >= 13) {\n    ++this.pos;\n    code = this.fullCharCodeAtPos();\n    if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\n      return this.finishToken(types.privateId, this.readWord1())\n    }\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n};\n\npp$9.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n\n  case 35: // '#'\n    return this.readToken_numberSign()\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n};\n\npp$9.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$9.readRegexp = function() {\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case, disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n  // and isn't fraction part nor exponent part. In that case, if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos, total = 0, lastCode = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n    var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n      if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str, 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g, \"\"))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== \"function\") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g, \"\"))\n}\n\npp$9.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$9.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types.num, val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var val = stringToNumber(this.input.slice(start, this.pos), octal);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$9.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString$1(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$9.readString = function(quote) {\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$9.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$9.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$9.readTmplToken = function() {\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$9.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case \"\\\\\":\n      ++this.pos;\n      break\n\n    case \"$\":\n      if (this.input[this.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$9.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString$1(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  case 56:\n  case 57:\n    if (this.strict) {\n      this.invalidStringToken(\n        this.pos - 1,\n        \"Invalid escape sequence\"\n      );\n    }\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos,\n        \"Invalid escape sequence in template string\"\n      );\n\n      return null\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$9.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$9.readWord1 = function() {\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString$1(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$9.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\nvar version = \"8.4.1\";\n\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types,\n  keywordTypes: keywords$1,\n  TokContext: TokContext,\n  tokContexts: types$1,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\nfunction flatten(nodes, target = []) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (Array.isArray(node)) {\n            flatten(node, target);\n        }\n        else {\n            target.push(node);\n        }\n    }\n    return target;\n}\n\nconst pattern = /^\\s*svelte-ignore\\s+([\\s\\S]+)\\s*$/m;\nfunction extract_svelte_ignore(text) {\n    const match = pattern.exec(text);\n    return match ? match[1].split(/[^\\S]/).map(x => x.trim()).filter(Boolean) : [];\n}\nfunction extract_svelte_ignore_from_comments(node) {\n    return flatten((node.leadingComments || []).map(comment => extract_svelte_ignore(comment.value)));\n}\nfunction extract_ignores_above_position(position, template_nodes) {\n    const previous_node_idx = template_nodes.findIndex(child => child.end === position);\n    if (previous_node_idx === -1) {\n        return [];\n    }\n    for (let i = previous_node_idx; i >= 0; i--) {\n        const node = template_nodes[i];\n        if (node.type !== 'Comment' && node.type !== 'Text') {\n            return [];\n        }\n        if (node.type === 'Comment') {\n            if (node.ignores.length) {\n                return node.ignores;\n            }\n        }\n    }\n    return [];\n}\n\nfunction fuzzymatch(name, names) {\n    const set = new FuzzySet(names);\n    const matches = set.get(name);\n    return matches && matches[0] && matches[0][0] > 0.7 ? matches[0][1] : null;\n}\n// adapted from https://github.com/Glench/fuzzyset.js/blob/master/lib/fuzzyset.js\n// BSD Licensed\nconst GRAM_SIZE_LOWER = 2;\nconst GRAM_SIZE_UPPER = 3;\n// return an edit distance from 0 to 1\nfunction _distance(str1, str2) {\n    if (str1 === null && str2 === null) {\n        throw 'Trying to compare two null values';\n    }\n    if (str1 === null || str2 === null)\n        return 0;\n    str1 = String(str1);\n    str2 = String(str2);\n    const distance = levenshtein(str1, str2);\n    if (str1.length > str2.length) {\n        return 1 - distance / str1.length;\n    }\n    else {\n        return 1 - distance / str2.length;\n    }\n}\n// helper functions\nfunction levenshtein(str1, str2) {\n    const current = [];\n    let prev;\n    let value;\n    for (let i = 0; i <= str2.length; i++) {\n        for (let j = 0; j <= str1.length; j++) {\n            if (i && j) {\n                if (str1.charAt(j - 1) === str2.charAt(i - 1)) {\n                    value = prev;\n                }\n                else {\n                    value = Math.min(current[j], current[j - 1], prev) + 1;\n                }\n            }\n            else {\n                value = i + j;\n            }\n            prev = current[j];\n            current[j] = value;\n        }\n    }\n    return current.pop();\n}\nconst non_word_regex = /[^\\w, ]+/;\nfunction iterate_grams(value, gram_size = 2) {\n    const simplified = '-' + value.toLowerCase().replace(non_word_regex, '') + '-';\n    const len_diff = gram_size - simplified.length;\n    const results = [];\n    if (len_diff > 0) {\n        for (let i = 0; i < len_diff; ++i) {\n            value += '-';\n        }\n    }\n    for (let i = 0; i < simplified.length - gram_size + 1; ++i) {\n        results.push(simplified.slice(i, i + gram_size));\n    }\n    return results;\n}\nfunction gram_counter(value, gram_size = 2) {\n    // return an object where key=gram, value=number of occurrences\n    const result = {};\n    const grams = iterate_grams(value, gram_size);\n    let i = 0;\n    for (i; i < grams.length; ++i) {\n        if (grams[i] in result) {\n            result[grams[i]] += 1;\n        }\n        else {\n            result[grams[i]] = 1;\n        }\n    }\n    return result;\n}\nfunction sort_descending(a, b) {\n    return b[0] - a[0];\n}\nclass FuzzySet {\n    constructor(arr) {\n        this.exact_set = {};\n        this.match_dict = {};\n        this.items = {};\n        // initialization\n        for (let i = GRAM_SIZE_LOWER; i < GRAM_SIZE_UPPER + 1; ++i) {\n            this.items[i] = [];\n        }\n        // add all the items to the set\n        for (let i = 0; i < arr.length; ++i) {\n            this.add(arr[i]);\n        }\n    }\n    add(value) {\n        const normalized_value = value.toLowerCase();\n        if (normalized_value in this.exact_set) {\n            return false;\n        }\n        let i = GRAM_SIZE_LOWER;\n        for (i; i < GRAM_SIZE_UPPER + 1; ++i) {\n            this._add(value, i);\n        }\n    }\n    _add(value, gram_size) {\n        const normalized_value = value.toLowerCase();\n        const items = this.items[gram_size] || [];\n        const index = items.length;\n        items.push(0);\n        const gram_counts = gram_counter(normalized_value, gram_size);\n        let sum_of_square_gram_counts = 0;\n        let gram;\n        let gram_count;\n        for (gram in gram_counts) {\n            gram_count = gram_counts[gram];\n            sum_of_square_gram_counts += Math.pow(gram_count, 2);\n            if (gram in this.match_dict) {\n                this.match_dict[gram].push([index, gram_count]);\n            }\n            else {\n                this.match_dict[gram] = [[index, gram_count]];\n            }\n        }\n        const vector_normal = Math.sqrt(sum_of_square_gram_counts);\n        items[index] = [vector_normal, normalized_value];\n        this.items[gram_size] = items;\n        this.exact_set[normalized_value] = value;\n    }\n    get(value) {\n        const normalized_value = value.toLowerCase();\n        const result = this.exact_set[normalized_value];\n        if (result) {\n            return [[1, result]];\n        }\n        let results = [];\n        // start with high gram size and if there are no results, go to lower gram sizes\n        for (let gram_size = GRAM_SIZE_UPPER; gram_size >= GRAM_SIZE_LOWER; --gram_size) {\n            results = this.__get(value, gram_size);\n            if (results) {\n                return results;\n            }\n        }\n        return null;\n    }\n    __get(value, gram_size) {\n        const normalized_value = value.toLowerCase();\n        const matches = {};\n        const gram_counts = gram_counter(normalized_value, gram_size);\n        const items = this.items[gram_size];\n        let sum_of_square_gram_counts = 0;\n        let gram;\n        let gram_count;\n        let i;\n        let index;\n        let other_gram_count;\n        for (gram in gram_counts) {\n            gram_count = gram_counts[gram];\n            sum_of_square_gram_counts += Math.pow(gram_count, 2);\n            if (gram in this.match_dict) {\n                for (i = 0; i < this.match_dict[gram].length; ++i) {\n                    index = this.match_dict[gram][i][0];\n                    other_gram_count = this.match_dict[gram][i][1];\n                    if (index in matches) {\n                        matches[index] += gram_count * other_gram_count;\n                    }\n                    else {\n                        matches[index] = gram_count * other_gram_count;\n                    }\n                }\n            }\n        }\n        const vector_normal = Math.sqrt(sum_of_square_gram_counts);\n        let results = [];\n        let match_score;\n        // build a results list of [score, str]\n        for (const match_index in matches) {\n            match_score = matches[match_index];\n            results.push([\n                match_score / (vector_normal * items[match_index][0]),\n                items[match_index][1]\n            ]);\n        }\n        results.sort(sort_descending);\n        let new_results = [];\n        const end_index = Math.min(50, results.length);\n        // truncate somewhat arbitrarily to 50\n        for (let i = 0; i < end_index; ++i) {\n            new_results.push([\n                _distance(results[i][1], normalized_value),\n                results[i][1]\n            ]);\n        }\n        results = new_results;\n        results.sort(sort_descending);\n        new_results = [];\n        for (let i = 0; i < results.length; ++i) {\n            if (results[i][0] == results[0][0]) {\n                new_results.push([results[i][0], this.exact_set[results[i][1]]]);\n            }\n        }\n        return new_results;\n    }\n}\n\n// Adapted from https://github.com/acornjs/acorn/blob/6584815dca7440e00de841d1dad152302fdd7ca5/src/tokenize.js\n// Reproduced under MIT License https://github.com/acornjs/acorn/blob/master/LICENSE\nfunction full_char_code_at(str, i) {\n    const code = str.charCodeAt(i);\n    if (code <= 0xd7ff || code >= 0xe000)\n        return code;\n    const next = str.charCodeAt(i + 1);\n    return (code << 10) + next - 0x35fdc00;\n}\n\nconst globals = new Set([\n    'alert',\n    'Array',\n    'BigInt',\n    'Boolean',\n    'clearInterval',\n    'clearTimeout',\n    'confirm',\n    'console',\n    'Date',\n    'decodeURI',\n    'decodeURIComponent',\n    'document',\n    'Element',\n    'encodeURI',\n    'encodeURIComponent',\n    'Error',\n    'EvalError',\n    'Event',\n    'EventSource',\n    'fetch',\n    'FormData',\n    'global',\n    'globalThis',\n    'history',\n    'HTMLElement',\n    'Infinity',\n    'InternalError',\n    'Intl',\n    'isFinite',\n    'isNaN',\n    'JSON',\n    'localStorage',\n    'location',\n    'Map',\n    'Math',\n    'NaN',\n    'navigator',\n    'Node',\n    'Number',\n    'Object',\n    'parseFloat',\n    'parseInt',\n    'process',\n    'Promise',\n    'prompt',\n    'RangeError',\n    'ReferenceError',\n    'RegExp',\n    'sessionStorage',\n    'Set',\n    'setInterval',\n    'setTimeout',\n    'String',\n    'SVGElement',\n    'SyntaxError',\n    'TypeError',\n    'undefined',\n    'URIError',\n    'URL',\n    'URLSearchParams',\n    'window'\n]);\nconst reserved = new Set([\n    'arguments',\n    'await',\n    'break',\n    'case',\n    'catch',\n    'class',\n    'const',\n    'continue',\n    'debugger',\n    'default',\n    'delete',\n    'do',\n    'else',\n    'enum',\n    'eval',\n    'export',\n    'extends',\n    'false',\n    'finally',\n    'for',\n    'function',\n    'if',\n    'implements',\n    'import',\n    'in',\n    'instanceof',\n    'interface',\n    'let',\n    'new',\n    'null',\n    'package',\n    'private',\n    'protected',\n    'public',\n    'return',\n    'static',\n    'super',\n    'switch',\n    'this',\n    'throw',\n    'true',\n    'try',\n    'typeof',\n    'var',\n    'void',\n    'while',\n    'with',\n    'yield'\n]);\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\nfunction is_valid(str) {\n    let i = 0;\n    while (i < str.length) {\n        const code = full_char_code_at(str, i);\n        if (!(i === 0 ? isIdentifierStart : isIdentifierChar)(code, true))\n            return false;\n        i += code <= 0xffff ? 1 : 2;\n    }\n    return true;\n}\nfunction sanitize(name) {\n    return name\n        .replace(/[^a-zA-Z0-9_]+/g, '_')\n        .replace(/^_/, '')\n        .replace(/_$/, '')\n        .replace(/^[0-9]/, '_$&');\n}\n\nfunction list(items, conjunction = 'or') {\n    if (items.length === 1)\n        return items[0];\n    return `${items.slice(0, -1).join(', ')} ${conjunction} ${items[items.length - 1]}`;\n}\n\n// All parser errors should be listed and accessed from here\n/**\n * @internal\n */\nvar parser_errors = {\n    css_syntax_error: (message) => ({\n        code: 'css-syntax-error',\n        message\n    }),\n    duplicate_attribute: {\n        code: 'duplicate-attribute',\n        message: 'Attributes need to be unique'\n    },\n    duplicate_element: (slug, name) => ({\n        code: `duplicate-${slug}`,\n        message: `A component can only have one <${name}> tag`\n    }),\n    duplicate_style: {\n        code: 'duplicate-style',\n        message: 'You can only have one top-level <style> tag per component'\n    },\n    empty_attribute_shorthand: {\n        code: 'empty-attribute-shorthand',\n        message: 'Attribute shorthand cannot be empty'\n    },\n    empty_directive_name: (type) => ({\n        code: 'empty-directive-name',\n        message: `${type} name cannot be empty`\n    }),\n    empty_global_selector: {\n        code: 'css-syntax-error',\n        message: ':global() must contain a selector'\n    },\n    expected_block_type: {\n        code: 'expected-block-type',\n        message: 'Expected if, each or await'\n    },\n    expected_name: {\n        code: 'expected-name',\n        message: 'Expected name'\n    },\n    invalid_catch_placement_unclosed_block: (block) => ({\n        code: 'invalid-catch-placement',\n        message: `Expected to close ${block} before seeing {:catch} block`\n    }),\n    invalid_catch_placement_without_await: {\n        code: 'invalid-catch-placement',\n        message: 'Cannot have an {:catch} block outside an {#await ...} block'\n    },\n    invalid_component_definition: {\n        code: 'invalid-component-definition',\n        message: 'invalid component definition'\n    },\n    invalid_closing_tag_unopened: (name) => ({\n        code: 'invalid-closing-tag',\n        message: `</${name}> attempted to close an element that was not open`\n    }),\n    invalid_closing_tag_autoclosed: (name, reason) => ({\n        code: 'invalid-closing-tag',\n        message: `</${name}> attempted to close <${name}> that was already automatically closed by <${reason}>`\n    }),\n    invalid_debug_args: {\n        code: 'invalid-debug-args',\n        message: '{@debug ...} arguments must be identifiers, not arbitrary expressions'\n    },\n    invalid_declaration: {\n        code: 'invalid-declaration',\n        message: 'Declaration cannot be empty'\n    },\n    invalid_directive_value: {\n        code: 'invalid-directive-value',\n        message: 'Directive value must be a JavaScript expression enclosed in curly braces'\n    },\n    invalid_elseif: {\n        code: 'invalid-elseif',\n        message: '\\'elseif\\' should be \\'else if\\''\n    },\n    invalid_elseif_placement_outside_if: {\n        code: 'invalid-elseif-placement',\n        message: 'Cannot have an {:else if ...} block outside an {#if ...} block'\n    },\n    invalid_elseif_placement_unclosed_block: (block) => ({\n        code: 'invalid-elseif-placement',\n        message: `Expected to close ${block} before seeing {:else if ...} block`\n    }),\n    invalid_else_placement_outside_if: {\n        code: 'invalid-else-placement',\n        message: 'Cannot have an {:else} block outside an {#if ...} or {#each ...} block'\n    },\n    invalid_else_placement_unclosed_block: (block) => ({\n        code: 'invalid-else-placement',\n        message: `Expected to close ${block} before seeing {:else} block`\n    }),\n    invalid_element_content: (slug, name) => ({\n        code: `invalid-${slug}-content`,\n        message: `<${name}> cannot have children`\n    }),\n    invalid_element_placement: (slug, name) => ({\n        code: `invalid-${slug}-placement`,\n        message: `<${name}> tags cannot be inside elements or blocks`\n    }),\n    invalid_ref_directive: (name) => ({\n        code: 'invalid-ref-directive',\n        message: `The ref directive is no longer supported — use \\`bind:this={${name}}\\` instead`\n    }),\n    invalid_ref_selector: {\n        code: 'invalid-ref-selector',\n        message: 'ref selectors are no longer supported'\n    },\n    invalid_self_placement: {\n        code: 'invalid-self-placement',\n        message: '<svelte:self> components can only exist inside {#if} blocks, {#each} blocks, or slots passed to components'\n    },\n    invalid_script_instance: {\n        code: 'invalid-script',\n        message: 'A component can only have one instance-level <script> element'\n    },\n    invalid_script_module: {\n        code: 'invalid-script',\n        message: 'A component can only have one <script context=\"module\"> element'\n    },\n    invalid_script_context_attribute: {\n        code: 'invalid-script',\n        message: 'context attribute must be static'\n    },\n    invalid_script_context_value: {\n        code: 'invalid-script',\n        message: 'If the context attribute is supplied, its value must be \"module\"'\n    },\n    invalid_tag_name: {\n        code: 'invalid-tag-name',\n        message: 'Expected valid tag name'\n    },\n    invalid_tag_name_svelte_element: (tags, match) => ({\n        code: 'invalid-tag-name',\n        message: `Valid <svelte:...> tag names are ${list(tags)}${match ? ' (did you mean ' + match + '?)' : ''}`\n    }),\n    invalid_then_placement_unclosed_block: (block) => ({\n        code: 'invalid-then-placement',\n        message: `Expected to close ${block} before seeing {:then} block`\n    }),\n    invalid_then_placement_without_await: {\n        code: 'invalid-then-placement',\n        message: 'Cannot have an {:then} block outside an {#await ...} block'\n    },\n    invalid_void_content: (name) => ({\n        code: 'invalid-void-content',\n        message: `<${name}> is a void element and cannot have children, or a closing tag`\n    }),\n    missing_component_definition: {\n        code: 'missing-component-definition',\n        message: '<svelte:component> must have a \\'this\\' attribute'\n    },\n    missing_attribute_value: {\n        code: 'missing-attribute-value',\n        message: 'Expected value for the attribute'\n    },\n    unclosed_script: {\n        code: 'unclosed-script',\n        message: '<script> must have a closing tag'\n    },\n    unclosed_style: {\n        code: 'unclosed-style',\n        message: '<style> must have a closing tag'\n    },\n    unclosed_comment: {\n        code: 'unclosed-comment',\n        message: 'comment was left open, expected -->'\n    },\n    unclosed_attribute_value: (token) => ({\n        code: 'unclosed-attribute-value',\n        message: `Expected to close the attribute value with ${token}`\n    }),\n    unexpected_block_close: {\n        code: 'unexpected-block-close',\n        message: 'Unexpected block closing tag'\n    },\n    unexpected_eof: {\n        code: 'unexpected-eof',\n        message: 'Unexpected end of input'\n    },\n    unexpected_eof_token: (token) => ({\n        code: 'unexpected-eof',\n        message: `Unexpected ${token}`\n    }),\n    unexpected_token: (token) => ({\n        code: 'unexpected-token',\n        message: `Expected ${token}`\n    }),\n    unexpected_token_destructure: {\n        code: 'unexpected-token',\n        message: 'Expected identifier or destructure pattern'\n    }\n};\n\n// @ts-check\n/** @typedef { import('estree').BaseNode} BaseNode */\n\n/** @typedef {{\n\tskip: () => void;\n\tremove: () => void;\n\treplace: (node: BaseNode) => void;\n}} WalkerContext */\n\nclass WalkerBase {\n\tconstructor() {\n\t\t/** @type {boolean} */\n\t\tthis.should_skip = false;\n\n\t\t/** @type {boolean} */\n\t\tthis.should_remove = false;\n\n\t\t/** @type {BaseNode | null} */\n\t\tthis.replacement = null;\n\n\t\t/** @type {WalkerContext} */\n\t\tthis.context = {\n\t\t\tskip: () => (this.should_skip = true),\n\t\t\tremove: () => (this.should_remove = true),\n\t\t\treplace: (node) => (this.replacement = node)\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param {any} parent\n\t * @param {string} prop\n\t * @param {number} index\n\t * @param {BaseNode} node\n\t */\n\treplace(parent, prop, index, node) {\n\t\tif (parent) {\n\t\t\tif (index !== null) {\n\t\t\t\tparent[prop][index] = node;\n\t\t\t} else {\n\t\t\t\tparent[prop] = node;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {any} parent\n\t * @param {string} prop\n\t * @param {number} index\n\t */\n\tremove(parent, prop, index) {\n\t\tif (parent) {\n\t\t\tif (index !== null) {\n\t\t\t\tparent[prop].splice(index, 1);\n\t\t\t} else {\n\t\t\t\tdelete parent[prop];\n\t\t\t}\n\t\t}\n\t}\n}\n\n// @ts-check\n\n/** @typedef { import('estree').BaseNode} BaseNode */\n/** @typedef { import('./walker.js').WalkerContext} WalkerContext */\n\n/** @typedef {(\n *    this: WalkerContext,\n *    node: BaseNode,\n *    parent: BaseNode,\n *    key: string,\n *    index: number\n * ) => void} SyncHandler */\n\nclass SyncWalker extends WalkerBase {\n\t/**\n\t *\n\t * @param {SyncHandler} enter\n\t * @param {SyncHandler} leave\n\t */\n\tconstructor(enter, leave) {\n\t\tsuper();\n\n\t\t/** @type {SyncHandler} */\n\t\tthis.enter = enter;\n\n\t\t/** @type {SyncHandler} */\n\t\tthis.leave = leave;\n\t}\n\n\t/**\n\t *\n\t * @param {BaseNode} node\n\t * @param {BaseNode} parent\n\t * @param {string} [prop]\n\t * @param {number} [index]\n\t * @returns {BaseNode}\n\t */\n\tvisit(node, parent, prop, index) {\n\t\tif (node) {\n\t\t\tif (this.enter) {\n\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tthis.should_skip = false;\n\t\t\t\tthis.should_remove = false;\n\t\t\t\tthis.replacement = null;\n\n\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\tif (skipped) return node;\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\n\t\t\tfor (const key in node) {\n\t\t\t\tconst value = node[key];\n\n\t\t\t\tif (typeof value !== \"object\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t\tif (value[i] !== null && typeof value[i].type === 'string') {\n\t\t\t\t\t\t\tif (!this.visit(value[i], node, key, i)) {\n\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (value !== null && typeof value.type === \"string\") {\n\t\t\t\t\tthis.visit(value, node, key, null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.leave) {\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tthis.replacement = null;\n\t\t\t\tthis.should_remove = false;\n\n\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.replacement = _replacement;\n\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n// @ts-check\n\n/** @typedef { import('estree').BaseNode} BaseNode */\n/** @typedef { import('./sync.js').SyncHandler} SyncHandler */\n/** @typedef { import('./async.js').AsyncHandler} AsyncHandler */\n\n/**\n *\n * @param {BaseNode} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {BaseNode}\n */\nfunction walk(ast, { enter, leave }) {\n\tconst instance = new SyncWalker(enter, leave);\n\treturn instance.visit(ast, null);\n}\n\n// generate an ID that is, to all intents and purposes, unique\nconst id = (Math.round(Math.random() * 1e20)).toString(36);\nconst re = new RegExp(`_${id}_(?:(\\\\d+)|(AT)|(HASH))_(\\\\w+)?`, 'g');\n\n/** @typedef {import('estree').Comment} Comment */\n/** @typedef {import('estree').Node} Node */\n\n/**\n * @typedef {Node & {\n *   start: number;\n *   end: number;\n *   has_trailing_newline?: boolean\n * }} NodeWithLocation\n */\n\n/**\n * @typedef {Comment & {\n *   start: number;\n *   end: number;\n *   has_trailing_newline?: boolean\n * }} CommentWithLocation\n */\n\n/**\n * @param {CommentWithLocation[]} comments\n * @param {string} raw\n */\nconst get_comment_handlers = (comments, raw) => ({\n\n\t// pass to acorn options\n\t/**\n\t * @param {boolean} block\n\t * @param {string} value\n\t * @param {number} start\n\t * @param {number} end\n\t */\n\tonComment: (block, value, start, end) => {\n\t\tif (block && /\\n/.test(value)) {\n\t\t\tlet a = start;\n\t\t\twhile (a > 0 && raw[a - 1] !== '\\n') a -= 1;\n\n\t\t\tlet b = a;\n\t\t\twhile (/[ \\t]/.test(raw[b])) b += 1;\n\n\t\t\tconst indentation = raw.slice(a, b);\n\t\t\tvalue = value.replace(new RegExp(`^${indentation}`, 'gm'), '');\n\t\t}\n\n\t\tcomments.push({ type: block ? 'Block' : 'Line', value, start, end });\n\t},\n\n\t// pass to estree-walker options\n\t/** @param {NodeWithLocation} node */\n\tenter(node) {\n\t\tlet comment;\n\n\t\twhile (comments[0] && comments[0].start < node.start) {\n\t\t\tcomment = comments.shift();\n\n\t\t\tcomment.value = comment.value.replace(re, (match, id, at, hash, value) => {\n\t\t\t\tif (hash) return `#${value}`;\n\t\t\t\tif (at) return `@${value}`;\n\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\tconst next = comments[0] || node;\n\t\t\tcomment.has_trailing_newline = (\n\t\t\t\tcomment.type === 'Line' ||\n\t\t\t\t/\\n/.test(raw.slice(comment.end, next.start))\n\t\t\t);\n\n\t\t\t(node.leadingComments || (node.leadingComments = [])).push(comment);\n\t\t}\n\t},\n\n\t/** @param {NodeWithLocation} node */\n\tleave(node) {\n\t\tif (comments[0]) {\n\t\t\tconst slice = raw.slice(node.end, comments[0].start);\n\n\t\t\tif (/^[,) \\t]*$/.test(slice)) {\n\t\t\t\tnode.trailingComments = [comments.shift()];\n\t\t\t}\n\t\t}\n\t}\n});\n\n//@ts-check\n/** @typedef { import('estree').Node} Node */\n/** @typedef {Node | {\n *   type: 'PropertyDefinition';\n *   computed: boolean;\n *   value: Node\n * }} NodeWithPropertyDefinition */\n\n/**\n *\n * @param {NodeWithPropertyDefinition} node\n * @param {NodeWithPropertyDefinition} parent\n * @returns boolean\n */\nfunction is_reference (node, parent) {\n\tif (node.type === 'MemberExpression') {\n\t\treturn !node.computed && is_reference(node.object, node);\n\t}\n\n\tif (node.type === 'Identifier') {\n\t\tif (!parent) return true;\n\n\t\tswitch (parent.type) {\n\t\t\t// disregard `bar` in `foo.bar`\n\t\t\tcase 'MemberExpression': return parent.computed || node === parent.object;\n\n\t\t\t// disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n\t\t\tcase 'MethodDefinition': return parent.computed;\n\n\t\t\t// disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n\t\t\tcase 'PropertyDefinition': return parent.computed || node === parent.value;\n\n\t\t\t// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n\t\t\tcase 'Property': return parent.computed || node === parent.value;\n\n\t\t\t// disregard the `bar` in `export { foo as bar }` or\n\t\t\t// the foo in `import { foo as bar }`\n\t\t\tcase 'ExportSpecifier':\n\t\t\tcase 'ImportSpecifier': return node === parent.local;\n\n\t\t\t// disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\n\t\t\tcase 'LabeledStatement':\n\t\t\tcase 'BreakStatement':\n\t\t\tcase 'ContinueStatement': return false;\n\t\t\tdefault: return true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/** @param {import('estree').Node} expression */\nfunction analyze(expression) {\n\t/** @typedef {import('estree').Node} Node */\n\n\t/** @type {WeakMap<Node, Scope>} */\n\tconst map = new WeakMap();\n\n\t/** @type {Map<string, Node>} */\n\tconst globals = new Map();\n\n\tconst scope = new Scope$1(null, false);\n\n\t/** @type {[Scope, import('estree').Identifier][]} */\n\tconst references = [];\n\tlet current_scope = scope;\n\n\twalk(expression, {\n\t\t/**\n\t\t * @param {Node} node\n\t\t * @param {any} parent\n\t\t */\n\t\tenter(node, parent) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'Identifier':\n\t\t\t\t\tif (is_reference(node, parent)) {\n\t\t\t\t\t\treferences.push([current_scope, node]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ImportDeclaration':\n\t\t\t\t\tnode.specifiers.forEach((specifier) => {\n\t\t\t\t\t\tcurrent_scope.declarations.set(specifier.local.name, specifier);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'FunctionExpression':\n\t\t\t\tcase 'FunctionDeclaration':\n\t\t\t\tcase 'ArrowFunctionExpression':\n\t\t\t\t\tif (node.type === 'FunctionDeclaration') {\n\t\t\t\t\t\tif (node.id) {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(node.id.name, node);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmap.set(node, current_scope = new Scope$1(current_scope, false));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmap.set(node, current_scope = new Scope$1(current_scope, false));\n\n\t\t\t\t\t\tif (node.type === 'FunctionExpression' && node.id) {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(node.id.name, node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.params.forEach(param => {\n\t\t\t\t\t\textract_names(param).forEach(name => {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(name, node);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ForStatement':\n\t\t\t\tcase 'ForInStatement':\n\t\t\t\tcase 'ForOfStatement':\n\t\t\t\t\tmap.set(node, current_scope = new Scope$1(current_scope, true));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'BlockStatement':\n\t\t\t\t\tmap.set(node, current_scope = new Scope$1(current_scope, true));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ClassDeclaration':\n\t\t\t\tcase 'VariableDeclaration':\n\t\t\t\t\tcurrent_scope.add_declaration(node);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'CatchClause':\n\t\t\t\t\tmap.set(node, current_scope = new Scope$1(current_scope, true));\n\n\t\t\t\t\tif (node.param) {\n\t\t\t\t\t\textract_names(node.param).forEach(name => {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(name, node.param);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\t/** @param {Node} node */\n\t\tleave(node) {\n\t\t\tif (map.has(node)) {\n\t\t\t\tcurrent_scope = current_scope.parent;\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (let i = references.length - 1; i >= 0; --i) {\n\t\tconst [scope, reference] = references[i];\n\n\t\tif (!scope.references.has(reference.name)) {\n\t\t\tadd_reference(scope, reference.name);\n\t\t}\n\t\tif (!scope.find_owner(reference.name)) {\n\t\t\tglobals.set(reference.name, reference);\n\t\t}\n\t}\n\n\treturn { map, scope, globals };\n}\n\n/**\n *\n * @param {Scope} scope\n * @param {string} name\n */\nfunction add_reference(scope, name) {\n\tscope.references.add(name);\n\tif (scope.parent) add_reference(scope.parent, name);\n}\n\nclass Scope$1 {\n\tconstructor(parent, block) {\n\t\t/** @type {Scope | null} */\n\t\tthis.parent = parent;\n\n\t\t/** @type {boolean} */\n\t\tthis.block = block;\n\n\t\t/** @type {Map<string, import('estree').Node>} */\n\t\tthis.declarations = new Map();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.initialised_declarations = new Set();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.references = new Set();\n\t}\n\n\t/** @param {import('estree').VariableDeclaration | import('estree').ClassDeclaration} node */\n\tadd_declaration(node) {\n\t\tif (node.type === 'VariableDeclaration') {\n\t\t\tif (node.kind === 'var' && this.block && this.parent) {\n\t\t\t\tthis.parent.add_declaration(node);\n\t\t\t} else {\n\t\t\t\t/** @param {import('estree').VariableDeclarator} declarator */\n\t\t\t\tconst handle_declarator = (declarator) => {\n\t\t\t\t\textract_names(declarator.id).forEach(name => {\n\t\t\t\t\t\tthis.declarations.set(name, node);\n\t\t\t\t\t\tif (declarator.init) this.initialised_declarations.add(name);\n\t\t\t\t\t});\t\t\t\t};\n\n\t\t\t\tnode.declarations.forEach(handle_declarator);\n\t\t\t}\n\t\t} else if (node.id) {\n\t\t\tthis.declarations.set(node.id.name, node);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @returns {Scope | null}\n\t */\n\tfind_owner(name) {\n\t\tif (this.declarations.has(name)) return this;\n\t\treturn this.parent && this.parent.find_owner(name);\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\thas(name) {\n\t\treturn (\n\t\t\tthis.declarations.has(name) || (!!this.parent && this.parent.has(name))\n\t\t);\n\t}\n}\n\n/**\n * @param {import('estree').Node} param\n * @returns {string[]}\n */\nfunction extract_names(param) {\n\treturn extract_identifiers(param).map(node => node.name);\n}\n\n/**\n * @param {import('estree').Node} param\n * @param {import('estree').Identifier[]} nodes\n * @returns {import('estree').Identifier[]}\n */\nfunction extract_identifiers(param, nodes = []) {\n\tswitch (param.type) {\n\t\tcase 'Identifier':\n\t\t\tnodes.push(param);\n\t\t\tbreak;\n\n\t\tcase 'MemberExpression':\n\t\t\tlet object = param;\n\t\t\twhile (object.type === 'MemberExpression') {\n\t\t\t\tobject = /** @type {any} */ (object.object);\n\t\t\t}\n\t\t\tnodes.push(/** @type {any} */ (object));\n\t\t\tbreak;\n\n\t\tcase 'ObjectPattern':\n\t\t\t/** @param {import('estree').Property | import('estree').RestElement} prop */\n\t\t\tconst handle_prop = (prop) => {\n\t\t\t\tif (prop.type === 'RestElement') {\n\t\t\t\t\textract_identifiers(prop.argument, nodes);\n\t\t\t\t} else {\n\t\t\t\t\textract_identifiers(prop.value, nodes);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tparam.properties.forEach(handle_prop);\n\t\t\tbreak;\n\n\t\tcase 'ArrayPattern':\n\t\t\t/** @param {import('estree').Node} element */\n\t\t\tconst handle_element = (element) => {\n\t\t\t\tif (element) extract_identifiers(element, nodes);\n\t\t\t};\n\n\t\t\tparam.elements.forEach(handle_element);\n\t\t\tbreak;\n\n\t\tcase 'RestElement':\n\t\t\textract_identifiers(param.argument, nodes);\n\t\t\tbreak;\n\n\t\tcase 'AssignmentPattern':\n\t\t\textract_identifiers(param.left, nodes);\n\t\t\tbreak;\n\t}\n\n\treturn nodes;\n}\n\n/**\n * Does `array.push` for all `items`. Needed because `array.push(...items)` throws\n * \"Maximum call stack size exceeded\" when `items` is too big of an array.\n *\n * @param {any[]} array \n * @param {any[]} items \n */\nfunction push_array(array, items) {\n\tfor (let i = 0; i < items.length; i++) {\n\t\tarray.push(items[i]);\n\t}\n}\n\n// heavily based on https://github.com/davidbonnet/astring\n\n/** @typedef {import('estree').ArrowFunctionExpression} ArrowFunctionExpression */\n/** @typedef {import('estree').BinaryExpression} BinaryExpression */\n/** @typedef {import('estree').CallExpression} CallExpression */\n/** @typedef {import('estree').Comment} Comment */\n/** @typedef {import('estree').ExportSpecifier} ExportSpecifier */\n/** @typedef {import('estree').Expression} Expression */\n/** @typedef {import('estree').FunctionDeclaration} FunctionDeclaration */\n/** @typedef {import('estree').ImportDeclaration} ImportDeclaration */\n/** @typedef {import('estree').ImportSpecifier} ImportSpecifier */\n/** @typedef {import('estree').Literal} Literal */\n/** @typedef {import('estree').LogicalExpression} LogicalExpression */\n/** @typedef {import('estree').NewExpression} NewExpression */\n/** @typedef {import('estree').Node} Node */\n/** @typedef {import('estree').ObjectExpression} ObjectExpression */\n/** @typedef {import('estree').Pattern} Pattern */\n/** @typedef {import('estree').SequenceExpression} SequenceExpression */\n/** @typedef {import('estree').SimpleCallExpression} SimpleCallExpression */\n/** @typedef {import('estree').SwitchStatement} SwitchStatement */\n/** @typedef {import('estree').VariableDeclaration} VariableDeclaration */\n\n/**\n * @typedef {{\n *   content: string;\n *   loc?: {\n *     start: { line: number; column: number; };\n *     end: { line: number; column: number; };\n *   };\n *   has_newline: boolean;\n * }} Chunk\n */\n\n/**\n * @typedef {(node: any, state: State) => Chunk[]} Handler\n */\n\n/**\n * @typedef {{\n *   indent: string;\n *   scope: any; // TODO import from periscopic\n *   scope_map: WeakMap<Node, any>;\n *   getName: (name: string) => string;\n *   deconflicted: WeakMap<Node, Map<string, string>>;\n *   comments: Comment[];\n * }} State\n */\n\n/**\n * @param {Node} node\n * @param {State} state\n * @returns {Chunk[]}\n */\nfunction handle(node, state) {\n\tconst handler = handlers[node.type];\n\n\tif (!handler) {\n\t\tthrow new Error(`Not implemented ${node.type}`);\n\t}\n\n\tconst result = handler(node, state);\n\n\tif (node.leadingComments) {\n\t\tresult.unshift(c(node.leadingComments.map(comment => comment.type === 'Block'\n\t\t\t? `/*${comment.value}*/${/** @type {any} */ (comment).has_trailing_newline ? `\\n${state.indent}` : ` `}`\n\t\t\t: `//${comment.value}${/** @type {any} */ (comment).has_trailing_newline ? `\\n${state.indent}` : ` `}`).join(``)));\n\t}\n\n\tif (node.trailingComments) {\n\t\tstate.comments.push(node.trailingComments[0]); // there is only ever one\n\t}\n\n\treturn result;\n}\n\n/**\n * @param {string} content\n * @param {Node} [node]\n * @returns {Chunk}\n */\nfunction c(content, node) {\n\treturn {\n\t\tcontent,\n\t\tloc: node && node.loc,\n\t\thas_newline: /\\n/.test(content)\n\t};\n}\n\nconst OPERATOR_PRECEDENCE = {\n\t'||': 2,\n\t'&&': 3,\n\t'??': 4,\n\t'|': 5,\n\t'^': 6,\n\t'&': 7,\n\t'==': 8,\n\t'!=': 8,\n\t'===': 8,\n\t'!==': 8,\n\t'<': 9,\n\t'>': 9,\n\t'<=': 9,\n\t'>=': 9,\n\tin: 9,\n\tinstanceof: 9,\n\t'<<': 10,\n\t'>>': 10,\n\t'>>>': 10,\n\t'+': 11,\n\t'-': 11,\n\t'*': 12,\n\t'%': 12,\n\t'/': 12,\n\t'**': 13,\n};\n\n/** @type {Record<string, number>} */\nconst EXPRESSIONS_PRECEDENCE = {\n\tArrayExpression: 20,\n\tTaggedTemplateExpression: 20,\n\tThisExpression: 20,\n\tIdentifier: 20,\n\tLiteral: 18,\n\tTemplateLiteral: 20,\n\tSuper: 20,\n\tSequenceExpression: 20,\n\tMemberExpression: 19,\n\tCallExpression: 19,\n\tNewExpression: 19,\n\tAwaitExpression: 17,\n\tClassExpression: 17,\n\tFunctionExpression: 17,\n\tObjectExpression: 17,\n\tUpdateExpression: 16,\n\tUnaryExpression: 15,\n\tBinaryExpression: 14,\n\tLogicalExpression: 13,\n\tConditionalExpression: 4,\n\tArrowFunctionExpression: 3,\n\tAssignmentExpression: 3,\n\tYieldExpression: 2,\n\tRestElement: 1\n};\n\n/**\n *\n * @param {Expression} node\n * @param {BinaryExpression | LogicalExpression} parent\n * @param {boolean} is_right\n * @returns\n */\nfunction needs_parens(node, parent, is_right) {\n\t// special case where logical expressions and coalesce expressions cannot be mixed,\n\t// either of them need to be wrapped with parentheses\n\tif (\n\t\tnode.type === 'LogicalExpression' &&\n\t\tparent.type === 'LogicalExpression' &&\n\t\t((parent.operator === '??' && node.operator !== '??') ||\n\t\t\t(parent.operator !== '??' && node.operator === '??'))\n\t) {\n\t\treturn true;\n\t}\n\n\tconst precedence = EXPRESSIONS_PRECEDENCE[node.type];\n\tconst parent_precedence = EXPRESSIONS_PRECEDENCE[parent.type];\n\n\tif (precedence !== parent_precedence) {\n\t\t// Different node types\n\t\treturn (\n\t\t\t(!is_right &&\n\t\t\t\tprecedence === 15 &&\n\t\t\t\tparent_precedence === 14 &&\n\t\t\t\tparent.operator === '**') ||\n\t\t\tprecedence < parent_precedence\n\t\t);\n\t}\n\n\tif (precedence !== 13 && precedence !== 14) {\n\t\t// Not a `LogicalExpression` or `BinaryExpression`\n\t\treturn false;\n\t}\n\n\tif (/** @type {BinaryExpression} */ (node).operator === '**' && parent.operator === '**') {\n\t\t// Exponentiation operator has right-to-left associativity\n\t\treturn !is_right;\n\t}\n\n\tif (is_right) {\n\t\t// Parenthesis are used if both operators have the same precedence\n\t\treturn (\n\t\t\tOPERATOR_PRECEDENCE[/** @type {BinaryExpression} */ (node).operator] <=\n\t\t\tOPERATOR_PRECEDENCE[parent.operator]\n\t\t);\n\t}\n\n\treturn (\n\t\tOPERATOR_PRECEDENCE[/** @type {BinaryExpression} */ (node).operator] <\n\t\tOPERATOR_PRECEDENCE[parent.operator]\n\t);\n}\n\n/** @param {Node} node */\nfunction has_call_expression(node) {\n\twhile (node) {\n\t\tif (node.type[0] === 'CallExpression') {\n\t\t\treturn true;\n\t\t} else if (node.type === 'MemberExpression') {\n\t\t\tnode = node.object;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/** @param {Chunk[]} chunks */\nconst has_newline = (chunks) => {\n\tfor (let i = 0; i < chunks.length; i += 1) {\n\t\tif (chunks[i].has_newline) return true;\n\t}\n\treturn false;\n};\n\n/** @param {Chunk[]} chunks */\nconst get_length = (chunks) => {\n\tlet total = 0;\n\tfor (let i = 0; i < chunks.length; i += 1) {\n\t\ttotal += chunks[i].content.length;\n\t}\n\treturn total;\n};\n\n/**\n * @param {number} a\n * @param {number} b\n */\nconst sum = (a, b) => a + b;\n\n/**\n * @param {Chunk[][]} nodes\n * @param {Chunk} separator\n * @returns {Chunk[]}\n */\nconst join = (nodes, separator) => {\n\tif (nodes.length === 0) return [];\n\n\tconst joined = [...nodes[0]];\n\tfor (let i = 1; i < nodes.length; i += 1) {\n\t\tjoined.push(separator);\n\t\tpush_array(joined, nodes[i]);\n\t}\n\treturn joined;\n};\n\n/**\n * @param {(node: any, state: State) => Chunk[]} fn\n */\nconst scoped = (fn) => {\n\t/**\n\t * @param {any} node\n\t * @param {State} state\n\t */\n\tconst scoped_fn = (node, state) => {\n\t\treturn fn(node, {\n\t\t\t...state,\n\t\t\tscope: state.scope_map.get(node)\n\t\t});\n\t};\n\n\treturn scoped_fn;\n};\n\n/**\n * @param {string} name\n * @param {Set<string>} names\n */\nconst deconflict = (name, names) => {\n\tconst original = name;\n\tlet i = 1;\n\n\twhile (names.has(name)) {\n\t\tname = `${original}$${i++}`;\n\t}\n\n\treturn name;\n};\n\n/**\n * @param {Node[]} nodes\n * @param {State} state\n */\nconst handle_body = (nodes, state) => {\n\tconst chunks = [];\n\n\tconst body = nodes.map(statement => {\n\t\tconst chunks = handle(statement, {\n\t\t\t...state,\n\t\t\tindent: state.indent\n\t\t});\n\n\t\tlet add_newline = false;\n\n\t\twhile (state.comments.length) {\n\t\t\tconst comment = state.comments.shift();\n\t\t\tconst prefix = add_newline ? `\\n${state.indent}` : ` `;\n\n\t\t\tchunks.push(c(comment.type === 'Block'\n\t\t\t\t? `${prefix}/*${comment.value}*/`\n\t\t\t\t: `${prefix}//${comment.value}`));\n\n\t\t\tadd_newline = (comment.type === 'Line');\n\t\t}\n\n\t\treturn chunks;\n\t});\n\n\tlet needed_padding = false;\n\n\tfor (let i = 0; i < body.length; i += 1) {\n\t\tconst needs_padding = has_newline(body[i]);\n\n\t\tif (i > 0) {\n\t\t\tchunks.push(\n\t\t\t\tc(needs_padding || needed_padding ? `\\n\\n${state.indent}` : `\\n${state.indent}`)\n\t\t\t);\n\t\t}\n\n\t\tpush_array(chunks, body[i]);\n\n\t\tneeded_padding = needs_padding;\n\t}\n\n\treturn chunks;\n};\n\n/**\n * @param {VariableDeclaration} node\n * @param {State} state\n */\nconst handle_var_declaration = (node, state) => {\n\tconst chunks = [c(`${node.kind} `)];\n\n\tconst declarators = node.declarations.map(d => handle(d, {\n\t\t...state,\n\t\tindent: state.indent + (node.declarations.length === 1 ? '' : '\\t')\n\t}));\n\n\tconst multiple_lines = (\n\t\tdeclarators.some(has_newline) ||\n\t\t(declarators.map(get_length).reduce(sum, 0) + (state.indent.length + declarators.length - 1) * 2) > 80\n\t);\n\n\tconst separator = c(multiple_lines ? `,\\n${state.indent}\\t` : ', ');\n\n\tpush_array(chunks, join(declarators, separator));\n\n\treturn chunks;\n};\n\n/** @type {Record<string, Handler>} */\nconst handlers = {\n\tProgram(node, state) {\n\t\treturn handle_body(node.body, state);\n\t},\n\n\tBlockStatement: scoped((node, state) => {\n\t\treturn [\n\t\t\tc(`{\\n${state.indent}\\t`),\n\t\t\t...handle_body(node.body, { ...state, indent: state.indent + '\\t' }),\n\t\t\tc(`\\n${state.indent}}`)\n\t\t];\n\t}),\n\n\tEmptyStatement(node, state) {\n\t\treturn [c(';')];\n\t},\n\n\tParenthesizedExpression(node, state) {\n\t\treturn handle(node.expression, state);\n\t},\n\n\tExpressionStatement(node, state) {\n\t\tif (\n\t\t\tnode.expression.type === 'AssignmentExpression' &&\n\t\t\tnode.expression.left.type === 'ObjectPattern'\n\t\t) {\n\t\t\t// is an AssignmentExpression to an ObjectPattern\n\t\t\treturn [\n\t\t\t\tc('('),\n\t\t\t\t...handle(node.expression, state),\n\t\t\t\tc(');')\n\t\t\t];\n\t\t}\n\n\t\treturn [\n\t\t\t...handle(node.expression, state),\n\t\t\tc(';')\n\t\t];\n\t},\n\n\tIfStatement(node, state) {\n\t\tconst chunks = [\n\t\t\tc('if ('),\n\t\t\t...handle(node.test, state),\n\t\t\tc(') '),\n\t\t\t...handle(node.consequent, state)\n\t\t];\n\n\t\tif (node.alternate) {\n\t\t\tchunks.push(c(' else '));\n\t\t\tpush_array(chunks, handle(node.alternate, state));\n\t\t}\n\n\t\treturn chunks;\n\t},\n\n\tLabeledStatement(node, state) {\n\t\treturn [\n\t\t\t...handle(node.label, state),\n\t\t\tc(': '),\n\t\t\t...handle(node.body, state)\n\t\t];\n\t},\n\n\tBreakStatement(node, state) {\n\t\treturn node.label\n\t\t\t? [c('break '), ...handle(node.label, state), c(';')]\n\t\t\t: [c('break;')];\n\t},\n\n\tContinueStatement(node, state) {\n\t\treturn node.label\n\t\t\t? [c('continue '), ...handle(node.label, state), c(';')]\n\t\t\t: [c('continue;')];\n\t},\n\n\tWithStatement(node, state) {\n\t\treturn [\n\t\t\tc('with ('),\n\t\t\t...handle(node.object, state),\n\t\t\tc(') '),\n\t\t\t...handle(node.body, state)\n\t\t];\n\t},\n\n\tSwitchStatement(/** @type {SwitchStatement} */ node, state) {\n\t\tconst chunks = [\n\t\t\tc('switch ('),\n\t\t\t...handle(node.discriminant, state),\n\t\t\tc(') {')\n\t\t];\n\n\t\tnode.cases.forEach(block => {\n\t\t\tif (block.test) {\n\t\t\t\tchunks.push(c(`\\n${state.indent}\\tcase `));\n\t\t\t\tpush_array(chunks, handle(block.test, { ...state, indent: `${state.indent}\\t` }));\n\t\t\t\tchunks.push(c(':'));\n\t\t\t} else {\n\t\t\t\tchunks.push(c(`\\n${state.indent}\\tdefault:`));\n\t\t\t}\n\n\t\t\tblock.consequent.forEach(statement => {\n\t\t\t\tchunks.push(c(`\\n${state.indent}\\t\\t`));\n\t\t\t\tpush_array(chunks, handle(statement, { ...state, indent: `${state.indent}\\t\\t` }));\n\t\t\t});\n\t\t});\n\n\t\tchunks.push(c(`\\n${state.indent}}`));\n\n\t\treturn chunks;\n\t},\n\n\tReturnStatement(node, state) {\n\t\tif (node.argument) {\n\t\t\tconst contains_comment = node.argument.leadingComments && node.argument.leadingComments.some((/** @type import('../utils/comments.js').CommentWithLocation */ comment) => comment.has_trailing_newline);\n\t\t\treturn [\n\t\t\t\tc(contains_comment ? 'return (' : 'return '),\n\t\t\t\t...handle(node.argument, state),\n\t\t\t\tc(contains_comment ? ');' : ';')\n\t\t\t];\n\t\t} else {\n\t\t\treturn [c('return;')];\n\t\t}\n\t},\n\n\tThrowStatement(node, state) {\n\t\treturn [\n\t\t\tc('throw '),\n\t\t\t...handle(node.argument, state),\n\t\t\tc(';')\n\t\t];\n\t},\n\n\tTryStatement(node, state) {\n\t\tconst chunks = [\n\t\t\tc('try '),\n\t\t\t...handle(node.block, state)\n\t\t];\n\n\t\tif (node.handler) {\n\t\t\tif (node.handler.param) {\n\t\t\t\tchunks.push(c(' catch('));\n\t\t\t\tpush_array(chunks, handle(node.handler.param, state));\n\t\t\t\tchunks.push(c(') '));\n\t\t\t} else {\n\t\t\t\tchunks.push(c(' catch '));\n\t\t\t}\n\n\t\t\tpush_array(chunks, handle(node.handler.body, state));\n\t\t}\n\n\t\tif (node.finalizer) {\n\t\t\tchunks.push(c(' finally '));\n\t\t\tpush_array(chunks, handle(node.finalizer, state));\n\t\t}\n\n\t\treturn chunks;\n\t},\n\n\tWhileStatement(node, state) {\n\t\treturn [\n\t\t\tc('while ('),\n\t\t\t...handle(node.test, state),\n\t\t\tc(') '),\n\t\t\t...handle(node.body, state)\n\t\t];\n\t},\n\n\tDoWhileStatement(node, state) {\n\t\treturn [\n\t\t\tc('do '),\n\t\t\t...handle(node.body, state),\n\t\t\tc(' while ('),\n\t\t\t...handle(node.test, state),\n\t\t\tc(');')\n\t\t];\n\t},\n\n\tForStatement: scoped((node, state) => {\n\t\tconst chunks = [c('for (')];\n\n\t\tif (node.init) {\n\t\t\tif (node.init.type === 'VariableDeclaration') {\n\t\t\t\tpush_array(chunks, handle_var_declaration(node.init, state));\n\t\t\t} else {\n\t\t\t\tpush_array(chunks, handle(node.init, state));\n\t\t\t}\n\t\t}\n\n\t\tchunks.push(c('; '));\n\t\tif (node.test) push_array(chunks, handle(node.test, state));\n\t\tchunks.push(c('; '));\n\t\tif (node.update) push_array(chunks, handle(node.update, state));\n\n\t\tchunks.push(c(') '));\n\t\tpush_array(chunks, handle(node.body, state));\n\n\t\treturn chunks;\n\t}),\n\n\tForInStatement: scoped((node, state) => {\n\t\tconst chunks = [\n\t\t\tc(`for ${node.await ? 'await ' : ''}(`)\n\t\t];\n\n\t\tif (node.left.type === 'VariableDeclaration') {\n\t\t\tpush_array(chunks, handle_var_declaration(node.left, state));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.left, state));\n\t\t}\n\n\t\tchunks.push(c(node.type === 'ForInStatement' ? ` in ` : ` of `));\n\t\tpush_array(chunks, handle(node.right, state));\n\t\tchunks.push(c(') '));\n\t\tpush_array(chunks, handle(node.body, state));\n\n\t\treturn chunks;\n\t}),\n\n\tDebuggerStatement(node, state) {\n\t\treturn [c('debugger', node), c(';')];\n\t},\n\n\tFunctionDeclaration: scoped((/** @type {FunctionDeclaration} */ node, state) => {\n\t\tconst chunks = [];\n\n\t\tif (node.async) chunks.push(c('async '));\n\t\tchunks.push(c(node.generator ? 'function* ' : 'function '));\n\t\tif (node.id) push_array(chunks, handle(node.id, state));\n\t\tchunks.push(c('('));\n\n\t\tconst params = node.params.map(p => handle(p, {\n\t\t\t...state,\n\t\t\tindent: state.indent + '\\t'\n\t\t}));\n\n\t\tconst multiple_lines = (\n\t\t\tparams.some(has_newline) ||\n\t\t\t(params.map(get_length).reduce(sum, 0) + (state.indent.length + params.length - 1) * 2) > 80\n\t\t);\n\n\t\tconst separator = c(multiple_lines ? `,\\n${state.indent}` : ', ');\n\n\t\tif (multiple_lines) {\n\t\t\tchunks.push(c(`\\n${state.indent}\\t`));\n\t\t\tpush_array(chunks, join(params, separator));\n\t\t\tchunks.push(c(`\\n${state.indent}`));\n\t\t} else {\n\t\t\tpush_array(chunks, join(params, separator));\n\t\t}\n\n\t\tchunks.push(c(') '));\n\t\tpush_array(chunks, handle(node.body, state));\n\n\t\treturn chunks;\n\t}),\n\n\tVariableDeclaration(node, state) {\n\t\treturn handle_var_declaration(node, state).concat(c(';'));\n\t},\n\n\tVariableDeclarator(node, state) {\n\t\tif (node.init) {\n\t\t\treturn [\n\t\t\t\t...handle(node.id, state),\n\t\t\t\tc(' = '),\n\t\t\t\t...handle(node.init, state)\n\t\t\t];\n\t\t} else {\n\t\t\treturn handle(node.id, state);\n\t\t}\n\t},\n\n\tClassDeclaration(node, state) {\n\t\tconst chunks = [c('class ')];\n\n\t\tif (node.id) {\n\t\t\tpush_array(chunks, handle(node.id, state));\n\t\t\tchunks.push(c(' '));\n\t\t}\n\n\t\tif (node.superClass) {\n\t\t\tchunks.push(c('extends '));\n\t\t\tpush_array(chunks, handle(node.superClass, state));\n\t\t\tchunks.push(c(' '));\n\t\t}\n\n\t\tpush_array(chunks, handle(node.body, state));\n\n\t\treturn chunks;\n\t},\n\n\tImportDeclaration(/** @type {ImportDeclaration} */ node, state) {\n\t\tconst chunks = [c('import ')];\n\n\t\tconst { length } = node.specifiers;\n\t\tconst source = handle(node.source, state);\n\n\t\tif (length > 0) {\n\t\t\tlet i = 0;\n\n\t\t\twhile (i < length) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tchunks.push(c(', '));\n\t\t\t\t}\n\n\t\t\t\tconst specifier = node.specifiers[i];\n\n\t\t\t\tif (specifier.type === 'ImportDefaultSpecifier') {\n\t\t\t\t\tchunks.push(c(specifier.local.name, specifier));\n\t\t\t\t\ti += 1;\n\t\t\t\t} else if (specifier.type === 'ImportNamespaceSpecifier') {\n\t\t\t\t\tchunks.push(c('* as ' + specifier.local.name, specifier));\n\t\t\t\t\ti += 1;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i < length) {\n\t\t\t\t// we have named specifiers\n\t\t\t\tconst specifiers = node.specifiers.slice(i).map((/** @type {ImportSpecifier} */ specifier) => {\n\t\t\t\t\tconst name = handle(specifier.imported, state)[0];\n\t\t\t\t\tconst as = handle(specifier.local, state)[0];\n\n\t\t\t\t\tif (name.content === as.content) {\n\t\t\t\t\t\treturn [as];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [name, c(' as '), as];\n\t\t\t\t});\n\n\t\t\t\tconst width = get_length(chunks) + specifiers.map(get_length).reduce(sum, 0) + (2 * specifiers.length) + 6 + get_length(source);\n\n\t\t\t\tif (width > 80) {\n\t\t\t\t\tchunks.push(c(`{\\n\\t`));\n\t\t\t\t\tpush_array(chunks, join(specifiers, c(',\\n\\t')));\n\t\t\t\t\tchunks.push(c('\\n}'));\n\t\t\t\t} else {\n\t\t\t\t\tchunks.push(c(`{ `));\n\t\t\t\t\tpush_array(chunks, join(specifiers, c(', ')));\n\t\t\t\t\tchunks.push(c(' }'));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchunks.push(c(' from '));\n\t\t}\n\n\t\tpush_array(chunks, source);\n\t\tchunks.push(c(';'));\n\n\t\treturn chunks;\n\t},\n\n\tImportExpression(node, state) {\n\t\treturn [c('import('), ...handle(node.source, state), c(')')];\n\t},\n\n\tExportDefaultDeclaration(node, state) {\n\t\tconst chunks = [\n\t\t\tc(`export default `),\n\t\t\t...handle(node.declaration, state)\n\t\t];\n\n\t\tif (node.declaration.type !== 'FunctionDeclaration') {\n\t\t\tchunks.push(c(';'));\n\t\t}\n\n\t\treturn chunks;\n\t},\n\n\tExportNamedDeclaration(node, state) {\n\t\tconst chunks = [c('export ')];\n\n\t\tif (node.declaration) {\n\t\t\tpush_array(chunks, handle(node.declaration, state));\n\t\t} else {\n\t\t\tconst specifiers = node.specifiers.map((/** @type {ExportSpecifier} */ specifier) => {\n\t\t\t\tconst name = handle(specifier.local, state)[0];\n\t\t\t\tconst as = handle(specifier.exported, state)[0];\n\n\t\t\t\tif (name.content === as.content) {\n\t\t\t\t\treturn [name];\n\t\t\t\t}\n\n\t\t\t\treturn [name, c(' as '), as];\n\t\t\t});\n\n\t\t\tconst width = 7 + specifiers.map(get_length).reduce(sum, 0) + 2 * specifiers.length;\n\n\t\t\tif (width > 80) {\n\t\t\t\tchunks.push(c('{\\n\\t'));\n\t\t\t\tpush_array(chunks, join(specifiers, c(',\\n\\t')));\n\t\t\t\tchunks.push(c('\\n}'));\n\t\t\t} else {\n\t\t\t\tchunks.push(c('{ '));\n\t\t\t\tpush_array(chunks, join(specifiers, c(', ')));\n\t\t\t\tchunks.push(c(' }'));\n\t\t\t}\n\n\t\t\tif (node.source) {\n\t\t\t\tchunks.push(c(' from '));\n\t\t\t\tpush_array(chunks, handle(node.source, state));\n\t\t\t}\n\t\t}\n\n\t\tchunks.push(c(';'));\n\n\t\treturn chunks;\n\t},\n\n\tExportAllDeclaration(node, state) {\n\t\treturn [\n\t\t\tc(`export * from `),\n\t\t\t...handle(node.source, state),\n\t\t\tc(`;`)\n\t\t];\n\t},\n\n\tMethodDefinition(node, state) {\n\t\tconst chunks = [];\n\n\t\tif (node.static) {\n\t\t\tchunks.push(c('static '));\n\t\t}\n\n\t\tif (node.kind === 'get' || node.kind === 'set') {\n\t\t\t// Getter or setter\n\t\t\tchunks.push(c(node.kind + ' '));\n\t\t}\n\n\t\tif (node.value.async) {\n\t\t\tchunks.push(c('async '));\n\t\t}\n\n\t\tif (node.value.generator) {\n\t\t\tchunks.push(c('*'));\n\t\t}\n\n\t\tif (node.computed) {\n\t\t\tchunks.push(c('['));\n\t\t\tpush_array(chunks, handle(node.key, state));\n\t\t\tchunks.push(c(']'));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.key, state));\n\t\t}\n\n\t\tchunks.push(c('('));\n\n\t\tconst { params } = node.value;\n\t\tfor (let i = 0; i < params.length; i += 1) {\n\t\t\tpush_array(chunks, handle(params[i], state));\n\t\t\tif (i < params.length - 1) chunks.push(c(', '));\n\t\t}\n\n\t\tchunks.push(c(') '));\n\t\tpush_array(chunks, handle(node.value.body, state));\n\n\t\treturn chunks;\n\t},\n\n\tArrowFunctionExpression: scoped((/** @type {ArrowFunctionExpression} */ node, state) => {\n\t\tconst chunks = [];\n\n\t\tif (node.async) chunks.push(c('async '));\n\n\t\tif (node.params.length === 1 && node.params[0].type === 'Identifier') {\n\t\t\tpush_array(chunks, handle(node.params[0], state));\n\t\t} else {\n\t\t\tconst params = node.params.map(param => handle(param, {\n\t\t\t\t...state,\n\t\t\t\tindent: state.indent + '\\t'\n\t\t\t}));\n\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, join(params, c(', ')));\n\t\t\tchunks.push(c(')'));\n\t\t}\n\n\t\tchunks.push(c(' => '));\n\n\t\tif (\n\t\t\tnode.body.type === 'ObjectExpression' ||\n\t\t\t(node.body.type === 'AssignmentExpression' && node.body.left.type === 'ObjectPattern')\n\t\t) {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, handle(node.body, state));\n\t\t\tchunks.push(c(')'));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.body, state));\n\t\t}\n\n\t\treturn chunks;\n\t}),\n\n\tThisExpression(node, state) {\n\t\treturn [c('this', node)];\n\t},\n\n\tSuper(node, state) {\n\t\treturn [c('super', node)];\n\t},\n\n\tRestElement(node, state) {\n\t\treturn [c('...'), ...handle(node.argument, state)];\n\t},\n\n\tYieldExpression(node, state) {\n\t\tif (node.argument) {\n\t\t\treturn [c(node.delegate ? `yield* ` : `yield `), ...handle(node.argument, state)];\n\t\t}\n\n\t\treturn [c(node.delegate ? `yield*` : `yield`)];\n\t},\n\n\tAwaitExpression(node, state) {\n\t\tif (node.argument) {\n\t\t\tconst precedence = EXPRESSIONS_PRECEDENCE[node.argument.type];\n\n\t\t\tif (precedence && (precedence < EXPRESSIONS_PRECEDENCE.AwaitExpression)) {\n\t\t\t\treturn [c('await ('), ...handle(node.argument, state), c(')')];\n\t\t\t} else {\n\t\t\t\treturn [c('await '), ...handle(node.argument, state)];\n\t\t\t}\n\t\t}\n\n\t\treturn [c('await')];\n\t},\n\n\tTemplateLiteral(node, state) {\n\t\tconst chunks = [c('`')];\n\n\t\tconst { quasis, expressions } = node;\n\n\t\tfor (let i = 0; i < expressions.length; i++) {\n\t\t\tchunks.push(\n\t\t\t\tc(quasis[i].value.raw),\n\t\t\t\tc('${')\n\t\t\t);\n\t\t\tpush_array(chunks, handle(expressions[i], state));\n\t\t\tchunks.push(c('}'));\n\t\t}\n\n\t\tchunks.push(\n\t\t\tc(quasis[quasis.length - 1].value.raw),\n\t\t\tc('`')\n\t\t);\n\n\t\treturn chunks;\n\t},\n\n\tTaggedTemplateExpression(node, state) {\n\t\treturn handle(node.tag, state).concat(handle(node.quasi, state));\n\t},\n\n\tArrayExpression(node, state) {\n\t\tconst chunks = [c('[')];\n\n\t\t/** @type {Chunk[][]} */\n\t\tconst elements = [];\n\n\t\t/** @type {Chunk[]} */\n\t\tlet sparse_commas = [];\n\n\t\tfor (let i = 0; i < node.elements.length; i += 1) {\n\t\t\t// can't use map/forEach because of sparse arrays\n\t\t\tconst element = node.elements[i];\n\t\t\tif (element) {\n\t\t\t\telements.push([...sparse_commas, ...handle(element, {\n\t\t\t\t\t...state,\n\t\t\t\t\tindent: state.indent + '\\t'\n\t\t\t\t})]);\n\t\t\t\tsparse_commas = [];\n\t\t\t} else {\n\t\t\t\tsparse_commas.push(c(','));\n\t\t\t}\n\t\t}\n\n\t\tconst multiple_lines = (\n\t\t\telements.some(has_newline) ||\n\t\t\t(elements.map(get_length).reduce(sum, 0) + (state.indent.length + elements.length - 1) * 2) > 80\n\t\t);\n\n\t\tif (multiple_lines) {\n\t\t\tchunks.push(c(`\\n${state.indent}\\t`));\n\t\t\tpush_array(chunks, join(elements, c(`,\\n${state.indent}\\t`)));\n\t\t\tchunks.push(c(`\\n${state.indent}`));\n\t\t\tpush_array(chunks, sparse_commas);\n\t\t} else {\n\t\t\tpush_array(chunks, join(elements, c(', ')));\n\t\t\tpush_array(chunks, sparse_commas);\n\t\t}\n\n\t\tchunks.push(c(']'));\n\n\t\treturn chunks;\n\t},\n\n\tObjectExpression(/** @type {ObjectExpression} */ node, state) {\n\t\tif (node.properties.length === 0) {\n\t\t\treturn [c('{}')];\n\t\t}\n\n\t\tlet has_inline_comment = false;\n\n\t\t/** @type {Chunk[]} */\n\t\tconst chunks = [];\n\t\tconst separator = c(', ');\n\n\t\tnode.properties.forEach((p, i) => {\n\t\t\tpush_array(chunks, handle(p, {\n\t\t\t\t...state,\n\t\t\t\tindent: state.indent + '\\t'\n\t\t\t}));\n\n\t\t\tif (state.comments.length) {\n\t\t\t\t// TODO generalise this, so it works with ArrayExpressions and other things.\n\t\t\t\t// At present, stuff will just get appended to the closest statement/declaration\n\t\t\t\tchunks.push(c(', '));\n\n\t\t\t\twhile (state.comments.length) {\n\t\t\t\t\tconst comment = state.comments.shift();\n\n\t\t\t\t\tchunks.push(c(comment.type === 'Block'\n\t\t\t\t\t\t? `/*${comment.value}*/\\n${state.indent}\\t`\n\t\t\t\t\t\t: `//${comment.value}\\n${state.indent}\\t`));\n\n\t\t\t\t\tif (comment.type === 'Line') {\n\t\t\t\t\t\thas_inline_comment = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (i < node.properties.length - 1) {\n\t\t\t\t\tchunks.push(separator);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst multiple_lines = (\n\t\t\thas_inline_comment ||\n\t\t\thas_newline(chunks) ||\n\t\t\tget_length(chunks) > 40\n\t\t);\n\n\t\tif (multiple_lines) {\n\t\t\tseparator.content = `,\\n${state.indent}\\t`;\n\t\t}\n\n\t\treturn [\n\t\t\tc(multiple_lines ? `{\\n${state.indent}\\t` : `{ `),\n\t\t\t...chunks,\n\t\t\tc(multiple_lines ? `\\n${state.indent}}` : ` }`)\n\t\t];\n\t},\n\n\tProperty(node, state) {\n\t\tconst value = handle(node.value, state);\n\n\t\tif (node.key === node.value) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// special case\n\t\tif (\n\t\t\t!node.computed &&\n\t\t\tnode.value.type === 'AssignmentPattern' &&\n\t\t\tnode.value.left.type === 'Identifier' &&\n\t\t\tnode.value.left.name === node.key.name\n\t\t) {\n\t\t\treturn value;\n\t\t}\n\n\t\tif (!node.computed && node.value.type === 'Identifier' && (\n\t\t\t(node.key.type === 'Identifier' && node.key.name === value[0].content) ||\n\t\t\t(node.key.type === 'Literal' && node.key.value === value[0].content)\n\t\t)) {\n\t\t\treturn value;\n\t\t}\n\n\t\tconst key = handle(node.key, state);\n\n\t\tif (node.value.type === 'FunctionExpression' && !node.value.id) {\n\t\t\tstate = {\n\t\t\t\t...state,\n\t\t\t\tscope: state.scope_map.get(node.value)\n\t\t\t};\n\n\t\t\tconst chunks = node.kind !== 'init'\n\t\t\t\t? [c(`${node.kind} `)]\n\t\t\t\t: [];\n\n\t\t\tif (node.value.async) {\n\t\t\t\tchunks.push(c('async '));\n\t\t\t}\n\t\t\tif (node.value.generator) {\n\t\t\t\tchunks.push(c('*'));\n\t\t\t}\n\n\t\t\tpush_array(chunks, node.computed ? [c('['), ...key, c(']')] : key);\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, join(node.value.params.map((/** @type {Pattern} */ param) => handle(param, state)), c(', ')));\n\t\t\tchunks.push(c(') '));\n\t\t\tpush_array(chunks, handle(node.value.body, state));\n\n\t\t\treturn chunks;\n\t\t}\n\n\t\tif (node.computed) {\n\t\t\treturn [\n\t\t\t\tc('['),\n\t\t\t\t...key,\n\t\t\t\tc(']: '),\n\t\t\t\t...value\n\t\t\t];\n\t\t}\n\n\t\treturn [\n\t\t\t...key,\n\t\t\tc(': '),\n\t\t\t...value\n\t\t];\n\t},\n\n\tObjectPattern(node, state) {\n\t\tconst chunks = [c('{ ')];\n\n\t\tfor (let i = 0; i < node.properties.length; i += 1) {\n\t\t\tpush_array(chunks, handle(node.properties[i], state));\n\t\t\tif (i < node.properties.length - 1) chunks.push(c(', '));\n\t\t}\n\n\t\tchunks.push(c(' }'));\n\n\t\treturn chunks;\n\t},\n\n\tSequenceExpression(/** @type {SequenceExpression} */ node, state) {\n\t\tconst expressions = node.expressions.map(e => handle(e, state));\n\n\t\treturn [\n\t\t\tc('('),\n\t\t\t...join(expressions, c(', ')),\n\t\t\tc(')')\n\t\t];\n\t},\n\n\tUnaryExpression(node, state) {\n\t\tconst chunks = [c(node.operator)];\n\n\t\tif (node.operator.length > 1) {\n\t\t\tchunks.push(c(' '));\n\t\t}\n\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.argument.type] <\n\t\t\tEXPRESSIONS_PRECEDENCE.UnaryExpression\n\t\t) {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, handle(node.argument, state));\n\t\t\tchunks.push(c(')'));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.argument, state));\n\t\t}\n\n\t\treturn chunks;\n\t},\n\n\tUpdateExpression(node, state) {\n\t\treturn node.prefix\n\t\t\t? [c(node.operator), ...handle(node.argument, state)]\n\t\t\t: [...handle(node.argument, state), c(node.operator)];\n\t},\n\n\tAssignmentExpression(node, state) {\n\t\treturn [\n\t\t\t...handle(node.left, state),\n\t\t\tc(` ${node.operator || '='} `),\n\t\t\t...handle(node.right, state)\n\t\t];\n\t},\n\n\tBinaryExpression(node, state) {\n\t\t/**\n\t\t * @type any[]\n\t\t */\n\t\tconst chunks = [];\n\n\t\t// TODO\n\t\t// const is_in = node.operator === 'in';\n\t\t// if (is_in) {\n\t\t// \t// Avoids confusion in `for` loops initializers\n\t\t// \tchunks.push(c('('));\n\t\t// }\n\n\t\tif (needs_parens(node.left, node, false)) {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, handle(node.left, state));\n\t\t\tchunks.push(c(')'));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.left, state));\n\t\t}\n\n\t\tchunks.push(c(` ${node.operator} `));\n\n\t\tif (needs_parens(node.right, node, true)) {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, handle(node.right, state));\n\t\t\tchunks.push(c(')'));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.right, state));\n\t\t}\n\n\t\treturn chunks;\n\t},\n\n\tConditionalExpression(node, state) {\n\t\t/**\n\t\t * @type any[]\n\t\t */\n\t\tconst chunks = [];\n\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.test.type] >\n\t\t\tEXPRESSIONS_PRECEDENCE.ConditionalExpression\n\t\t) {\n\t\t\tpush_array(chunks, handle(node.test, state));\n\t\t} else {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, handle(node.test, state));\n\t\t\tchunks.push(c(')'));\n\t\t}\n\n\t\tconst child_state = { ...state, indent: state.indent + '\\t' };\n\n\t\tconst consequent = handle(node.consequent, child_state);\n\t\tconst alternate = handle(node.alternate, child_state);\n\n\t\tconst multiple_lines = (\n\t\t\thas_newline(consequent) || has_newline(alternate) ||\n\t\t\tget_length(chunks) + get_length(consequent) + get_length(alternate) > 50\n\t\t);\n\n\t\tif (multiple_lines) {\n\t\t\tchunks.push(c(`\\n${state.indent}? `));\n\t\t\tpush_array(chunks, consequent);\n\t\t\tchunks.push(c(`\\n${state.indent}: `));\n\t\t\tpush_array(chunks, alternate);\n\t\t} else {\n\t\t\tchunks.push(c(` ? `));\n\t\t\tpush_array(chunks, consequent);\n\t\t\tchunks.push(c(` : `));\n\t\t\tpush_array(chunks, alternate);\n\t\t}\n\n\t\treturn chunks;\n\t},\n\n\tNewExpression(/** @type {NewExpression} */ node, state) {\n\t\tconst chunks = [c('new ')];\n\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.callee.type] <\n\t\t\tEXPRESSIONS_PRECEDENCE.CallExpression || has_call_expression(node.callee)\n\t\t) {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, handle(node.callee, state));\n\t\t\tchunks.push(c(')'));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.callee, state));\n\t\t}\n\n\t\t// TODO this is copied from CallExpression — DRY it out\n\t\tconst args = node.arguments.map(arg => handle(arg, {\n\t\t\t...state,\n\t\t\tindent: state.indent + '\\t'\n\t\t}));\n\n\t\tconst separator = args.some(has_newline) // TODO or length exceeds 80\n\t\t\t? c(',\\n' + state.indent)\n\t\t\t: c(', ');\n\n\t\tchunks.push(c('('));\n\t\tpush_array(chunks, join(args, separator));\n\t\tchunks.push(c(')'));\n\n\t\treturn chunks;\n\t},\n\n\tChainExpression(node, state) {\n\t\treturn handle(node.expression, state);\n\t},\n\n\tCallExpression(/** @type {CallExpression} */ node, state) {\n\t\t/**\n\t\t * @type any[]\n\t\t */\n\t\tconst chunks = [];\n\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.callee.type] <\n\t\t\tEXPRESSIONS_PRECEDENCE.CallExpression\n\t\t) {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, handle(node.callee, state));\n\t\t\tchunks.push(c(')'));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.callee, state));\n\t\t}\n\n\t\tif (/** @type {SimpleCallExpression} */ (node).optional) {\n\t\t\tchunks.push(c('?.'));\n\t\t}\n\n\t\tconst args = node.arguments.map(arg => handle(arg, state));\n\n\t\tconst multiple_lines = args.slice(0, -1).some(has_newline); // TODO or length exceeds 80\n\n\t\tif (multiple_lines) {\n\t\t\t// need to handle args again. TODO find alternative approach?\n\t\t\tconst args = node.arguments.map(arg => handle(arg, {\n\t\t\t\t...state,\n\t\t\t\tindent: `${state.indent}\\t`\n\t\t\t}));\n\n\t\t\tchunks.push(c(`(\\n${state.indent}\\t`));\n\t\t\tpush_array(chunks, join(args, c(`,\\n${state.indent}\\t`)));\n\t\t\tchunks.push(c(`\\n${state.indent})`));\n\t\t} else {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, join(args, c(', ')));\n\t\t\tchunks.push(c(')'));\n\t\t}\n\n\t\treturn chunks;\n\t},\n\n\tMemberExpression(node, state) {\n\t\t/**\n\t\t * @type any[]\n\t\t */\n\t\tconst chunks = [];\n\n\t\tif (EXPRESSIONS_PRECEDENCE[node.object.type] < EXPRESSIONS_PRECEDENCE.MemberExpression) {\n\t\t\tchunks.push(c('('));\n\t\t\tpush_array(chunks, handle(node.object, state));\n\t\t\tchunks.push(c(')'));\n\t\t} else {\n\t\t\tpush_array(chunks, handle(node.object, state));\n\t\t}\n\n\t\tif (node.computed) {\n\t\t\tif (node.optional) {\n\t\t\t\tchunks.push(c('?.'));\n\t\t\t}\n\t\t\tchunks.push(c('['));\n\t\t\tpush_array(chunks, handle(node.property, state));\n\t\t\tchunks.push(c(']'));\n\t\t} else {\n\t\t\tchunks.push(c(node.optional ? '?.' : '.'));\n\t\t\tpush_array(chunks, handle(node.property, state));\n\t\t}\n\n\t\treturn chunks;\n\t},\n\n\tMetaProperty(node, state) {\n\t\treturn [...handle(node.meta, state), c('.'), ...handle(node.property, state)];\n\t},\n\n\tIdentifier(node, state) {\n\t\tlet name = node.name;\n\n\t\tif (name[0] === '@') {\n\t\t\tname = state.getName(name.slice(1));\n\t\t} else if (node.name[0] === '#') {\n\t\t\tconst owner = state.scope.find_owner(node.name);\n\n\t\t\tif (!owner) {\n\t\t\t\tthrow new Error(`Could not find owner for node`);\n\t\t\t}\n\n\t\t\tif (!state.deconflicted.has(owner)) {\n\t\t\t\tstate.deconflicted.set(owner, new Map());\n\t\t\t}\n\n\t\t\tconst deconflict_map = state.deconflicted.get(owner);\n\n\t\t\tif (!deconflict_map.has(node.name)) {\n\t\t\t\tdeconflict_map.set(node.name, deconflict(node.name.slice(1), owner.references));\n\t\t\t}\n\n\t\t\tname = deconflict_map.get(node.name);\n\t\t}\n\n\t\treturn [c(name, node)];\n\t},\n\n\tLiteral(/** @type {Literal} */ node, state) {\n\t\tif (typeof node.value === 'string') {\n\t\t\treturn [\n\t\t\t\t// TODO do we need to handle weird unicode characters somehow?\n\t\t\t\t// str.replace(/\\\\u(\\d{4})/g, (m, n) => String.fromCharCode(+n))\n\t\t\t\tc((node.raw || JSON.stringify(node.value)).replace(re, (_m, _i, at, hash, name) => {\n\t\t\t\t\tif (at)\treturn '@' + name;\n\t\t\t\t\tif (hash) return '#' + name;\n\t\t\t\t\tthrow new Error(`this shouldn't happen`);\n\t\t\t\t}), node)\n\t\t\t];\n\t\t}\n\n\t\treturn [c(node.raw || String(node.value), node)];\n\t}\n};\n\nhandlers.ForOfStatement = handlers.ForInStatement;\nhandlers.FunctionExpression = handlers.FunctionDeclaration;\nhandlers.ClassExpression = handlers.ClassDeclaration;\nhandlers.ClassBody = handlers.BlockStatement;\nhandlers.SpreadElement = handlers.RestElement;\nhandlers.ArrayPattern = handlers.ArrayExpression;\nhandlers.LogicalExpression = handlers.BinaryExpression;\nhandlers.AssignmentPattern = handlers.AssignmentExpression;\n\nvar charToInteger = {};\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nfor (var i = 0; i < chars.length; i++) {\n    charToInteger[chars.charCodeAt(i)] = i;\n}\nfunction decode(mappings) {\n    var decoded = [];\n    var line = [];\n    var segment = [\n        0,\n        0,\n        0,\n        0,\n        0,\n    ];\n    var j = 0;\n    for (var i = 0, shift = 0, value = 0; i < mappings.length; i++) {\n        var c = mappings.charCodeAt(i);\n        if (c === 44) { // \",\"\n            segmentify(line, segment, j);\n            j = 0;\n        }\n        else if (c === 59) { // \";\"\n            segmentify(line, segment, j);\n            j = 0;\n            decoded.push(line);\n            line = [];\n            segment[0] = 0;\n        }\n        else {\n            var integer = charToInteger[c];\n            if (integer === undefined) {\n                throw new Error('Invalid character (' + String.fromCharCode(c) + ')');\n            }\n            var hasContinuationBit = integer & 32;\n            integer &= 31;\n            value += integer << shift;\n            if (hasContinuationBit) {\n                shift += 5;\n            }\n            else {\n                var shouldNegate = value & 1;\n                value >>>= 1;\n                if (shouldNegate) {\n                    value = value === 0 ? -0x80000000 : -value;\n                }\n                segment[j] += value;\n                j++;\n                value = shift = 0; // reset\n            }\n        }\n    }\n    segmentify(line, segment, j);\n    decoded.push(line);\n    return decoded;\n}\nfunction segmentify(line, segment, j) {\n    // This looks ugly, but we're creating specialized arrays with a specific\n    // length. This is much faster than creating a new array (which v8 expands to\n    // a capacity of 17 after pushing the first item), or slicing out a subarray\n    // (which is slow). Length 4 is assumed to be the most frequent, followed by\n    // length 5 (since not everything will have an associated name), followed by\n    // length 1 (it's probably rare for a source substring to not have an\n    // associated segment data).\n    if (j === 4)\n        line.push([segment[0], segment[1], segment[2], segment[3]]);\n    else if (j === 5)\n        line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);\n    else if (j === 1)\n        line.push([segment[0]]);\n}\nfunction encode(decoded) {\n    var sourceFileIndex = 0; // second field\n    var sourceCodeLine = 0; // third field\n    var sourceCodeColumn = 0; // fourth field\n    var nameIndex = 0; // fifth field\n    var mappings = '';\n    for (var i = 0; i < decoded.length; i++) {\n        var line = decoded[i];\n        if (i > 0)\n            mappings += ';';\n        if (line.length === 0)\n            continue;\n        var generatedCodeColumn = 0; // first field\n        var lineMappings = [];\n        for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {\n            var segment = line_1[_i];\n            var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);\n            generatedCodeColumn = segment[0];\n            if (segment.length > 1) {\n                segmentMappings +=\n                    encodeInteger(segment[1] - sourceFileIndex) +\n                        encodeInteger(segment[2] - sourceCodeLine) +\n                        encodeInteger(segment[3] - sourceCodeColumn);\n                sourceFileIndex = segment[1];\n                sourceCodeLine = segment[2];\n                sourceCodeColumn = segment[3];\n            }\n            if (segment.length === 5) {\n                segmentMappings += encodeInteger(segment[4] - nameIndex);\n                nameIndex = segment[4];\n            }\n            lineMappings.push(segmentMappings);\n        }\n        mappings += lineMappings.join(',');\n    }\n    return mappings;\n}\nfunction encodeInteger(num) {\n    var result = '';\n    num = num < 0 ? (-num << 1) | 1 : num << 1;\n    do {\n        var clamped = num & 31;\n        num >>>= 5;\n        if (num > 0) {\n            clamped |= 32;\n        }\n        result += chars[clamped];\n    } while (num > 0);\n    return result;\n}\n\n/** @type {(str?: string) => string} str */\nlet btoa$1 = () => {\n\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n};\n\nif (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n\tbtoa$1 = (str) => window.btoa(unescape(encodeURIComponent(str)));\n} else if (typeof Buffer === 'function') {\n\tbtoa$1 = (str) => Buffer.from(str, 'utf-8').toString('base64');\n}\n\n/** @typedef {import('estree').Node} Node */\n\n/**\n * @typedef {{\n *   file?: string;\n *   sourceMapSource?: string;\n *   sourceMapContent?: string;\n *   sourceMapEncodeMappings?: boolean; // default true\n *   getName?: (name: string) => string;\n * }} PrintOptions\n */\n\n/**\n * @param {Node} node\n * @param {PrintOptions} opts\n * @returns {{ code: string, map: any }} // TODO\n */\nfunction print(node, opts = {}) {\n\tif (Array.isArray(node)) {\n\t\treturn print({\n\t\t\ttype: 'Program',\n\t\t\tbody: node,\n\t\t\tsourceType: 'module'\n\t\t}, opts);\n\t}\n\n\tconst {\n\t\tgetName = /** @param {string} x */ (x) => {\n\t\t\tthrow new Error(`Unhandled sigil @${x}`);\n\t\t}\n\t} = opts;\n\n\tlet { map: scope_map, scope } = analyze(node);\n\tconst deconflicted = new WeakMap();\n\n\tconst chunks = handle(node, {\n\t\tindent: '',\n\t\tgetName,\n\t\tscope,\n\t\tscope_map,\n\t\tdeconflicted,\n\t\tcomments: []\n\t});\n\n\t/** @typedef {[number, number, number, number]} Segment */\n\n\tlet code = '';\n\tlet current_column = 0;\n\n\t/** @type {Segment[][]} */\n\tlet mappings = [];\n\n\t/** @type {Segment[]} */\n\tlet current_line = [];\n\n\tfor (let i = 0; i < chunks.length; i += 1) {\n\t\tconst chunk = chunks[i];\n\n\t\tcode += chunk.content;\n\n\t\tif (chunk.loc) {\n\t\t\tcurrent_line.push([\n\t\t\t\tcurrent_column,\n\t\t\t\t0, // source index is always zero\n\t\t\t\tchunk.loc.start.line - 1,\n\t\t\t\tchunk.loc.start.column,\n\t\t\t]);\n\t\t}\n\n\t\tfor (let i = 0; i < chunk.content.length; i += 1) {\n\t\t\tif (chunk.content[i] === '\\n') {\n\t\t\t\tmappings.push(current_line);\n\t\t\t\tcurrent_line = [];\n\t\t\t\tcurrent_column = 0;\n\t\t\t} else {\n\t\t\t\tcurrent_column += 1;\n\t\t\t}\n\t\t}\n\n\t\tif (chunk.loc) {\n\t\t\tcurrent_line.push([\n\t\t\t\tcurrent_column,\n\t\t\t\t0, // source index is always zero\n\t\t\t\tchunk.loc.end.line - 1,\n\t\t\t\tchunk.loc.end.column,\n\t\t\t]);\n\t\t}\n\t}\n\n\tmappings.push(current_line);\n\n\tconst map = {\n\t\tversion: 3,\n\t\t/** @type {string[]} */\n\t\tnames: [],\n\t\tsources: [opts.sourceMapSource || null],\n\t\tsourcesContent: [opts.sourceMapContent || null],\n\t\tmappings: opts.sourceMapEncodeMappings == undefined || opts.sourceMapEncodeMappings\n\t\t\t? encode(mappings) : mappings\n\t};\n\n\tObject.defineProperties(map, {\n\t\ttoString: {\n\t\t\tenumerable: false,\n\t\t\tvalue: function toString() {\n\t\t\t\treturn JSON.stringify(this);\n\t\t\t}\n\t\t},\n\t\ttoUrl: {\n\t\t\tenumerable: false,\n\t\t\tvalue: function toUrl() {\n\t\t\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa$1(this.toString());\n\t\t\t}\n\t\t}\n\t});\n\n\treturn {\n\t\tcode,\n\t\tmap\n\t};\n}\n\n/** @typedef {import('estree').Expression} Expression */\n/** @typedef {import('estree').Node} Node */\n/** @typedef {import('estree').ObjectExpression} ObjectExpression */\n/** @typedef {import('estree').Property} Property */\n/** @typedef {import('estree').SpreadElement} SpreadElement */\n\n/** @typedef {import('./utils/comments').CommentWithLocation} CommentWithLocation */\n\n/** @type {Record<string, string>} */\nconst sigils = {\n\t'@': 'AT',\n\t'#': 'HASH'\n};\n\n/** @param {TemplateStringsArray} strings */\nconst join$1 = (strings) => {\n\tlet str = strings[0];\n\tfor (let i = 1; i < strings.length; i += 1) {\n\t\tstr += `_${id}_${i - 1}_${strings[i]}`;\n\t}\n\treturn str.replace(\n\t\t/([@#])(\\w+)/g,\n\t\t(_m, sigil, name) => `_${id}_${sigils[sigil]}_${name}`\n\t);\n};\n\n/**\n * @param {any[]} array\n * @param {any[]} target\n */\nconst flatten_body = (array, target) => {\n\tfor (let i = 0; i < array.length; i += 1) {\n\t\tconst statement = array[i];\n\t\tif (Array.isArray(statement)) {\n\t\t\tflatten_body(statement, target);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (statement.type === 'ExpressionStatement') {\n\t\t\tif (statement.expression === EMPTY) continue;\n\n\t\t\tif (Array.isArray(statement.expression)) {\n\t\t\t\t// TODO this is hacktacular\n\t\t\t\tlet node = statement.expression[0];\n\t\t\t\twhile (Array.isArray(node)) node = node[0];\n\t\t\t\tif (node) node.leadingComments = statement.leadingComments;\n\n\t\t\t\tflatten_body(statement.expression, target);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (/(Expression|Literal)$/.test(statement.expression.type)) {\n\t\t\t\ttarget.push(statement);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (statement.leadingComments)\n\t\t\t\tstatement.expression.leadingComments = statement.leadingComments;\n\t\t\tif (statement.trailingComments)\n\t\t\t\tstatement.expression.trailingComments = statement.trailingComments;\n\n\t\t\ttarget.push(statement.expression);\n\t\t\tcontinue;\n\t\t}\n\n\t\ttarget.push(statement);\n\t}\n\n\treturn target;\n};\n\n/**\n * @param {any[]} array\n * @param {any[]} target\n */\nconst flatten_properties = (array, target) => {\n\tfor (let i = 0; i < array.length; i += 1) {\n\t\tconst property = array[i];\n\n\t\tif (property.value === EMPTY) continue;\n\n\t\tif (property.key === property.value && Array.isArray(property.key)) {\n\t\t\tflatten_properties(property.key, target);\n\t\t\tcontinue;\n\t\t}\n\n\t\ttarget.push(property);\n\t}\n\n\treturn target;\n};\n\n/**\n * @param {any[]} nodes\n * @param {any[]} target\n */\nconst flatten$1 = (nodes, target) => {\n\tfor (let i = 0; i < nodes.length; i += 1) {\n\t\tconst node = nodes[i];\n\n\t\tif (node === EMPTY) continue;\n\n\t\tif (Array.isArray(node)) {\n\t\t\tflatten$1(node, target);\n\t\t\tcontinue;\n\t\t}\n\n\t\ttarget.push(node);\n\t}\n\n\treturn target;\n};\n\nconst EMPTY = { type: 'Empty' };\n\n/**\n *\n * @param {CommentWithLocation[]} comments\n * @param {string} raw\n * @returns {any}\n */\nconst acorn_opts = (comments, raw) => {\n\tconst { onComment } = get_comment_handlers(comments, raw);\n\treturn {\n\t\tecmaVersion: 2020,\n\t\tsourceType: 'module',\n\t\tallowAwaitOutsideFunction: true,\n\t\tallowImportExportEverywhere: true,\n\t\tallowReturnOutsideFunction: true,\n\t\tonComment\n\t};\n};\n\n/**\n * @param {string} raw\n * @param {Node} node\n * @param {any[]} values\n * @param {CommentWithLocation[]} comments\n */\nconst inject = (raw, node, values, comments) => {\n\tcomments.forEach((comment) => {\n\t\tcomment.value = comment.value.replace(re, (m, i) =>\n\t\t\t+i in values ? values[+i] : m\n\t\t);\n\t});\n\n\tconst { enter, leave } = get_comment_handlers(comments, raw);\n\n\treturn walk(node, {\n\t\tenter,\n\n\t\t/** @param {any} node */\n\t\tleave(node) {\n\t\t\tif (node.type === 'Identifier') {\n\t\t\t\tre.lastIndex = 0;\n\t\t\t\tconst match = re.exec(node.name);\n\n\t\t\t\tif (match) {\n\t\t\t\t\tif (match[1]) {\n\t\t\t\t\t\tif (+match[1] in values) {\n\t\t\t\t\t\t\tlet value = values[+match[1]];\n\n\t\t\t\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\t\t\ttype: 'Identifier',\n\t\t\t\t\t\t\t\t\tname: value,\n\t\t\t\t\t\t\t\t\tleadingComments: node.leadingComments,\n\t\t\t\t\t\t\t\t\ttrailingComments: node.trailingComments\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t} else if (typeof value === 'number') {\n\t\t\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\t\t\ttype: 'Literal',\n\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\tleadingComments: node.leadingComments,\n\t\t\t\t\t\t\t\t\ttrailingComments: node.trailingComments\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.replace(value || EMPTY);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.name = `${match[2] ? `@` : `#`}${match[4]}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node.type === 'Literal') {\n\t\t\t\tif (typeof node.value === 'string') {\n\t\t\t\t\tre.lastIndex = 0;\n\t\t\t\t\tconst new_value = /** @type {string} */ (node.value).replace(\n\t\t\t\t\t\tre,\n\t\t\t\t\t\t(m, i) => (+i in values ? values[+i] : m)\n\t\t\t\t\t);\n\t\t\t\t\tconst has_changed = new_value !== node.value;\n\t\t\t\t\tnode.value = new_value;\n\t\t\t\t\tif (has_changed && node.raw) {\n\t\t\t\t\t\t// preserve the quotes\n\t\t\t\t\t\tnode.raw = `${node.raw[0]}${JSON.stringify(node.value).slice(\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t-1\n\t\t\t\t\t\t)}${node.raw[node.raw.length - 1]}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node.type === 'TemplateElement') {\n\t\t\t\tre.lastIndex = 0;\n\t\t\t\tnode.value.raw = /** @type {string} */ (node.value.raw).replace(\n\t\t\t\t\tre,\n\t\t\t\t\t(m, i) => (+i in values ? values[+i] : m)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (node.type === 'Program' || node.type === 'BlockStatement') {\n\t\t\t\tnode.body = flatten_body(node.body, []);\n\t\t\t}\n\n\t\t\tif (node.type === 'ObjectExpression' || node.type === 'ObjectPattern') {\n\t\t\t\tnode.properties = flatten_properties(node.properties, []);\n\t\t\t}\n\n\t\t\tif (node.type === 'ArrayExpression' || node.type === 'ArrayPattern') {\n\t\t\t\tnode.elements = flatten$1(node.elements, []);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tnode.type === 'FunctionExpression' ||\n\t\t\t\tnode.type === 'FunctionDeclaration' ||\n\t\t\t\tnode.type === 'ArrowFunctionExpression'\n\t\t\t) {\n\t\t\t\tnode.params = flatten$1(node.params, []);\n\t\t\t}\n\n\t\t\tif (node.type === 'CallExpression' || node.type === 'NewExpression') {\n\t\t\t\tnode.arguments = flatten$1(node.arguments, []);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tnode.type === 'ImportDeclaration' ||\n\t\t\t\tnode.type === 'ExportNamedDeclaration'\n\t\t\t) {\n\t\t\t\tnode.specifiers = flatten$1(node.specifiers, []);\n\t\t\t}\n\n\t\t\tif (node.type === 'ForStatement') {\n\t\t\t\tnode.init = node.init === EMPTY ? null : node.init;\n\t\t\t\tnode.test = node.test === EMPTY ? null : node.test;\n\t\t\t\tnode.update = node.update === EMPTY ? null : node.update;\n\t\t\t}\n\n\t\t\tleave(node);\n\t\t}\n\t});\n};\n\n/**\n *\n * @param {TemplateStringsArray} strings\n * @param  {any[]} values\n * @returns {Node[]}\n */\nfunction b(strings, ...values) {\n\tconst str = join$1(strings);\n\n\t/** @type {CommentWithLocation[]} */\n\tconst comments = [];\n\n\ttry {\n\t\tlet ast = /** @type {any} */ (\n\t\t\tparse(str, acorn_opts(comments, str))\n\t\t);\n\n\t\tast = inject(str, ast, values, comments);\n\n\t\treturn ast.body;\n\t} catch (err) {\n\t\thandle_error(str, err);\n\t}\n}\n\n/**\n *\n * @param {TemplateStringsArray} strings\n * @param  {any[]} values\n * @returns {Expression & { start: Number, end: number }}\n */\nfunction x(strings, ...values) {\n\tconst str = join$1(strings);\n\n\t/** @type {CommentWithLocation[]} */\n\tconst comments = [];\n\n\ttry {\n\t\tlet expression =\n\t\t\t/** @type {Expression & { start: Number, end: number }} */ (\n\t\t\t\tparseExpressionAt(str, 0, acorn_opts(comments, str))\n\t\t\t);\n\t\tconst match = /\\S+/.exec(str.slice(expression.end));\n\t\tif (match) {\n\t\t\tthrow new Error(`Unexpected token '${match[0]}'`);\n\t\t}\n\n\t\texpression = /** @type {Expression & { start: Number, end: number }} */ (\n\t\t\tinject(str, expression, values, comments)\n\t\t);\n\n\t\treturn expression;\n\t} catch (err) {\n\t\thandle_error(str, err);\n\t}\n}\n\n/**\n *\n * @param {TemplateStringsArray} strings\n * @param  {any[]} values\n * @returns {(Property | SpreadElement) & { start: Number, end: number }}\n */\nfunction p(strings, ...values) {\n\tconst str = `{${join$1(strings)}}`;\n\n\t/** @type {CommentWithLocation[]} */\n\tconst comments = [];\n\n\ttry {\n\t\tlet expression = /** @type {any} */ (\n\t\t\tparseExpressionAt(str, 0, acorn_opts(comments, str))\n\t\t);\n\n\t\texpression = inject(str, expression, values, comments);\n\n\t\treturn expression.properties[0];\n\t} catch (err) {\n\t\thandle_error(str, err);\n\t}\n}\n\n/**\n * @param {string} str\n * @param {Error} err\n */\nfunction handle_error(str, err) {\n\t// TODO location/code frame\n\n\tre.lastIndex = 0;\n\n\tstr = str.replace(re, (m, i, at, hash, name) => {\n\t\tif (at) return `@${name}`;\n\t\tif (hash) return `#${name}`;\n\n\t\treturn '${...}';\n\t});\n\n\tconsole.log(`failed to parse:\\n${str}`);\n\tthrow err;\n}\n\n/**\n * @param {string} source\n * @param {any} opts\n */\nconst parse$1 = (source, opts) => {\n\t/** @type {CommentWithLocation[]} */\n\tconst comments = [];\n\tconst { onComment, enter, leave } = get_comment_handlers(comments, source);\n\tconst ast = /** @type {any} */ (parse(source, { onComment, ...opts }));\n\twalk(ast, { enter, leave });\n\treturn ast;\n};\n\n/**\n * @param {string} source\n * @param {number} index\n * @param {any} opts\n */\nconst parseExpressionAt$1 = (source, index, opts) => {\n\t/** @type {CommentWithLocation[]} */\n\tconst comments = [];\n\tconst { onComment, enter, leave } = get_comment_handlers(comments, source);\n\tconst ast = /** @type {any} */ (\n\t\tparseExpressionAt(source, index, { onComment, ...opts })\n\t);\n\twalk(ast, { enter, leave });\n\treturn ast;\n};\n\nconst parse$2 = (source) => parse$1(source, {\n    sourceType: 'module',\n    ecmaVersion: 12,\n    locations: true\n});\nconst parse_expression_at = (source, index) => parseExpressionAt$1(source, index, {\n    sourceType: 'module',\n    ecmaVersion: 12,\n    locations: true\n});\n\nconst whitespace = /[ \\t\\r\\n]/;\nconst start_whitespace = /^[ \\t\\r\\n]*/;\nconst end_whitespace = /[ \\t\\r\\n]*$/;\nconst dimensions = /^(?:offset|client)(?:Width|Height)$/;\n\nfunction read_expression(parser) {\n    try {\n        const node = parse_expression_at(parser.template, parser.index);\n        let num_parens = 0;\n        for (let i = parser.index; i < node.start; i += 1) {\n            if (parser.template[i] === '(')\n                num_parens += 1;\n        }\n        let index = node.end;\n        while (num_parens > 0) {\n            const char = parser.template[index];\n            if (char === ')') {\n                num_parens -= 1;\n            }\n            else if (!whitespace.test(char)) {\n                parser.error(parser_errors.unexpected_token(')'), index);\n            }\n            index += 1;\n        }\n        parser.index = index;\n        return node;\n    }\n    catch (err) {\n        parser.acorn_error(err);\n    }\n}\n\nfunction get_context(parser, attributes, start) {\n    const context = attributes.find(attribute => attribute.name === 'context');\n    if (!context)\n        return 'default';\n    if (context.value.length !== 1 || context.value[0].type !== 'Text') {\n        parser.error(parser_errors.invalid_script_context_attribute, start);\n    }\n    const value = context.value[0].data;\n    if (value !== 'module') {\n        parser.error(parser_errors.invalid_script_context_value, context.start);\n    }\n    return value;\n}\nfunction read_script(parser, start, attributes) {\n    const script_start = parser.index;\n    const data = parser.read_until(/<\\/script\\s*>/, parser_errors.unclosed_script);\n    if (parser.index >= parser.template.length) {\n        parser.error(parser_errors.unclosed_script);\n    }\n    const source = parser.template.slice(0, script_start).replace(/[^\\n]/g, ' ') + data;\n    parser.read(/<\\/script\\s*>/);\n    let ast;\n    try {\n        ast = parse$2(source);\n    }\n    catch (err) {\n        parser.acorn_error(err);\n    }\n    // TODO is this necessary?\n    ast.start = script_start;\n    return {\n        type: 'Script',\n        start,\n        end: parser.index,\n        context: get_context(parser, attributes, start),\n        content: ast\n    };\n}\n\nvar MIN_SIZE = 16 * 1024;\nvar SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\n\nvar adoptBuffer = function adoptBuffer(buffer, size) {\n    if (buffer === null || buffer.length < size) {\n        return new SafeUint32Array(Math.max(size + 1024, MIN_SIZE));\n    }\n\n    return buffer;\n};\n\n// CSS Syntax Module Level 3\n// https://www.w3.org/TR/css-syntax-3/\nvar TYPE = {\n    EOF: 0,                 // <EOF-token>\n    Ident: 1,               // <ident-token>\n    Function: 2,            // <function-token>\n    AtKeyword: 3,           // <at-keyword-token>\n    Hash: 4,                // <hash-token>\n    String: 5,              // <string-token>\n    BadString: 6,           // <bad-string-token>\n    Url: 7,                 // <url-token>\n    BadUrl: 8,              // <bad-url-token>\n    Delim: 9,               // <delim-token>\n    Number: 10,             // <number-token>\n    Percentage: 11,         // <percentage-token>\n    Dimension: 12,          // <dimension-token>\n    WhiteSpace: 13,         // <whitespace-token>\n    CDO: 14,                // <CDO-token>\n    CDC: 15,                // <CDC-token>\n    Colon: 16,              // <colon-token>     :\n    Semicolon: 17,          // <semicolon-token> ;\n    Comma: 18,              // <comma-token>     ,\n    LeftSquareBracket: 19,  // <[-token>\n    RightSquareBracket: 20, // <]-token>\n    LeftParenthesis: 21,    // <(-token>\n    RightParenthesis: 22,   // <)-token>\n    LeftCurlyBracket: 23,   // <{-token>\n    RightCurlyBracket: 24,  // <}-token>\n    Comment: 25\n};\n\nvar NAME = Object.keys(TYPE).reduce(function(result, key) {\n    result[TYPE[key]] = key;\n    return result;\n}, {});\n\nvar _const = {\n    TYPE: TYPE,\n    NAME: NAME\n};\n\nvar EOF = 0;\n\n// https://drafts.csswg.org/css-syntax-3/\n// § 4.2. Definitions\n\n// digit\n// A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).\nfunction isDigit(code) {\n    return code >= 0x0030 && code <= 0x0039;\n}\n\n// hex digit\n// A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),\n// or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).\nfunction isHexDigit$1(code) {\n    return (\n        isDigit(code) || // 0 .. 9\n        (code >= 0x0041 && code <= 0x0046) || // A .. F\n        (code >= 0x0061 && code <= 0x0066)    // a .. f\n    );\n}\n\n// uppercase letter\n// A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).\nfunction isUppercaseLetter(code) {\n    return code >= 0x0041 && code <= 0x005A;\n}\n\n// lowercase letter\n// A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).\nfunction isLowercaseLetter(code) {\n    return code >= 0x0061 && code <= 0x007A;\n}\n\n// letter\n// An uppercase letter or a lowercase letter.\nfunction isLetter(code) {\n    return isUppercaseLetter(code) || isLowercaseLetter(code);\n}\n\n// non-ASCII code point\n// A code point with a value equal to or greater than U+0080 <control>.\nfunction isNonAscii(code) {\n    return code >= 0x0080;\n}\n\n// name-start code point\n// A letter, a non-ASCII code point, or U+005F LOW LINE (_).\nfunction isNameStart(code) {\n    return isLetter(code) || isNonAscii(code) || code === 0x005F;\n}\n\n// name code point\n// A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).\nfunction isName(code) {\n    return isNameStart(code) || isDigit(code) || code === 0x002D;\n}\n\n// non-printable code point\n// A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,\n// or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.\nfunction isNonPrintable(code) {\n    return (\n        (code >= 0x0000 && code <= 0x0008) ||\n        (code === 0x000B) ||\n        (code >= 0x000E && code <= 0x001F) ||\n        (code === 0x007F)\n    );\n}\n\n// newline\n// U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,\n// as they are converted to U+000A LINE FEED during preprocessing.\n// TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED\nfunction isNewline(code) {\n    return code === 0x000A || code === 0x000D || code === 0x000C;\n}\n\n// whitespace\n// A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.\nfunction isWhiteSpace(code) {\n    return isNewline(code) || code === 0x0020 || code === 0x0009;\n}\n\n// § 4.3.8. Check if two code points are a valid escape\nfunction isValidEscape(first, second) {\n    // If the first code point is not U+005C REVERSE SOLIDUS (\\), return false.\n    if (first !== 0x005C) {\n        return false;\n    }\n\n    // Otherwise, if the second code point is a newline or EOF, return false.\n    if (isNewline(second) || second === EOF) {\n        return false;\n    }\n\n    // Otherwise, return true.\n    return true;\n}\n\n// § 4.3.9. Check if three code points would start an identifier\nfunction isIdentifierStart$1(first, second, third) {\n    // Look at the first code point:\n\n    // U+002D HYPHEN-MINUS\n    if (first === 0x002D) {\n        // If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,\n        // or the second and third code points are a valid escape, return true. Otherwise, return false.\n        return (\n            isNameStart(second) ||\n            second === 0x002D ||\n            isValidEscape(second, third)\n        );\n    }\n\n    // name-start code point\n    if (isNameStart(first)) {\n        // Return true.\n        return true;\n    }\n\n    // U+005C REVERSE SOLIDUS (\\)\n    if (first === 0x005C) {\n        // If the first and second code points are a valid escape, return true. Otherwise, return false.\n        return isValidEscape(first, second);\n    }\n\n    // anything else\n    // Return false.\n    return false;\n}\n\n// § 4.3.10. Check if three code points would start a number\nfunction isNumberStart(first, second, third) {\n    // Look at the first code point:\n\n    // U+002B PLUS SIGN (+)\n    // U+002D HYPHEN-MINUS (-)\n    if (first === 0x002B || first === 0x002D) {\n        // If the second code point is a digit, return true.\n        if (isDigit(second)) {\n            return 2;\n        }\n\n        // Otherwise, if the second code point is a U+002E FULL STOP (.)\n        // and the third code point is a digit, return true.\n        // Otherwise, return false.\n        return second === 0x002E && isDigit(third) ? 3 : 0;\n    }\n\n    // U+002E FULL STOP (.)\n    if (first === 0x002E) {\n        // If the second code point is a digit, return true. Otherwise, return false.\n        return isDigit(second) ? 2 : 0;\n    }\n\n    // digit\n    if (isDigit(first)) {\n        // Return true.\n        return 1;\n    }\n\n    // anything else\n    // Return false.\n    return 0;\n}\n\n//\n// Misc\n//\n\n// detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\nfunction isBOM(code) {\n    // UTF-16BE\n    if (code === 0xFEFF) {\n        return 1;\n    }\n\n    // UTF-16LE\n    if (code === 0xFFFE) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// Fast code category\n//\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we define a maps for 0..127 codes only\nvar CATEGORY = new Array(0x80);\ncharCodeCategory.Eof = 0x80;\ncharCodeCategory.WhiteSpace = 0x82;\ncharCodeCategory.Digit = 0x83;\ncharCodeCategory.NameStart = 0x84;\ncharCodeCategory.NonPrintable = 0x85;\n\nfor (var i$1 = 0; i$1 < CATEGORY.length; i$1++) {\n    switch (true) {\n        case isWhiteSpace(i$1):\n            CATEGORY[i$1] = charCodeCategory.WhiteSpace;\n            break;\n\n        case isDigit(i$1):\n            CATEGORY[i$1] = charCodeCategory.Digit;\n            break;\n\n        case isNameStart(i$1):\n            CATEGORY[i$1] = charCodeCategory.NameStart;\n            break;\n\n        case isNonPrintable(i$1):\n            CATEGORY[i$1] = charCodeCategory.NonPrintable;\n            break;\n\n        default:\n            CATEGORY[i$1] = i$1 || charCodeCategory.Eof;\n    }\n}\n\nfunction charCodeCategory(code) {\n    return code < 0x80 ? CATEGORY[code] : charCodeCategory.NameStart;\n}\nvar charCodeDefinitions = {\n    isDigit: isDigit,\n    isHexDigit: isHexDigit$1,\n    isUppercaseLetter: isUppercaseLetter,\n    isLowercaseLetter: isLowercaseLetter,\n    isLetter: isLetter,\n    isNonAscii: isNonAscii,\n    isNameStart: isNameStart,\n    isName: isName,\n    isNonPrintable: isNonPrintable,\n    isNewline: isNewline,\n    isWhiteSpace: isWhiteSpace,\n    isValidEscape: isValidEscape,\n    isIdentifierStart: isIdentifierStart$1,\n    isNumberStart: isNumberStart,\n\n    isBOM: isBOM,\n    charCodeCategory: charCodeCategory\n};\n\nvar isDigit$1 = charCodeDefinitions.isDigit;\nvar isHexDigit$2 = charCodeDefinitions.isHexDigit;\nvar isUppercaseLetter$1 = charCodeDefinitions.isUppercaseLetter;\nvar isName$1 = charCodeDefinitions.isName;\nvar isWhiteSpace$1 = charCodeDefinitions.isWhiteSpace;\nvar isValidEscape$1 = charCodeDefinitions.isValidEscape;\n\nfunction getCharCode(source, offset) {\n    return offset < source.length ? source.charCodeAt(offset) : 0;\n}\n\nfunction getNewlineLength(source, offset, code) {\n    if (code === 13 /* \\r */ && getCharCode(source, offset + 1) === 10 /* \\n */) {\n        return 2;\n    }\n\n    return 1;\n}\n\nfunction cmpChar(testStr, offset, referenceCode) {\n    var code = testStr.charCodeAt(offset);\n\n    // code.toLowerCase() for A..Z\n    if (isUppercaseLetter$1(code)) {\n        code = code | 32;\n    }\n\n    return code === referenceCode;\n}\n\nfunction cmpStr(testStr, start, end, referenceStr) {\n    if (end - start !== referenceStr.length) {\n        return false;\n    }\n\n    if (start < 0 || end > testStr.length) {\n        return false;\n    }\n\n    for (var i = start; i < end; i++) {\n        var testCode = testStr.charCodeAt(i);\n        var referenceCode = referenceStr.charCodeAt(i - start);\n\n        // testCode.toLowerCase() for A..Z\n        if (isUppercaseLetter$1(testCode)) {\n            testCode = testCode | 32;\n        }\n\n        if (testCode !== referenceCode) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction findWhiteSpaceStart(source, offset) {\n    for (; offset >= 0; offset--) {\n        if (!isWhiteSpace$1(source.charCodeAt(offset))) {\n            break;\n        }\n    }\n\n    return offset + 1;\n}\n\nfunction findWhiteSpaceEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        if (!isWhiteSpace$1(source.charCodeAt(offset))) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findDecimalNumberEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        if (!isDigit$1(source.charCodeAt(offset))) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\n// § 4.3.7. Consume an escaped code point\nfunction consumeEscaped(source, offset) {\n    // It assumes that the U+005C REVERSE SOLIDUS (\\) has already been consumed and\n    // that the next input code point has already been verified to be part of a valid escape.\n    offset += 2;\n\n    // hex digit\n    if (isHexDigit$2(getCharCode(source, offset - 1))) {\n        // Consume as many hex digits as possible, but no more than 5.\n        // Note that this means 1-6 hex digits have been consumed in total.\n        for (var maxOffset = Math.min(source.length, offset + 5); offset < maxOffset; offset++) {\n            if (!isHexDigit$2(getCharCode(source, offset))) {\n                break;\n            }\n        }\n\n        // If the next input code point is whitespace, consume it as well.\n        var code = getCharCode(source, offset);\n        if (isWhiteSpace$1(code)) {\n            offset += getNewlineLength(source, offset, code);\n        }\n    }\n\n    return offset;\n}\n\n// §4.3.11. Consume a name\n// Note: This algorithm does not do the verification of the first few code points that are necessary\n// to ensure the returned code points would constitute an <ident-token>. If that is the intended use,\n// ensure that the stream starts with an identifier before calling this algorithm.\nfunction consumeName(source, offset) {\n    // Let result initially be an empty string.\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        // name code point\n        if (isName$1(code)) {\n            // Append the code point to result.\n            continue;\n        }\n\n        // the stream starts with a valid escape\n        if (isValidEscape$1(code, getCharCode(source, offset + 1))) {\n            // Consume an escaped code point. Append the returned code point to result.\n            offset = consumeEscaped(source, offset) - 1;\n            continue;\n        }\n\n        // anything else\n        // Reconsume the current input code point. Return result.\n        break;\n    }\n\n    return offset;\n}\n\n// §4.3.12. Consume a number\nfunction consumeNumber(source, offset) {\n    var code = source.charCodeAt(offset);\n\n    // 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-),\n    // consume it and append it to repr.\n    if (code === 0x002B || code === 0x002D) {\n        code = source.charCodeAt(offset += 1);\n    }\n\n    // 3. While the next input code point is a digit, consume it and append it to repr.\n    if (isDigit$1(code)) {\n        offset = findDecimalNumberEnd(source, offset + 1);\n        code = source.charCodeAt(offset);\n    }\n\n    // 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:\n    if (code === 0x002E && isDigit$1(source.charCodeAt(offset + 1))) {\n        // 4.1 Consume them.\n        // 4.2 Append them to repr.\n        code = source.charCodeAt(offset += 2);\n\n        // 4.3 Set type to \"number\".\n        // TODO\n\n        // 4.4 While the next input code point is a digit, consume it and append it to repr.\n\n        offset = findDecimalNumberEnd(source, offset);\n    }\n\n    // 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E)\n    // or U+0065 LATIN SMALL LETTER E (e), ... , followed by a digit, then:\n    if (cmpChar(source, offset, 101 /* e */)) {\n        var sign = 0;\n        code = source.charCodeAt(offset + 1);\n\n        // ... optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+) ...\n        if (code === 0x002D || code === 0x002B) {\n            sign = 1;\n            code = source.charCodeAt(offset + 2);\n        }\n\n        // ... followed by a digit\n        if (isDigit$1(code)) {\n            // 5.1 Consume them.\n            // 5.2 Append them to repr.\n\n            // 5.3 Set type to \"number\".\n            // TODO\n\n            // 5.4 While the next input code point is a digit, consume it and append it to repr.\n            offset = findDecimalNumberEnd(source, offset + 1 + sign + 1);\n        }\n    }\n\n    return offset;\n}\n\n// § 4.3.14. Consume the remnants of a bad url\n// ... its sole use is to consume enough of the input stream to reach a recovery point\n// where normal tokenizing can resume.\nfunction consumeBadUrlRemnants(source, offset) {\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        // U+0029 RIGHT PARENTHESIS ())\n        // EOF\n        if (code === 0x0029) {\n            // Return.\n            offset++;\n            break;\n        }\n\n        if (isValidEscape$1(code, getCharCode(source, offset + 1))) {\n            // Consume an escaped code point.\n            // Note: This allows an escaped right parenthesis (\"\\)\") to be encountered\n            // without ending the <bad-url-token>. This is otherwise identical to\n            // the \"anything else\" clause.\n            offset = consumeEscaped(source, offset);\n        }\n    }\n\n    return offset;\n}\n\nvar utils = {\n    consumeEscaped: consumeEscaped,\n    consumeName: consumeName,\n    consumeNumber: consumeNumber,\n    consumeBadUrlRemnants: consumeBadUrlRemnants,\n\n    cmpChar: cmpChar,\n    cmpStr: cmpStr,\n\n    getNewlineLength: getNewlineLength,\n    findWhiteSpaceStart: findWhiteSpaceStart,\n    findWhiteSpaceEnd: findWhiteSpaceEnd\n};\n\nvar TYPE$1 = _const.TYPE;\nvar NAME$1 = _const.NAME;\n\n\nvar cmpStr$1 = utils.cmpStr;\n\nvar EOF$1 = TYPE$1.EOF;\nvar WHITESPACE = TYPE$1.WhiteSpace;\nvar COMMENT = TYPE$1.Comment;\n\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\n\nvar TokenStream = function() {\n    this.offsetAndType = null;\n    this.balance = null;\n\n    this.reset();\n};\n\nTokenStream.prototype = {\n    reset: function() {\n        this.eof = false;\n        this.tokenIndex = -1;\n        this.tokenType = 0;\n        this.tokenStart = this.firstCharOffset;\n        this.tokenEnd = this.firstCharOffset;\n    },\n\n    lookupType: function(offset) {\n        offset += this.tokenIndex;\n\n        if (offset < this.tokenCount) {\n            return this.offsetAndType[offset] >> TYPE_SHIFT;\n        }\n\n        return EOF$1;\n    },\n    lookupOffset: function(offset) {\n        offset += this.tokenIndex;\n\n        if (offset < this.tokenCount) {\n            return this.offsetAndType[offset - 1] & OFFSET_MASK;\n        }\n\n        return this.source.length;\n    },\n    lookupValue: function(offset, referenceStr) {\n        offset += this.tokenIndex;\n\n        if (offset < this.tokenCount) {\n            return cmpStr$1(\n                this.source,\n                this.offsetAndType[offset - 1] & OFFSET_MASK,\n                this.offsetAndType[offset] & OFFSET_MASK,\n                referenceStr\n            );\n        }\n\n        return false;\n    },\n    getTokenStart: function(tokenIndex) {\n        if (tokenIndex === this.tokenIndex) {\n            return this.tokenStart;\n        }\n\n        if (tokenIndex > 0) {\n            return tokenIndex < this.tokenCount\n                ? this.offsetAndType[tokenIndex - 1] & OFFSET_MASK\n                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;\n        }\n\n        return this.firstCharOffset;\n    },\n\n    // TODO: -> skipUntilBalanced\n    getRawLength: function(startToken, mode) {\n        var cursor = startToken;\n        var balanceEnd;\n        var offset = this.offsetAndType[Math.max(cursor - 1, 0)] & OFFSET_MASK;\n        var type;\n\n        loop:\n        for (; cursor < this.tokenCount; cursor++) {\n            balanceEnd = this.balance[cursor];\n\n            // stop scanning on balance edge that points to offset before start token\n            if (balanceEnd < startToken) {\n                break loop;\n            }\n\n            type = this.offsetAndType[cursor] >> TYPE_SHIFT;\n\n            // check token is stop type\n            switch (mode(type, this.source, offset)) {\n                case 1:\n                    break loop;\n\n                case 2:\n                    cursor++;\n                    break loop;\n\n                default:\n                    offset = this.offsetAndType[cursor] & OFFSET_MASK;\n\n                    // fast forward to the end of balanced block\n                    if (this.balance[balanceEnd] === cursor) {\n                        cursor = balanceEnd;\n                    }\n            }\n        }\n\n        return cursor - this.tokenIndex;\n    },\n    isBalanceEdge: function(pos) {\n        return this.balance[this.tokenIndex] < pos;\n    },\n    isDelim: function(code, offset) {\n        if (offset) {\n            return (\n                this.lookupType(offset) === TYPE$1.Delim &&\n                this.source.charCodeAt(this.lookupOffset(offset)) === code\n            );\n        }\n\n        return (\n            this.tokenType === TYPE$1.Delim &&\n            this.source.charCodeAt(this.tokenStart) === code\n        );\n    },\n\n    getTokenValue: function() {\n        return this.source.substring(this.tokenStart, this.tokenEnd);\n    },\n    getTokenLength: function() {\n        return this.tokenEnd - this.tokenStart;\n    },\n    substrToCursor: function(start) {\n        return this.source.substring(start, this.tokenStart);\n    },\n\n    skipWS: function() {\n        for (var i = this.tokenIndex, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {\n            if ((this.offsetAndType[i] >> TYPE_SHIFT) !== WHITESPACE) {\n                break;\n            }\n        }\n\n        if (skipTokenCount > 0) {\n            this.skip(skipTokenCount);\n        }\n    },\n    skipSC: function() {\n        while (this.tokenType === WHITESPACE || this.tokenType === COMMENT) {\n            this.next();\n        }\n    },\n    skip: function(tokenCount) {\n        var next = this.tokenIndex + tokenCount;\n\n        if (next < this.tokenCount) {\n            this.tokenIndex = next;\n            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.tokenIndex = this.tokenCount;\n            this.next();\n        }\n    },\n    next: function() {\n        var next = this.tokenIndex + 1;\n\n        if (next < this.tokenCount) {\n            this.tokenIndex = next;\n            this.tokenStart = this.tokenEnd;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.tokenIndex = this.tokenCount;\n            this.eof = true;\n            this.tokenType = EOF$1;\n            this.tokenStart = this.tokenEnd = this.source.length;\n        }\n    },\n\n    forEachToken(fn) {\n        for (var i = 0, offset = this.firstCharOffset; i < this.tokenCount; i++) {\n            var start = offset;\n            var item = this.offsetAndType[i];\n            var end = item & OFFSET_MASK;\n            var type = item >> TYPE_SHIFT;\n\n            offset = end;\n\n            fn(type, start, end, i);\n        }\n    },\n\n    dump() {\n        var tokens = new Array(this.tokenCount);\n\n        this.forEachToken((type, start, end, index) => {\n            tokens[index] = {\n                idx: index,\n                type: NAME$1[type],\n                chunk: this.source.substring(start, end),\n                balance: this.balance[index]\n            };\n        });\n\n        return tokens;\n    }\n};\n\nvar TokenStream_1 = TokenStream;\n\nvar TYPE$2 = _const.TYPE;\n\n\nvar isNewline$1 = charCodeDefinitions.isNewline;\nvar isName$2 = charCodeDefinitions.isName;\nvar isValidEscape$2 = charCodeDefinitions.isValidEscape;\nvar isNumberStart$1 = charCodeDefinitions.isNumberStart;\nvar isIdentifierStart$2 = charCodeDefinitions.isIdentifierStart;\nvar charCodeCategory$1 = charCodeDefinitions.charCodeCategory;\nvar isBOM$1 = charCodeDefinitions.isBOM;\n\n\nvar cmpStr$2 = utils.cmpStr;\nvar getNewlineLength$1 = utils.getNewlineLength;\nvar findWhiteSpaceEnd$1 = utils.findWhiteSpaceEnd;\nvar consumeEscaped$1 = utils.consumeEscaped;\nvar consumeName$1 = utils.consumeName;\nvar consumeNumber$1 = utils.consumeNumber;\nvar consumeBadUrlRemnants$1 = utils.consumeBadUrlRemnants;\n\nvar OFFSET_MASK$1 = 0x00FFFFFF;\nvar TYPE_SHIFT$1 = 24;\n\nfunction tokenize(source, stream) {\n    function getCharCode(offset) {\n        return offset < sourceLength ? source.charCodeAt(offset) : 0;\n    }\n\n    // § 4.3.3. Consume a numeric token\n    function consumeNumericToken() {\n        // Consume a number and let number be the result.\n        offset = consumeNumber$1(source, offset);\n\n        // If the next 3 input code points would start an identifier, then:\n        if (isIdentifierStart$2(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n            // Consume a name. Set the <dimension-token>’s unit to the returned value.\n            // Return the <dimension-token>.\n            type = TYPE$2.Dimension;\n            offset = consumeName$1(source, offset);\n            return;\n        }\n\n        // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n        if (getCharCode(offset) === 0x0025) {\n            // Create a <percentage-token> with the same value as number, and return it.\n            type = TYPE$2.Percentage;\n            offset++;\n            return;\n        }\n\n        // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n        type = TYPE$2.Number;\n    }\n\n    // § 4.3.4. Consume an ident-like token\n    function consumeIdentLikeToken() {\n        const nameStartOffset = offset;\n\n        // Consume a name, and let string be the result.\n        offset = consumeName$1(source, offset);\n\n        // If string’s value is an ASCII case-insensitive match for \"url\",\n        // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n        if (cmpStr$2(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n            // While the next two input code points are whitespace, consume the next input code point.\n            offset = findWhiteSpaceEnd$1(source, offset + 1);\n\n            // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n            // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n            // then create a <function-token> with its value set to string and return it.\n            if (getCharCode(offset) === 0x0022 ||\n                getCharCode(offset) === 0x0027) {\n                type = TYPE$2.Function;\n                offset = nameStartOffset + 4;\n                return;\n            }\n\n            // Otherwise, consume a url token, and return it.\n            consumeUrlToken();\n            return;\n        }\n\n        // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n        // Create a <function-token> with its value set to string and return it.\n        if (getCharCode(offset) === 0x0028) {\n            type = TYPE$2.Function;\n            offset++;\n            return;\n        }\n\n        // Otherwise, create an <ident-token> with its value set to string and return it.\n        type = TYPE$2.Ident;\n    }\n\n    // § 4.3.5. Consume a string token\n    function consumeStringToken(endingCodePoint) {\n        // This algorithm may be called with an ending code point, which denotes the code point\n        // that ends the string. If an ending code point is not specified,\n        // the current input code point is used.\n        if (!endingCodePoint) {\n            endingCodePoint = getCharCode(offset++);\n        }\n\n        // Initially create a <string-token> with its value set to the empty string.\n        type = TYPE$2.String;\n\n        // Repeatedly consume the next input code point from the stream:\n        for (; offset < source.length; offset++) {\n            var code = source.charCodeAt(offset);\n\n            switch (charCodeCategory$1(code)) {\n                // ending code point\n                case endingCodePoint:\n                    // Return the <string-token>.\n                    offset++;\n                    return;\n\n                // EOF\n                case charCodeCategory$1.Eof:\n                    // This is a parse error. Return the <string-token>.\n                    return;\n\n                // newline\n                case charCodeCategory$1.WhiteSpace:\n                    if (isNewline$1(code)) {\n                        // This is a parse error. Reconsume the current input code point,\n                        // create a <bad-string-token>, and return it.\n                        offset += getNewlineLength$1(source, offset, code);\n                        type = TYPE$2.BadString;\n                        return;\n                    }\n                    break;\n\n                // U+005C REVERSE SOLIDUS (\\)\n                case 0x005C:\n                    // If the next input code point is EOF, do nothing.\n                    if (offset === source.length - 1) {\n                        break;\n                    }\n\n                    var nextCode = getCharCode(offset + 1);\n\n                    // Otherwise, if the next input code point is a newline, consume it.\n                    if (isNewline$1(nextCode)) {\n                        offset += getNewlineLength$1(source, offset + 1, nextCode);\n                    } else if (isValidEscape$2(code, nextCode)) {\n                        // Otherwise, (the stream starts with a valid escape) consume\n                        // an escaped code point and append the returned code point to\n                        // the <string-token>’s value.\n                        offset = consumeEscaped$1(source, offset) - 1;\n                    }\n                    break;\n\n                // anything else\n                // Append the current input code point to the <string-token>’s value.\n            }\n        }\n    }\n\n    // § 4.3.6. Consume a url token\n    // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n    // This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n    // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n    // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n    function consumeUrlToken() {\n        // Initially create a <url-token> with its value set to the empty string.\n        type = TYPE$2.Url;\n\n        // Consume as much whitespace as possible.\n        offset = findWhiteSpaceEnd$1(source, offset);\n\n        // Repeatedly consume the next input code point from the stream:\n        for (; offset < source.length; offset++) {\n            var code = source.charCodeAt(offset);\n\n            switch (charCodeCategory$1(code)) {\n                // U+0029 RIGHT PARENTHESIS ())\n                case 0x0029:\n                    // Return the <url-token>.\n                    offset++;\n                    return;\n\n                // EOF\n                case charCodeCategory$1.Eof:\n                    // This is a parse error. Return the <url-token>.\n                    return;\n\n                // whitespace\n                case charCodeCategory$1.WhiteSpace:\n                    // Consume as much whitespace as possible.\n                    offset = findWhiteSpaceEnd$1(source, offset);\n\n                    // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n                    // consume it and return the <url-token>\n                    // (if EOF was encountered, this is a parse error);\n                    if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n                        if (offset < source.length) {\n                            offset++;\n                        }\n                        return;\n                    }\n\n                    // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n                    // and return it.\n                    offset = consumeBadUrlRemnants$1(source, offset);\n                    type = TYPE$2.BadUrl;\n                    return;\n\n                // U+0022 QUOTATION MARK (\")\n                // U+0027 APOSTROPHE (')\n                // U+0028 LEFT PARENTHESIS (()\n                // non-printable code point\n                case 0x0022:\n                case 0x0027:\n                case 0x0028:\n                case charCodeCategory$1.NonPrintable:\n                    // This is a parse error. Consume the remnants of a bad url,\n                    // create a <bad-url-token>, and return it.\n                    offset = consumeBadUrlRemnants$1(source, offset);\n                    type = TYPE$2.BadUrl;\n                    return;\n\n                // U+005C REVERSE SOLIDUS (\\)\n                case 0x005C:\n                    // If the stream starts with a valid escape, consume an escaped code point and\n                    // append the returned code point to the <url-token>’s value.\n                    if (isValidEscape$2(code, getCharCode(offset + 1))) {\n                        offset = consumeEscaped$1(source, offset) - 1;\n                        break;\n                    }\n\n                    // Otherwise, this is a parse error. Consume the remnants of a bad url,\n                    // create a <bad-url-token>, and return it.\n                    offset = consumeBadUrlRemnants$1(source, offset);\n                    type = TYPE$2.BadUrl;\n                    return;\n\n                // anything else\n                // Append the current input code point to the <url-token>’s value.\n            }\n        }\n    }\n\n    if (!stream) {\n        stream = new TokenStream_1();\n    }\n\n    // ensure source is a string\n    source = String(source || '');\n\n    var sourceLength = source.length;\n    var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token\n    var balance = adoptBuffer(stream.balance, sourceLength + 1);\n    var tokenCount = 0;\n    var start = isBOM$1(getCharCode(0));\n    var offset = start;\n    var balanceCloseType = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    // https://drafts.csswg.org/css-syntax-3/#consume-token\n    // § 4.3.1. Consume a token\n    while (offset < sourceLength) {\n        var code = source.charCodeAt(offset);\n        var type = 0;\n\n        balance[tokenCount] = sourceLength;\n\n        switch (charCodeCategory$1(code)) {\n            // whitespace\n            case charCodeCategory$1.WhiteSpace:\n                // Consume as much whitespace as possible. Return a <whitespace-token>.\n                type = TYPE$2.WhiteSpace;\n                offset = findWhiteSpaceEnd$1(source, offset + 1);\n                break;\n\n            // U+0022 QUOTATION MARK (\")\n            case 0x0022:\n                // Consume a string token and return it.\n                consumeStringToken();\n                break;\n\n            // U+0023 NUMBER SIGN (#)\n            case 0x0023:\n                // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n                if (isName$2(getCharCode(offset + 1)) || isValidEscape$2(getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // Create a <hash-token>.\n                    type = TYPE$2.Hash;\n\n                    // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n                    // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n                    //     // TODO: set id flag\n                    // }\n\n                    // Consume a name, and set the <hash-token>’s value to the returned string.\n                    offset = consumeName$1(source, offset + 1);\n\n                    // Return the <hash-token>.\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE$2.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+0027 APOSTROPHE (')\n            case 0x0027:\n                // Consume a string token and return it.\n                consumeStringToken();\n                break;\n\n            // U+0028 LEFT PARENTHESIS (()\n            case 0x0028:\n                // Return a <(-token>.\n                type = TYPE$2.LeftParenthesis;\n                offset++;\n                break;\n\n            // U+0029 RIGHT PARENTHESIS ())\n            case 0x0029:\n                // Return a <)-token>.\n                type = TYPE$2.RightParenthesis;\n                offset++;\n                break;\n\n            // U+002B PLUS SIGN (+)\n            case 0x002B:\n                // If the input stream starts with a number, ...\n                if (isNumberStart$1(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // ... reconsume the current input code point, consume a numeric token, and return it.\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE$2.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+002C COMMA (,)\n            case 0x002C:\n                // Return a <comma-token>.\n                type = TYPE$2.Comma;\n                offset++;\n                break;\n\n            // U+002D HYPHEN-MINUS (-)\n            case 0x002D:\n                // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n                if (isNumberStart$1(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n                    if (getCharCode(offset + 1) === 0x002D &&\n                        getCharCode(offset + 2) === 0x003E) {\n                        type = TYPE$2.CDC;\n                        offset = offset + 3;\n                    } else {\n                        // Otherwise, if the input stream starts with an identifier, ...\n                        if (isIdentifierStart$2(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                            // ... reconsume the current input code point, consume an ident-like token, and return it.\n                            consumeIdentLikeToken();\n                        } else {\n                            // Otherwise, return a <delim-token> with its value set to the current input code point.\n                            type = TYPE$2.Delim;\n                            offset++;\n                        }\n                    }\n                }\n                break;\n\n            // U+002E FULL STOP (.)\n            case 0x002E:\n                // If the input stream starts with a number, ...\n                if (isNumberStart$1(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // ... reconsume the current input code point, consume a numeric token, and return it.\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE$2.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+002F SOLIDUS (/)\n            case 0x002F:\n                // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n                if (getCharCode(offset + 1) === 0x002A) {\n                    // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n                    // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n                    type = TYPE$2.Comment;\n                    offset = source.indexOf('*/', offset + 2) + 2;\n                    if (offset === 1) {\n                        offset = source.length;\n                    }\n                } else {\n                    type = TYPE$2.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+003A COLON (:)\n            case 0x003A:\n                // Return a <colon-token>.\n                type = TYPE$2.Colon;\n                offset++;\n                break;\n\n            // U+003B SEMICOLON (;)\n            case 0x003B:\n                // Return a <semicolon-token>.\n                type = TYPE$2.Semicolon;\n                offset++;\n                break;\n\n            // U+003C LESS-THAN SIGN (<)\n            case 0x003C:\n                // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n                if (getCharCode(offset + 1) === 0x0021 &&\n                    getCharCode(offset + 2) === 0x002D &&\n                    getCharCode(offset + 3) === 0x002D) {\n                    // ... consume them and return a <CDO-token>.\n                    type = TYPE$2.CDO;\n                    offset = offset + 4;\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE$2.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+0040 COMMERCIAL AT (@)\n            case 0x0040:\n                // If the next 3 input code points would start an identifier, ...\n                if (isIdentifierStart$2(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n                    // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n                    type = TYPE$2.AtKeyword;\n                    offset = consumeName$1(source, offset + 1);\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE$2.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+005B LEFT SQUARE BRACKET ([)\n            case 0x005B:\n                // Return a <[-token>.\n                type = TYPE$2.LeftSquareBracket;\n                offset++;\n                break;\n\n            // U+005C REVERSE SOLIDUS (\\)\n            case 0x005C:\n                // If the input stream starts with a valid escape, ...\n                if (isValidEscape$2(code, getCharCode(offset + 1))) {\n                    // ... reconsume the current input code point, consume an ident-like token, and return it.\n                    consumeIdentLikeToken();\n                } else {\n                    // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n                    type = TYPE$2.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+005D RIGHT SQUARE BRACKET (])\n            case 0x005D:\n                // Return a <]-token>.\n                type = TYPE$2.RightSquareBracket;\n                offset++;\n                break;\n\n            // U+007B LEFT CURLY BRACKET ({)\n            case 0x007B:\n                // Return a <{-token>.\n                type = TYPE$2.LeftCurlyBracket;\n                offset++;\n                break;\n\n            // U+007D RIGHT CURLY BRACKET (})\n            case 0x007D:\n                // Return a <}-token>.\n                type = TYPE$2.RightCurlyBracket;\n                offset++;\n                break;\n\n            // digit\n            case charCodeCategory$1.Digit:\n                // Reconsume the current input code point, consume a numeric token, and return it.\n                consumeNumericToken();\n                break;\n\n            // name-start code point\n            case charCodeCategory$1.NameStart:\n                // Reconsume the current input code point, consume an ident-like token, and return it.\n                consumeIdentLikeToken();\n                break;\n\n            // EOF\n            case charCodeCategory$1.Eof:\n                // Return an <EOF-token>.\n                break;\n\n            // anything else\n            default:\n                // Return a <delim-token> with its value set to the current input code point.\n                type = TYPE$2.Delim;\n                offset++;\n        }\n\n        switch (type) {\n            case balanceCloseType:\n                balancePrev = balanceStart & OFFSET_MASK$1;\n                balanceStart = balance[balancePrev];\n                balanceCloseType = balanceStart >> TYPE_SHIFT$1;\n                balance[tokenCount] = balancePrev;\n                balance[balancePrev++] = tokenCount;\n                for (; balancePrev < tokenCount; balancePrev++) {\n                    if (balance[balancePrev] === sourceLength) {\n                        balance[balancePrev] = tokenCount;\n                    }\n                }\n                break;\n\n            case TYPE$2.LeftParenthesis:\n            case TYPE$2.Function:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE$2.RightParenthesis;\n                balanceStart = (balanceCloseType << TYPE_SHIFT$1) | tokenCount;\n                break;\n\n            case TYPE$2.LeftSquareBracket:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE$2.RightSquareBracket;\n                balanceStart = (balanceCloseType << TYPE_SHIFT$1) | tokenCount;\n                break;\n\n            case TYPE$2.LeftCurlyBracket:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE$2.RightCurlyBracket;\n                balanceStart = (balanceCloseType << TYPE_SHIFT$1) | tokenCount;\n                break;\n        }\n\n        offsetAndType[tokenCount++] = (type << TYPE_SHIFT$1) | offset;\n    }\n\n    // finalize buffers\n    offsetAndType[tokenCount] = (TYPE$2.EOF << TYPE_SHIFT$1) | offset; // <EOF-token>\n    balance[tokenCount] = sourceLength;\n    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n    while (balanceStart !== 0) {\n        balancePrev = balanceStart & OFFSET_MASK$1;\n        balanceStart = balance[balancePrev];\n        balance[balancePrev] = sourceLength;\n    }\n\n    // update stream\n    stream.source = source;\n    stream.firstCharOffset = start;\n    stream.offsetAndType = offsetAndType;\n    stream.tokenCount = tokenCount;\n    stream.balance = balance;\n    stream.reset();\n    stream.next();\n\n    return stream;\n}\n\n// extend tokenizer with constants\nObject.keys(_const).forEach(function(key) {\n    tokenize[key] = _const[key];\n});\n\n// extend tokenizer with static methods from utils\nObject.keys(charCodeDefinitions).forEach(function(key) {\n    tokenize[key] = charCodeDefinitions[key];\n});\nObject.keys(utils).forEach(function(key) {\n    tokenize[key] = utils[key];\n});\n\nvar tokenizer = tokenize;\n\nvar isBOM$2 = tokenizer.isBOM;\n\nvar N = 10;\nvar F = 12;\nvar R = 13;\n\nfunction computeLinesAndColumns(host, source) {\n    var sourceLength = source.length;\n    var lines = adoptBuffer(host.lines, sourceLength); // +1\n    var line = host.startLine;\n    var columns = adoptBuffer(host.columns, sourceLength);\n    var column = host.startColumn;\n    var startOffset = source.length > 0 ? isBOM$2(source.charCodeAt(0)) : 0;\n\n    for (var i = startOffset; i < sourceLength; i++) { // -1\n        var code = source.charCodeAt(i);\n\n        lines[i] = line;\n        columns[i] = column++;\n\n        if (code === N || code === R || code === F) {\n            if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {\n                i++;\n                lines[i] = line;\n                columns[i] = column;\n            }\n\n            line++;\n            column = 1;\n        }\n    }\n\n    lines[i] = line;\n    columns[i] = column;\n\n    host.lines = lines;\n    host.columns = columns;\n}\n\nvar OffsetToLocation = function() {\n    this.lines = null;\n    this.columns = null;\n    this.linesAndColumnsComputed = false;\n};\n\nOffsetToLocation.prototype = {\n    setSource: function(source, startOffset, startLine, startColumn) {\n        this.source = source;\n        this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;\n        this.startLine = typeof startLine === 'undefined' ? 1 : startLine;\n        this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;\n        this.linesAndColumnsComputed = false;\n    },\n\n    ensureLinesAndColumnsComputed: function() {\n        if (!this.linesAndColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n            this.linesAndColumnsComputed = true;\n        }\n    },\n    getLocation: function(offset, filename) {\n        this.ensureLinesAndColumnsComputed();\n\n        return {\n            source: filename,\n            offset: this.startOffset + offset,\n            line: this.lines[offset],\n            column: this.columns[offset]\n        };\n    },\n    getLocationRange: function(start, end, filename) {\n        this.ensureLinesAndColumnsComputed();\n\n        return {\n            source: filename,\n            start: {\n                offset: this.startOffset + start,\n                line: this.lines[start],\n                column: this.columns[start]\n            },\n            end: {\n                offset: this.startOffset + end,\n                line: this.lines[end],\n                column: this.columns[end]\n            }\n        };\n    }\n};\n\nvar OffsetToLocation_1 = OffsetToLocation;\n\nvar createCustomError = function createCustomError(name, message) {\n    // use Object.create(), because some VMs prevent setting line/column otherwise\n    // (iOS Safari 10 even throws an exception)\n    var error = Object.create(SyntaxError.prototype);\n    var errorStack = new Error();\n\n    error.name = name;\n    error.message = message;\n\n    Object.defineProperty(error, 'stack', {\n        get: function() {\n            return (errorStack.stack || '').replace(/^(.+\\n){1,3}/, name + ': ' + message + '\\n');\n        }\n    });\n\n    return error;\n};\n\nvar MAX_LINE_LENGTH = 100;\nvar OFFSET_CORRECTION = 60;\nvar TAB_REPLACEMENT = '    ';\n\nfunction sourceFragment(error, extraLines) {\n    function processLines(start, end) {\n        return lines.slice(start, end).map(function(line, idx) {\n            var num = String(start + idx + 1);\n\n            while (num.length < maxNumLength) {\n                num = ' ' + num;\n            }\n\n            return num + ' |' + line;\n        }).join('\\n');\n    }\n\n    var lines = error.source.split(/\\r\\n?|\\n|\\f/);\n    var line = error.line;\n    var column = error.column;\n    var startLine = Math.max(1, line - extraLines) - 1;\n    var endLine = Math.min(line + extraLines, lines.length + 1);\n    var maxNumLength = Math.max(4, String(endLine).length) + 1;\n    var cutLeft = 0;\n\n    // column correction according to replaced tab before column\n    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n\n    if (column > MAX_LINE_LENGTH) {\n        cutLeft = column - OFFSET_CORRECTION + 3;\n        column = OFFSET_CORRECTION - 2;\n    }\n\n    for (var i = startLine; i <= endLine; i++) {\n        if (i >= 0 && i < lines.length) {\n            lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n            lines[i] =\n                (cutLeft > 0 && lines[i].length > cutLeft ? '\\u2026' : '') +\n                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +\n                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\\u2026' : '');\n        }\n    }\n\n    return [\n        processLines(startLine, line),\n        new Array(column + maxNumLength + 2).join('-') + '^',\n        processLines(line, endLine)\n    ].filter(Boolean).join('\\n');\n}\n\nvar SyntaxError$1 = function(message, source, offset, line, column) {\n    var error = createCustomError('SyntaxError', message);\n\n    error.source = source;\n    error.offset = offset;\n    error.line = line;\n    error.column = column;\n\n    error.sourceFragment = function(extraLines) {\n        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);\n    };\n    Object.defineProperty(error, 'formattedMessage', {\n        get: function() {\n            return (\n                'Parse error: ' + error.message + '\\n' +\n                sourceFragment(error, 2)\n            );\n        }\n    });\n\n    // for backward capability\n    error.parseError = {\n        offset: offset,\n        line: line,\n        column: column\n    };\n\n    return error;\n};\n\nvar _SyntaxError = SyntaxError$1;\n\n//\n//                              list\n//                            ┌──────┐\n//             ┌──────────────┼─head │\n//             │              │ tail─┼──────────────┐\n//             │              └──────┘              │\n//             ▼                                    ▼\n//            item        item        item        item\n//          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐\n//  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │\n//          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null\n//          ├──────┤    ├──────┤    ├──────┤    ├──────┤\n//          │ data │    │ data │    │ data │    │ data │\n//          └──────┘    └──────┘    └──────┘    └──────┘\n//\n\nfunction createItem(data) {\n    return {\n        prev: null,\n        next: null,\n        data: data\n    };\n}\n\nfunction allocateCursor(node, prev, next) {\n    var cursor;\n\n    if (cursors !== null) {\n        cursor = cursors;\n        cursors = cursors.cursor;\n        cursor.prev = prev;\n        cursor.next = next;\n        cursor.cursor = node.cursor;\n    } else {\n        cursor = {\n            prev: prev,\n            next: next,\n            cursor: node.cursor\n        };\n    }\n\n    node.cursor = cursor;\n\n    return cursor;\n}\n\nfunction releaseCursor(node) {\n    var cursor = node.cursor;\n\n    node.cursor = cursor.cursor;\n    cursor.prev = null;\n    cursor.next = null;\n    cursor.cursor = cursors;\n    cursors = cursor;\n}\n\nvar cursors = null;\nvar List = function() {\n    this.cursor = null;\n    this.head = null;\n    this.tail = null;\n};\n\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {\n    var cursor = this.cursor;\n\n    while (cursor !== null) {\n        if (cursor.prev === prevOld) {\n            cursor.prev = prevNew;\n        }\n\n        if (cursor.next === nextOld) {\n            cursor.next = nextNew;\n        }\n\n        cursor = cursor.cursor;\n    }\n};\n\nList.prototype.getSize = function() {\n    var size = 0;\n    var cursor = this.head;\n\n    while (cursor) {\n        size++;\n        cursor = cursor.next;\n    }\n\n    return size;\n};\n\nList.prototype.fromArray = function(array) {\n    var cursor = null;\n\n    this.head = null;\n\n    for (var i = 0; i < array.length; i++) {\n        var item = createItem(array[i]);\n\n        if (cursor !== null) {\n            cursor.next = item;\n        } else {\n            this.head = item;\n        }\n\n        item.prev = cursor;\n        cursor = item;\n    }\n\n    this.tail = cursor;\n\n    return this;\n};\n\nList.prototype.toArray = function() {\n    var cursor = this.head;\n    var result = [];\n\n    while (cursor) {\n        result.push(cursor.data);\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.toJSON = List.prototype.toArray;\n\nList.prototype.isEmpty = function() {\n    return this.head === null;\n};\n\nList.prototype.first = function() {\n    return this.head && this.head.data;\n};\n\nList.prototype.last = function() {\n    return this.tail && this.tail.data;\n};\n\nList.prototype.each = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.forEach = List.prototype.each;\n\nList.prototype.eachRight = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.forEachRight = List.prototype.eachRight;\n\nList.prototype.reduce = function(fn, initialValue, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n    var acc = initialValue;\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        acc = fn.call(context, acc, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n\n    return acc;\n};\n\nList.prototype.reduceRight = function(fn, initialValue, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n    var acc = initialValue;\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        acc = fn.call(context, acc, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n\n    return acc;\n};\n\nList.prototype.nextUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, start);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.prevUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, start, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.some = function(fn, context) {\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            return true;\n        }\n\n        cursor = cursor.next;\n    }\n\n    return false;\n};\n\nList.prototype.map = function(fn, context) {\n    var result = new List();\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        result.appendData(fn.call(context, cursor.data, cursor, this));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.filter = function(fn, context) {\n    var result = new List();\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            result.appendData(cursor.data);\n        }\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.clear = function() {\n    this.head = null;\n    this.tail = null;\n};\n\nList.prototype.copy = function() {\n    var result = new List();\n    var cursor = this.head;\n\n    while (cursor !== null) {\n        result.insert(createItem(cursor.data));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.prepend = function(item) {\n    //      head\n    //    ^\n    // item\n    this.updateCursors(null, item, this.head, item);\n\n    // insert to the beginning of the list\n    if (this.head !== null) {\n        // new item <- first item\n        this.head.prev = item;\n\n        // new item -> first item\n        item.next = this.head;\n    } else {\n        // if list has no head, then it also has no tail\n        // in this case tail points to the new item\n        this.tail = item;\n    }\n\n    // head always points to new item\n    this.head = item;\n\n    return this;\n};\n\nList.prototype.prependData = function(data) {\n    return this.prepend(createItem(data));\n};\n\nList.prototype.append = function(item) {\n    return this.insert(item);\n};\n\nList.prototype.appendData = function(data) {\n    return this.insert(createItem(data));\n};\n\nList.prototype.insert = function(item, before) {\n    if (before !== undefined && before !== null) {\n        // prev   before\n        //      ^\n        //     item\n        this.updateCursors(before.prev, item, before, item);\n\n        if (before.prev === null) {\n            // insert to the beginning of list\n            if (this.head !== before) {\n                throw new Error('before doesn\\'t belong to list');\n            }\n\n            // since head points to before therefore list doesn't empty\n            // no need to check tail\n            this.head = item;\n            before.prev = item;\n            item.next = before;\n\n            this.updateCursors(null, item);\n        } else {\n\n            // insert between two items\n            before.prev.next = item;\n            item.prev = before.prev;\n\n            before.prev = item;\n            item.next = before;\n        }\n    } else {\n        // tail\n        //      ^\n        //      item\n        this.updateCursors(this.tail, item, null, item);\n\n        // insert to the ending of the list\n        if (this.tail !== null) {\n            // last item -> new item\n            this.tail.next = item;\n\n            // last item <- new item\n            item.prev = this.tail;\n        } else {\n            // if list has no tail, then it also has no head\n            // in this case head points to new item\n            this.head = item;\n        }\n\n        // tail always points to new item\n        this.tail = item;\n    }\n\n    return this;\n};\n\nList.prototype.insertData = function(data, before) {\n    return this.insert(createItem(data), before);\n};\n\nList.prototype.remove = function(item) {\n    //      item\n    //       ^\n    // prev     next\n    this.updateCursors(item, item.prev, item, item.next);\n\n    if (item.prev !== null) {\n        item.prev.next = item.next;\n    } else {\n        if (this.head !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.head = item.next;\n    }\n\n    if (item.next !== null) {\n        item.next.prev = item.prev;\n    } else {\n        if (this.tail !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.tail = item.prev;\n    }\n\n    item.prev = null;\n    item.next = null;\n\n    return item;\n};\n\nList.prototype.push = function(data) {\n    this.insert(createItem(data));\n};\n\nList.prototype.pop = function() {\n    if (this.tail !== null) {\n        return this.remove(this.tail);\n    }\n};\n\nList.prototype.unshift = function(data) {\n    this.prepend(createItem(data));\n};\n\nList.prototype.shift = function() {\n    if (this.head !== null) {\n        return this.remove(this.head);\n    }\n};\n\nList.prototype.prependList = function(list) {\n    return this.insertList(list, this.head);\n};\n\nList.prototype.appendList = function(list) {\n    return this.insertList(list);\n};\n\nList.prototype.insertList = function(list, before) {\n    // ignore empty lists\n    if (list.head === null) {\n        return this;\n    }\n\n    if (before !== undefined && before !== null) {\n        this.updateCursors(before.prev, list.tail, before, list.head);\n\n        // insert in the middle of dist list\n        if (before.prev !== null) {\n            // before.prev <-> list.head\n            before.prev.next = list.head;\n            list.head.prev = before.prev;\n        } else {\n            this.head = list.head;\n        }\n\n        before.prev = list.tail;\n        list.tail.next = before;\n    } else {\n        this.updateCursors(this.tail, list.tail, null, list.head);\n\n        // insert to end of the list\n        if (this.tail !== null) {\n            // if destination list has a tail, then it also has a head,\n            // but head doesn't change\n\n            // dest tail -> source head\n            this.tail.next = list.head;\n\n            // dest tail <- source head\n            list.head.prev = this.tail;\n        } else {\n            // if list has no a tail, then it also has no a head\n            // in this case points head to new item\n            this.head = list.head;\n        }\n\n        // tail always start point to new item\n        this.tail = list.tail;\n    }\n\n    list.head = null;\n    list.tail = null;\n\n    return this;\n};\n\nList.prototype.replace = function(oldItem, newItemOrList) {\n    if ('head' in newItemOrList) {\n        this.insertList(newItemOrList, oldItem);\n    } else {\n        this.insert(newItemOrList, oldItem);\n    }\n\n    this.remove(oldItem);\n};\n\nvar List_1 = List;\n\nvar TYPE$3 = tokenizer.TYPE;\nvar WHITESPACE$1 = TYPE$3.WhiteSpace;\nvar COMMENT$1 = TYPE$3.Comment;\n\nvar sequence = function readSequence(recognizer) {\n    var children = this.createList();\n    var child = null;\n    var context = {\n        recognizer: recognizer,\n        space: null,\n        ignoreWS: false,\n        ignoreWSAfter: false\n    };\n\n    this.scanner.skipSC();\n\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case COMMENT$1:\n                this.scanner.next();\n                continue;\n\n            case WHITESPACE$1:\n                if (context.ignoreWS) {\n                    this.scanner.next();\n                } else {\n                    context.space = this.WhiteSpace();\n                }\n                continue;\n        }\n\n        child = recognizer.getNode.call(this, context);\n\n        if (child === undefined) {\n            break;\n        }\n\n        if (context.space !== null) {\n            children.push(context.space);\n            context.space = null;\n        }\n\n        children.push(child);\n\n        if (context.ignoreWSAfter) {\n            context.ignoreWSAfter = false;\n            context.ignoreWS = true;\n        } else {\n            context.ignoreWS = false;\n        }\n    }\n\n    return children;\n};\n\nvar { findWhiteSpaceStart: findWhiteSpaceStart$1, cmpStr: cmpStr$3 } = utils;\n\nvar noop = function() {};\n\nvar TYPE$4 = _const.TYPE;\nvar NAME$2 = _const.NAME;\nvar WHITESPACE$2 = TYPE$4.WhiteSpace;\nvar COMMENT$2 = TYPE$4.Comment;\nvar IDENT = TYPE$4.Ident;\nvar FUNCTION = TYPE$4.Function;\nvar URL$1 = TYPE$4.Url;\nvar HASH = TYPE$4.Hash;\nvar PERCENTAGE = TYPE$4.Percentage;\nvar NUMBER = TYPE$4.Number;\nvar NUMBERSIGN = 0x0023; // U+0023 NUMBER SIGN (#)\nvar NULL = 0;\n\nfunction createParseContext(name) {\n    return function() {\n        return this[name]();\n    };\n}\n\nfunction processConfig(config) {\n    var parserConfig = {\n        context: {},\n        scope: {},\n        atrule: {},\n        pseudo: {}\n    };\n\n    if (config.parseContext) {\n        for (var name in config.parseContext) {\n            switch (typeof config.parseContext[name]) {\n                case 'function':\n                    parserConfig.context[name] = config.parseContext[name];\n                    break;\n\n                case 'string':\n                    parserConfig.context[name] = createParseContext(config.parseContext[name]);\n                    break;\n            }\n        }\n    }\n\n    if (config.scope) {\n        for (var name in config.scope) {\n            parserConfig.scope[name] = config.scope[name];\n        }\n    }\n\n    if (config.atrule) {\n        for (var name in config.atrule) {\n            var atrule = config.atrule[name];\n\n            if (atrule.parse) {\n                parserConfig.atrule[name] = atrule.parse;\n            }\n        }\n    }\n\n    if (config.pseudo) {\n        for (var name in config.pseudo) {\n            var pseudo = config.pseudo[name];\n\n            if (pseudo.parse) {\n                parserConfig.pseudo[name] = pseudo.parse;\n            }\n        }\n    }\n\n    if (config.node) {\n        for (var name in config.node) {\n            parserConfig[name] = config.node[name].parse;\n        }\n    }\n\n    return parserConfig;\n}\n\nvar create = function createParser(config) {\n    var parser = {\n        scanner: new TokenStream_1(),\n        locationMap: new OffsetToLocation_1(),\n\n        filename: '<unknown>',\n        needPositions: false,\n        onParseError: noop,\n        onParseErrorThrow: false,\n        parseAtrulePrelude: true,\n        parseRulePrelude: true,\n        parseValue: true,\n        parseCustomProperty: false,\n\n        readSequence: sequence,\n\n        createList: function() {\n            return new List_1();\n        },\n        createSingleNodeList: function(node) {\n            return new List_1().appendData(node);\n        },\n        getFirstListNode: function(list) {\n            return list && list.first();\n        },\n        getLastListNode: function(list) {\n            return list.last();\n        },\n\n        parseWithFallback: function(consumer, fallback) {\n            var startToken = this.scanner.tokenIndex;\n\n            try {\n                return consumer.call(this);\n            } catch (e) {\n                if (this.onParseErrorThrow) {\n                    throw e;\n                }\n\n                var fallbackNode = fallback.call(this, startToken);\n\n                this.onParseErrorThrow = true;\n                this.onParseError(e, fallbackNode);\n                this.onParseErrorThrow = false;\n\n                return fallbackNode;\n            }\n        },\n\n        lookupNonWSType: function(offset) {\n            do {\n                var type = this.scanner.lookupType(offset++);\n                if (type !== WHITESPACE$2) {\n                    return type;\n                }\n            } while (type !== NULL);\n\n            return NULL;\n        },\n\n        eat: function(tokenType) {\n            if (this.scanner.tokenType !== tokenType) {\n                var offset = this.scanner.tokenStart;\n                var message = NAME$2[tokenType] + ' is expected';\n\n                // tweak message and offset\n                switch (tokenType) {\n                    case IDENT:\n                        // when identifier is expected but there is a function or url\n                        if (this.scanner.tokenType === FUNCTION || this.scanner.tokenType === URL$1) {\n                            offset = this.scanner.tokenEnd - 1;\n                            message = 'Identifier is expected but function found';\n                        } else {\n                            message = 'Identifier is expected';\n                        }\n                        break;\n\n                    case HASH:\n                        if (this.scanner.isDelim(NUMBERSIGN)) {\n                            this.scanner.next();\n                            offset++;\n                            message = 'Name is expected';\n                        }\n                        break;\n\n                    case PERCENTAGE:\n                        if (this.scanner.tokenType === NUMBER) {\n                            offset = this.scanner.tokenEnd;\n                            message = 'Percent sign is expected';\n                        }\n                        break;\n\n                    default:\n                        // when test type is part of another token show error for current position + 1\n                        // e.g. eat(HYPHENMINUS) will fail on \"-foo\", but pointing on \"-\" is odd\n                        if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === tokenType) {\n                            offset = offset + 1;\n                        }\n                }\n\n                this.error(message, offset);\n            }\n\n            this.scanner.next();\n        },\n\n        consume: function(tokenType) {\n            var value = this.scanner.getTokenValue();\n\n            this.eat(tokenType);\n\n            return value;\n        },\n        consumeFunctionName: function() {\n            var name = this.scanner.source.substring(this.scanner.tokenStart, this.scanner.tokenEnd - 1);\n\n            this.eat(FUNCTION);\n\n            return name;\n        },\n\n        getLocation: function(start, end) {\n            if (this.needPositions) {\n                return this.locationMap.getLocationRange(\n                    start,\n                    end,\n                    this.filename\n                );\n            }\n\n            return null;\n        },\n        getLocationFromList: function(list) {\n            if (this.needPositions) {\n                var head = this.getFirstListNode(list);\n                var tail = this.getLastListNode(list);\n                return this.locationMap.getLocationRange(\n                    head !== null ? head.loc.start.offset - this.locationMap.startOffset : this.scanner.tokenStart,\n                    tail !== null ? tail.loc.end.offset - this.locationMap.startOffset : this.scanner.tokenStart,\n                    this.filename\n                );\n            }\n\n            return null;\n        },\n\n        error: function(message, offset) {\n            var location = typeof offset !== 'undefined' && offset < this.scanner.source.length\n                ? this.locationMap.getLocation(offset)\n                : this.scanner.eof\n                    ? this.locationMap.getLocation(findWhiteSpaceStart$1(this.scanner.source, this.scanner.source.length - 1))\n                    : this.locationMap.getLocation(this.scanner.tokenStart);\n\n            throw new _SyntaxError(\n                message || 'Unexpected input',\n                this.scanner.source,\n                location.offset,\n                location.line,\n                location.column\n            );\n        }\n    };\n\n    config = processConfig(config || {});\n    for (var key in config) {\n        parser[key] = config[key];\n    }\n\n    return function(source, options) {\n        options = options || {};\n\n        var context = options.context || 'default';\n        var onComment = options.onComment;\n        var ast;\n\n        tokenizer(source, parser.scanner);\n        parser.locationMap.setSource(\n            source,\n            options.offset,\n            options.line,\n            options.column\n        );\n\n        parser.filename = options.filename || '<unknown>';\n        parser.needPositions = Boolean(options.positions);\n        parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop;\n        parser.onParseErrorThrow = false;\n        parser.parseAtrulePrelude = 'parseAtrulePrelude' in options ? Boolean(options.parseAtrulePrelude) : true;\n        parser.parseRulePrelude = 'parseRulePrelude' in options ? Boolean(options.parseRulePrelude) : true;\n        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;\n        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;\n\n        if (!parser.context.hasOwnProperty(context)) {\n            throw new Error('Unknown context `' + context + '`');\n        }\n\n        if (typeof onComment === 'function') {\n            parser.scanner.forEachToken((type, start, end) => {\n                if (type === COMMENT$2) {\n                    const loc = parser.getLocation(start, end);\n                    const value = cmpStr$3(source, end - 2, end, '*/')\n                        ? source.slice(start + 2, end - 2)\n                        : source.slice(start + 2, end);\n\n                    onComment(value, loc);\n                }\n            });\n        }\n\n        ast = parser.context[context].call(parser, options);\n\n        if (!parser.scanner.eof) {\n            parser.error();\n        }\n\n        return ast;\n    };\n};\n\nvar cmpChar$1 = tokenizer.cmpChar;\nvar cmpStr$4 = tokenizer.cmpStr;\nvar TYPE$5 = tokenizer.TYPE;\n\nvar IDENT$1 = TYPE$5.Ident;\nvar STRING = TYPE$5.String;\nvar NUMBER$1 = TYPE$5.Number;\nvar FUNCTION$1 = TYPE$5.Function;\nvar URL$2 = TYPE$5.Url;\nvar HASH$1 = TYPE$5.Hash;\nvar DIMENSION = TYPE$5.Dimension;\nvar PERCENTAGE$1 = TYPE$5.Percentage;\nvar LEFTPARENTHESIS = TYPE$5.LeftParenthesis;\nvar LEFTSQUAREBRACKET = TYPE$5.LeftSquareBracket;\nvar COMMA = TYPE$5.Comma;\nvar DELIM = TYPE$5.Delim;\nvar NUMBERSIGN$1 = 0x0023;  // U+0023 NUMBER SIGN (#)\nvar ASTERISK = 0x002A;    // U+002A ASTERISK (*)\nvar PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar SOLIDUS = 0x002F;     // U+002F SOLIDUS (/)\nvar U = 0x0075;           // U+0075 LATIN SMALL LETTER U (u)\n\nvar _default = function defaultRecognizer(context) {\n    switch (this.scanner.tokenType) {\n        case HASH$1:\n            return this.Hash();\n\n        case COMMA:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Operator();\n\n        case LEFTPARENTHESIS:\n            return this.Parentheses(this.readSequence, context.recognizer);\n\n        case LEFTSQUAREBRACKET:\n            return this.Brackets(this.readSequence, context.recognizer);\n\n        case STRING:\n            return this.String();\n\n        case DIMENSION:\n            return this.Dimension();\n\n        case PERCENTAGE$1:\n            return this.Percentage();\n\n        case NUMBER$1:\n            return this.Number();\n\n        case FUNCTION$1:\n            return cmpStr$4(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, 'url(')\n                ? this.Url()\n                : this.Function(this.readSequence, context.recognizer);\n\n        case URL$2:\n            return this.Url();\n\n        case IDENT$1:\n            // check for unicode range, it should start with u+ or U+\n            if (cmpChar$1(this.scanner.source, this.scanner.tokenStart, U) &&\n                cmpChar$1(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN)) {\n                return this.UnicodeRange();\n            } else {\n                return this.Identifier();\n            }\n\n        case DELIM:\n            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n\n            if (code === SOLIDUS ||\n                code === ASTERISK ||\n                code === PLUSSIGN ||\n                code === HYPHENMINUS) {\n                return this.Operator(); // TODO: replace with Delim\n            }\n\n            // TODO: produce a node with Delim node type\n\n            if (code === NUMBERSIGN$1) {\n                this.error('Hex or identifier is expected', this.scanner.tokenStart + 1);\n            }\n\n            break;\n    }\n};\n\nvar atrulePrelude = {\n    getNode: _default\n};\n\nvar TYPE$6 = tokenizer.TYPE;\n\nvar DELIM$1 = TYPE$6.Delim;\nvar IDENT$2 = TYPE$6.Ident;\nvar DIMENSION$1 = TYPE$6.Dimension;\nvar PERCENTAGE$2 = TYPE$6.Percentage;\nvar NUMBER$2 = TYPE$6.Number;\nvar HASH$2 = TYPE$6.Hash;\nvar COLON = TYPE$6.Colon;\nvar LEFTSQUAREBRACKET$1 = TYPE$6.LeftSquareBracket;\nvar NUMBERSIGN$2 = 0x0023;      // U+0023 NUMBER SIGN (#)\nvar ASTERISK$1 = 0x002A;        // U+002A ASTERISK (*)\nvar PLUSSIGN$1 = 0x002B;        // U+002B PLUS SIGN (+)\nvar SOLIDUS$1 = 0x002F;         // U+002F SOLIDUS (/)\nvar FULLSTOP = 0x002E;        // U+002E FULL STOP (.)\nvar GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)\nvar VERTICALLINE = 0x007C;    // U+007C VERTICAL LINE (|)\nvar TILDE = 0x007E;           // U+007E TILDE (~)\n\nfunction getNode(context) {\n    switch (this.scanner.tokenType) {\n        case LEFTSQUAREBRACKET$1:\n            return this.AttributeSelector();\n\n        case HASH$2:\n            return this.IdSelector();\n\n        case COLON:\n            if (this.scanner.lookupType(1) === COLON) {\n                return this.PseudoElementSelector();\n            } else {\n                return this.PseudoClassSelector();\n            }\n\n        case IDENT$2:\n            return this.TypeSelector();\n\n        case NUMBER$2:\n        case PERCENTAGE$2:\n            return this.Percentage();\n\n        case DIMENSION$1:\n            // throws when .123ident\n            if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === FULLSTOP) {\n                this.error('Identifier is expected', this.scanner.tokenStart + 1);\n            }\n            break;\n\n        case DELIM$1:\n            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n\n            switch (code) {\n                case PLUSSIGN$1:\n                case GREATERTHANSIGN:\n                case TILDE:\n                    context.space = null;\n                    context.ignoreWSAfter = true;\n                    return this.Combinator();\n\n                case SOLIDUS$1:  // /deep/\n                    return this.Combinator();\n\n                case FULLSTOP:\n                    return this.ClassSelector();\n\n                case ASTERISK$1:\n                case VERTICALLINE:\n                    return this.TypeSelector();\n\n                case NUMBERSIGN$2:\n                    return this.IdSelector();\n            }\n\n            break;\n    }\n}\nvar selector = {\n    getNode: getNode\n};\n\n// legacy IE function\n// expression( <any-value> )\nvar expression = function() {\n    return this.createSingleNodeList(\n        this.Raw(this.scanner.tokenIndex, null, false)\n    );\n};\n\nvar TYPE$7 = tokenizer.TYPE;\n\nvar WhiteSpace = TYPE$7.WhiteSpace;\nvar Semicolon = TYPE$7.Semicolon;\nvar LeftCurlyBracket = TYPE$7.LeftCurlyBracket;\nvar Delim = TYPE$7.Delim;\nvar EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)\n\nfunction getOffsetExcludeWS() {\n    if (this.scanner.tokenIndex > 0) {\n        if (this.scanner.lookupType(-1) === WhiteSpace) {\n            return this.scanner.tokenIndex > 1\n                ? this.scanner.getTokenStart(this.scanner.tokenIndex - 1)\n                : this.scanner.firstCharOffset;\n        }\n    }\n\n    return this.scanner.tokenStart;\n}\n\n// 0, 0, false\nfunction balanceEnd() {\n    return 0;\n}\n\n// LEFTCURLYBRACKET, 0, false\nfunction leftCurlyBracket(tokenType) {\n    return tokenType === LeftCurlyBracket ? 1 : 0;\n}\n\n// LEFTCURLYBRACKET, SEMICOLON, false\nfunction leftCurlyBracketOrSemicolon(tokenType) {\n    return tokenType === LeftCurlyBracket || tokenType === Semicolon ? 1 : 0;\n}\n\n// EXCLAMATIONMARK, SEMICOLON, false\nfunction exclamationMarkOrSemicolon(tokenType, source, offset) {\n    if (tokenType === Delim && source.charCodeAt(offset) === EXCLAMATIONMARK) {\n        return 1;\n    }\n\n    return tokenType === Semicolon ? 1 : 0;\n}\n\n// 0, SEMICOLON, true\nfunction semicolonIncluded(tokenType) {\n    return tokenType === Semicolon ? 2 : 0;\n}\n\nvar Raw = {\n    name: 'Raw',\n    structure: {\n        value: String\n    },\n    parse: function(startToken, mode, excludeWhiteSpace) {\n        var startOffset = this.scanner.getTokenStart(startToken);\n        var endOffset;\n\n        this.scanner.skip(\n            this.scanner.getRawLength(startToken, mode || balanceEnd)\n        );\n\n        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {\n            endOffset = getOffsetExcludeWS.call(this);\n        } else {\n            endOffset = this.scanner.tokenStart;\n        }\n\n        return {\n            type: 'Raw',\n            loc: this.getLocation(startOffset, endOffset),\n            value: this.scanner.source.substring(startOffset, endOffset)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    },\n\n    mode: {\n        default: balanceEnd,\n        leftCurlyBracket: leftCurlyBracket,\n        leftCurlyBracketOrSemicolon: leftCurlyBracketOrSemicolon,\n        exclamationMarkOrSemicolon: exclamationMarkOrSemicolon,\n        semicolonIncluded: semicolonIncluded\n    }\n};\n\nvar TYPE$8 = tokenizer.TYPE;\nvar rawMode = Raw.mode;\n\nvar COMMA$1 = TYPE$8.Comma;\nvar WHITESPACE$3 = TYPE$8.WhiteSpace;\n\n// var( <ident> , <value>? )\nvar _var = function() {\n    var children = this.createList();\n\n    this.scanner.skipSC();\n\n    // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\n    children.push(this.Identifier());\n\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === COMMA$1) {\n        children.push(this.Operator());\n\n        const startIndex = this.scanner.tokenIndex;\n        const value = this.parseCustomProperty\n            ? this.Value(null)\n            : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false);\n\n        if (value.type === 'Value' && value.children.isEmpty()) {\n            for (let offset = startIndex - this.scanner.tokenIndex; offset <= 0; offset++) {\n                if (this.scanner.lookupType(offset) === WHITESPACE$3) {\n                    value.children.appendData({\n                        type: 'WhiteSpace',\n                        loc: null,\n                        value: ' '\n                    });\n                    break;\n                }\n            }\n        }\n\n        children.push(value);\n    }\n\n    return children;\n};\n\nvar value = {\n    getNode: _default,\n    'expression': expression,\n    'var': _var\n};\n\nvar scope = {\n    AtrulePrelude: atrulePrelude,\n    Selector: selector,\n    Value: value\n};\n\nvar fontFace = {\n    parse: {\n        prelude: null,\n        block: function() {\n            return this.Block(true);\n        }\n    }\n};\n\nvar TYPE$9 = tokenizer.TYPE;\n\nvar STRING$1 = TYPE$9.String;\nvar IDENT$3 = TYPE$9.Ident;\nvar URL$3 = TYPE$9.Url;\nvar FUNCTION$2 = TYPE$9.Function;\nvar LEFTPARENTHESIS$1 = TYPE$9.LeftParenthesis;\n\nvar _import = {\n    parse: {\n        prelude: function() {\n            var children = this.createList();\n\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case STRING$1:\n                    children.push(this.String());\n                    break;\n\n                case URL$3:\n                case FUNCTION$2:\n                    children.push(this.Url());\n                    break;\n\n                default:\n                    this.error('String or url() is expected');\n            }\n\n            if (this.lookupNonWSType(0) === IDENT$3 ||\n                this.lookupNonWSType(0) === LEFTPARENTHESIS$1) {\n                children.push(this.WhiteSpace());\n                children.push(this.MediaQueryList());\n            }\n\n            return children;\n        },\n        block: null\n    }\n};\n\nvar media = {\n    parse: {\n        prelude: function() {\n            return this.createSingleNodeList(\n                this.MediaQueryList()\n            );\n        },\n        block: function() {\n            return this.Block(false);\n        }\n    }\n};\n\nvar page = {\n    parse: {\n        prelude: function() {\n            return this.createSingleNodeList(\n                this.SelectorList()\n            );\n        },\n        block: function() {\n            return this.Block(true);\n        }\n    }\n};\n\nvar TYPE$a = tokenizer.TYPE;\n\nvar WHITESPACE$4 = TYPE$a.WhiteSpace;\nvar COMMENT$3 = TYPE$a.Comment;\nvar IDENT$4 = TYPE$a.Ident;\nvar FUNCTION$3 = TYPE$a.Function;\nvar COLON$1 = TYPE$a.Colon;\nvar LEFTPARENTHESIS$2 = TYPE$a.LeftParenthesis;\n\nfunction consumeRaw() {\n    return this.createSingleNodeList(\n        this.Raw(this.scanner.tokenIndex, null, false)\n    );\n}\n\nfunction parentheses() {\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === IDENT$4 &&\n        this.lookupNonWSType(1) === COLON$1) {\n        return this.createSingleNodeList(\n            this.Declaration()\n        );\n    }\n\n    return readSequence.call(this);\n}\n\nfunction readSequence() {\n    var children = this.createList();\n    var space = null;\n    var child;\n\n    this.scanner.skipSC();\n\n    scan:\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case WHITESPACE$4:\n                space = this.WhiteSpace();\n                continue;\n\n            case COMMENT$3:\n                this.scanner.next();\n                continue;\n\n            case FUNCTION$3:\n                child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n                break;\n\n            case IDENT$4:\n                child = this.Identifier();\n                break;\n\n            case LEFTPARENTHESIS$2:\n                child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n                break;\n\n            default:\n                break scan;\n        }\n\n        if (space !== null) {\n            children.push(space);\n            space = null;\n        }\n\n        children.push(child);\n    }\n\n    return children;\n}\n\nvar supports = {\n    parse: {\n        prelude: function() {\n            var children = readSequence.call(this);\n\n            if (this.getFirstListNode(children) === null) {\n                this.error('Condition is expected');\n            }\n\n            return children;\n        },\n        block: function() {\n            return this.Block(false);\n        }\n    }\n};\n\nvar atrule = {\n    'font-face': fontFace,\n    'import': _import,\n    'media': media,\n    'page': page,\n    'supports': supports\n};\n\nvar dir = {\n    parse: function() {\n        return this.createSingleNodeList(\n            this.Identifier()\n        );\n    }\n};\n\nvar has$1 = {\n    parse: function() {\n        return this.createSingleNodeList(\n            this.SelectorList()\n        );\n    }\n};\n\nvar lang = {\n    parse: function() {\n        return this.createSingleNodeList(\n            this.Identifier()\n        );\n    }\n};\n\nvar selectorList = {\n    parse: function selectorList() {\n        return this.createSingleNodeList(\n            this.SelectorList()\n        );\n    }\n};\n\nvar matches = selectorList;\n\nvar not = selectorList;\n\nvar ALLOW_OF_CLAUSE = true;\n\nvar nthWithOfClause = {\n    parse: function nthWithOfClause() {\n        return this.createSingleNodeList(\n            this.Nth(ALLOW_OF_CLAUSE)\n        );\n    }\n};\n\nvar nthChild = nthWithOfClause;\n\nvar nthLastChild = nthWithOfClause;\n\nvar DISALLOW_OF_CLAUSE = false;\n\nvar nth = {\n    parse: function nth() {\n        return this.createSingleNodeList(\n            this.Nth(DISALLOW_OF_CLAUSE)\n        );\n    }\n};\n\nvar nthLastOfType = nth;\n\nvar nthOfType = nth;\n\nvar slotted = {\n    parse: function compoundSelector() {\n        return this.createSingleNodeList(\n            this.Selector()\n        );\n    }\n};\n\nvar pseudo = {\n    'dir': dir,\n    'has': has$1,\n    'lang': lang,\n    'matches': matches,\n    'not': not,\n    'nth-child': nthChild,\n    'nth-last-child': nthLastChild,\n    'nth-last-of-type': nthLastOfType,\n    'nth-of-type': nthOfType,\n    'slotted': slotted\n};\n\nvar cmpChar$2 = tokenizer.cmpChar;\nvar isDigit$2 = tokenizer.isDigit;\nvar TYPE$b = tokenizer.TYPE;\n\nvar WHITESPACE$5 = TYPE$b.WhiteSpace;\nvar COMMENT$4 = TYPE$b.Comment;\nvar IDENT$5 = TYPE$b.Ident;\nvar NUMBER$3 = TYPE$b.Number;\nvar DIMENSION$2 = TYPE$b.Dimension;\nvar PLUSSIGN$2 = 0x002B;    // U+002B PLUS SIGN (+)\nvar HYPHENMINUS$1 = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar N$1 = 0x006E;           // U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction checkInteger(offset, disallowSign) {\n    var pos = this.scanner.tokenStart + offset;\n    var code = this.scanner.source.charCodeAt(pos);\n\n    if (code === PLUSSIGN$2 || code === HYPHENMINUS$1) {\n        if (disallowSign) {\n            this.error('Number sign is not allowed');\n        }\n        pos++;\n    }\n\n    for (; pos < this.scanner.tokenEnd; pos++) {\n        if (!isDigit$2(this.scanner.source.charCodeAt(pos))) {\n            this.error('Integer is expected', pos);\n        }\n    }\n}\n\nfunction checkTokenIsInteger(disallowSign) {\n    return checkInteger.call(this, 0, disallowSign);\n}\n\nfunction expectCharCode(offset, code) {\n    if (!cmpChar$2(this.scanner.source, this.scanner.tokenStart + offset, code)) {\n        var msg = '';\n\n        switch (code) {\n            case N$1:\n                msg = 'N is expected';\n                break;\n            case HYPHENMINUS$1:\n                msg = 'HyphenMinus is expected';\n                break;\n        }\n\n        this.error(msg, this.scanner.tokenStart + offset);\n    }\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB() {\n    var offset = 0;\n    var sign = 0;\n    var type = this.scanner.tokenType;\n\n    while (type === WHITESPACE$5 || type === COMMENT$4) {\n        type = this.scanner.lookupType(++offset);\n    }\n\n    if (type !== NUMBER$3) {\n        if (this.scanner.isDelim(PLUSSIGN$2, offset) ||\n            this.scanner.isDelim(HYPHENMINUS$1, offset)) {\n            sign = this.scanner.isDelim(PLUSSIGN$2, offset) ? PLUSSIGN$2 : HYPHENMINUS$1;\n\n            do {\n                type = this.scanner.lookupType(++offset);\n            } while (type === WHITESPACE$5 || type === COMMENT$4);\n\n            if (type !== NUMBER$3) {\n                this.scanner.skip(offset);\n                checkTokenIsInteger.call(this, DISALLOW_SIGN);\n            }\n        } else {\n            return null;\n        }\n    }\n\n    if (offset > 0) {\n        this.scanner.skip(offset);\n    }\n\n    if (sign === 0) {\n        type = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n        if (type !== PLUSSIGN$2 && type !== HYPHENMINUS$1) {\n            this.error('Number sign is expected');\n        }\n    }\n\n    checkTokenIsInteger.call(this, sign !== 0);\n    return sign === HYPHENMINUS$1 ? '-' + this.consume(NUMBER$3) : this.consume(NUMBER$3);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nvar AnPlusB = {\n    name: 'AnPlusB',\n    structure: {\n        a: [String, null],\n        b: [String, null]\n    },\n    parse: function() {\n        /* eslint-disable brace-style*/\n        var start = this.scanner.tokenStart;\n        var a = null;\n        var b = null;\n\n        // <integer>\n        if (this.scanner.tokenType === NUMBER$3) {\n            checkTokenIsInteger.call(this, ALLOW_SIGN);\n            b = this.consume(NUMBER$3);\n        }\n\n        // -n\n        // -n <signed-integer>\n        // -n ['+' | '-'] <signless-integer>\n        // -n- <signless-integer>\n        // <dashndashdigit-ident>\n        else if (this.scanner.tokenType === IDENT$5 && cmpChar$2(this.scanner.source, this.scanner.tokenStart, HYPHENMINUS$1)) {\n            a = '-1';\n\n            expectCharCode.call(this, 1, N$1);\n\n            switch (this.scanner.getTokenLength()) {\n                // -n\n                // -n <signed-integer>\n                // -n ['+' | '-'] <signless-integer>\n                case 2:\n                    this.scanner.next();\n                    b = consumeB.call(this);\n                    break;\n\n                // -n- <signless-integer>\n                case 3:\n                    expectCharCode.call(this, 2, HYPHENMINUS$1);\n\n                    this.scanner.next();\n                    this.scanner.skipSC();\n\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n\n                    b = '-' + this.consume(NUMBER$3);\n                    break;\n\n                // <dashndashdigit-ident>\n                default:\n                    expectCharCode.call(this, 2, HYPHENMINUS$1);\n                    checkInteger.call(this, 3, DISALLOW_SIGN);\n                    this.scanner.next();\n\n                    b = this.scanner.substrToCursor(start + 2);\n            }\n        }\n\n        // '+'? n\n        // '+'? n <signed-integer>\n        // '+'? n ['+' | '-'] <signless-integer>\n        // '+'? n- <signless-integer>\n        // '+'? <ndashdigit-ident>\n        else if (this.scanner.tokenType === IDENT$5 || (this.scanner.isDelim(PLUSSIGN$2) && this.scanner.lookupType(1) === IDENT$5)) {\n            var sign = 0;\n            a = '1';\n\n            // just ignore a plus\n            if (this.scanner.isDelim(PLUSSIGN$2)) {\n                sign = 1;\n                this.scanner.next();\n            }\n\n            expectCharCode.call(this, 0, N$1);\n\n            switch (this.scanner.getTokenLength()) {\n                // '+'? n\n                // '+'? n <signed-integer>\n                // '+'? n ['+' | '-'] <signless-integer>\n                case 1:\n                    this.scanner.next();\n                    b = consumeB.call(this);\n                    break;\n\n                // '+'? n- <signless-integer>\n                case 2:\n                    expectCharCode.call(this, 1, HYPHENMINUS$1);\n\n                    this.scanner.next();\n                    this.scanner.skipSC();\n\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n\n                    b = '-' + this.consume(NUMBER$3);\n                    break;\n\n                // '+'? <ndashdigit-ident>\n                default:\n                    expectCharCode.call(this, 1, HYPHENMINUS$1);\n                    checkInteger.call(this, 2, DISALLOW_SIGN);\n                    this.scanner.next();\n\n                    b = this.scanner.substrToCursor(start + sign + 1);\n            }\n        }\n\n        // <ndashdigit-dimension>\n        // <ndash-dimension> <signless-integer>\n        // <n-dimension>\n        // <n-dimension> <signed-integer>\n        // <n-dimension> ['+' | '-'] <signless-integer>\n        else if (this.scanner.tokenType === DIMENSION$2) {\n            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n            var sign = code === PLUSSIGN$2 || code === HYPHENMINUS$1;\n\n            for (var i = this.scanner.tokenStart + sign; i < this.scanner.tokenEnd; i++) {\n                if (!isDigit$2(this.scanner.source.charCodeAt(i))) {\n                    break;\n                }\n            }\n\n            if (i === this.scanner.tokenStart + sign) {\n                this.error('Integer is expected', this.scanner.tokenStart + sign);\n            }\n\n            expectCharCode.call(this, i - this.scanner.tokenStart, N$1);\n            a = this.scanner.source.substring(start, i);\n\n            // <n-dimension>\n            // <n-dimension> <signed-integer>\n            // <n-dimension> ['+' | '-'] <signless-integer>\n            if (i + 1 === this.scanner.tokenEnd) {\n                this.scanner.next();\n                b = consumeB.call(this);\n            } else {\n                expectCharCode.call(this, i - this.scanner.tokenStart + 1, HYPHENMINUS$1);\n\n                // <ndash-dimension> <signless-integer>\n                if (i + 2 === this.scanner.tokenEnd) {\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n                    b = '-' + this.consume(NUMBER$3);\n                }\n                // <ndashdigit-dimension>\n                else {\n                    checkInteger.call(this, i - this.scanner.tokenStart + 2, DISALLOW_SIGN);\n                    this.scanner.next();\n                    b = this.scanner.substrToCursor(i + 1);\n                }\n            }\n        } else {\n            this.error();\n        }\n\n        if (a !== null && a.charCodeAt(0) === PLUSSIGN$2) {\n            a = a.substr(1);\n        }\n\n        if (b !== null && b.charCodeAt(0) === PLUSSIGN$2) {\n            b = b.substr(1);\n        }\n\n        return {\n            type: 'AnPlusB',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            a: a,\n            b: b\n        };\n    },\n    generate: function(node) {\n        var a = node.a !== null && node.a !== undefined;\n        var b = node.b !== null && node.b !== undefined;\n\n        if (a) {\n            this.chunk(\n                node.a === '+1' ? '+n' : // eslint-disable-line operator-linebreak, indent\n                node.a ===  '1' ?  'n' : // eslint-disable-line operator-linebreak, indent\n                node.a === '-1' ? '-n' : // eslint-disable-line operator-linebreak, indent\n                node.a + 'n'             // eslint-disable-line operator-linebreak, indent\n            );\n\n            if (b) {\n                b = String(node.b);\n                if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n                    this.chunk(b.charAt(0));\n                    this.chunk(b.substr(1));\n                } else {\n                    this.chunk('+');\n                    this.chunk(b);\n                }\n            }\n        } else {\n            this.chunk(String(node.b));\n        }\n    }\n};\n\nvar TYPE$c = tokenizer.TYPE;\nvar rawMode$1 = Raw.mode;\n\nvar ATKEYWORD = TYPE$c.AtKeyword;\nvar SEMICOLON = TYPE$c.Semicolon;\nvar LEFTCURLYBRACKET = TYPE$c.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE$c.RightCurlyBracket;\n\nfunction consumeRaw$1(startToken) {\n    return this.Raw(startToken, rawMode$1.leftCurlyBracketOrSemicolon, true);\n}\n\nfunction isDeclarationBlockAtrule() {\n    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {\n        if (type === RIGHTCURLYBRACKET) {\n            return true;\n        }\n\n        if (type === LEFTCURLYBRACKET ||\n            type === ATKEYWORD) {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nvar Atrule = {\n    name: 'Atrule',\n    structure: {\n        name: String,\n        prelude: ['AtrulePrelude', 'Raw', null],\n        block: ['Block', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var nameLowerCase;\n        var prelude = null;\n        var block = null;\n\n        this.eat(ATKEYWORD);\n\n        name = this.scanner.substrToCursor(start + 1);\n        nameLowerCase = name.toLowerCase();\n        this.scanner.skipSC();\n\n        // parse prelude\n        if (this.scanner.eof === false &&\n            this.scanner.tokenType !== LEFTCURLYBRACKET &&\n            this.scanner.tokenType !== SEMICOLON) {\n            if (this.parseAtrulePrelude) {\n                prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name), consumeRaw$1);\n\n                // turn empty AtrulePrelude into null\n                if (prelude.type === 'AtrulePrelude' && prelude.children.head === null) {\n                    prelude = null;\n                }\n            } else {\n                prelude = consumeRaw$1.call(this, this.scanner.tokenIndex);\n            }\n\n            this.scanner.skipSC();\n        }\n\n        switch (this.scanner.tokenType) {\n            case SEMICOLON:\n                this.scanner.next();\n                break;\n\n            case LEFTCURLYBRACKET:\n                if (this.atrule.hasOwnProperty(nameLowerCase) &&\n                    typeof this.atrule[nameLowerCase].block === 'function') {\n                    block = this.atrule[nameLowerCase].block.call(this);\n                } else {\n                    // TODO: should consume block content as Raw?\n                    block = this.Block(isDeclarationBlockAtrule.call(this));\n                }\n\n                break;\n        }\n\n        return {\n            type: 'Atrule',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            prelude: prelude,\n            block: block\n        };\n    },\n    generate: function(node) {\n        this.chunk('@');\n        this.chunk(node.name);\n\n        if (node.prelude !== null) {\n            this.chunk(' ');\n            this.node(node.prelude);\n        }\n\n        if (node.block) {\n            this.node(node.block);\n        } else {\n            this.chunk(';');\n        }\n    },\n    walkContext: 'atrule'\n};\n\nvar TYPE$d = tokenizer.TYPE;\n\nvar SEMICOLON$1 = TYPE$d.Semicolon;\nvar LEFTCURLYBRACKET$1 = TYPE$d.LeftCurlyBracket;\n\nvar AtrulePrelude = {\n    name: 'AtrulePrelude',\n    structure: {\n        children: [[]]\n    },\n    parse: function(name) {\n        var children = null;\n\n        if (name !== null) {\n            name = name.toLowerCase();\n        }\n\n        this.scanner.skipSC();\n\n        if (this.atrule.hasOwnProperty(name) &&\n            typeof this.atrule[name].prelude === 'function') {\n            // custom consumer\n            children = this.atrule[name].prelude.call(this);\n        } else {\n            // default consumer\n            children = this.readSequence(this.scope.AtrulePrelude);\n        }\n\n        this.scanner.skipSC();\n\n        if (this.scanner.eof !== true &&\n            this.scanner.tokenType !== LEFTCURLYBRACKET$1 &&\n            this.scanner.tokenType !== SEMICOLON$1) {\n            this.error('Semicolon or block is expected');\n        }\n\n        if (children === null) {\n            children = this.createList();\n        }\n\n        return {\n            type: 'AtrulePrelude',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    },\n    walkContext: 'atrulePrelude'\n};\n\nvar TYPE$e = tokenizer.TYPE;\n\nvar IDENT$6 = TYPE$e.Ident;\nvar STRING$2 = TYPE$e.String;\nvar COLON$2 = TYPE$e.Colon;\nvar LEFTSQUAREBRACKET$2 = TYPE$e.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE$e.RightSquareBracket;\nvar DOLLARSIGN = 0x0024;       // U+0024 DOLLAR SIGN ($)\nvar ASTERISK$2 = 0x002A;         // U+002A ASTERISK (*)\nvar EQUALSSIGN = 0x003D;       // U+003D EQUALS SIGN (=)\nvar CIRCUMFLEXACCENT = 0x005E; // U+005E (^)\nvar VERTICALLINE$1 = 0x007C;     // U+007C VERTICAL LINE (|)\nvar TILDE$1 = 0x007E;            // U+007E TILDE (~)\n\nfunction getAttributeName() {\n    if (this.scanner.eof) {\n        this.error('Unexpected end of input');\n    }\n\n    var start = this.scanner.tokenStart;\n    var expectIdent = false;\n    var checkColon = true;\n\n    if (this.scanner.isDelim(ASTERISK$2)) {\n        expectIdent = true;\n        checkColon = false;\n        this.scanner.next();\n    } else if (!this.scanner.isDelim(VERTICALLINE$1)) {\n        this.eat(IDENT$6);\n    }\n\n    if (this.scanner.isDelim(VERTICALLINE$1)) {\n        if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) !== EQUALSSIGN) {\n            this.scanner.next();\n            this.eat(IDENT$6);\n        } else if (expectIdent) {\n            this.error('Identifier is expected', this.scanner.tokenEnd);\n        }\n    } else if (expectIdent) {\n        this.error('Vertical line is expected');\n    }\n\n    if (checkColon && this.scanner.tokenType === COLON$2) {\n        this.scanner.next();\n        this.eat(IDENT$6);\n    }\n\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(start)\n    };\n}\n\nfunction getOperator() {\n    var start = this.scanner.tokenStart;\n    var code = this.scanner.source.charCodeAt(start);\n\n    if (code !== EQUALSSIGN &&        // =\n        code !== TILDE$1 &&             // ~=\n        code !== CIRCUMFLEXACCENT &&  // ^=\n        code !== DOLLARSIGN &&        // $=\n        code !== ASTERISK$2 &&          // *=\n        code !== VERTICALLINE$1         // |=\n    ) {\n        this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n    }\n\n    this.scanner.next();\n\n    if (code !== EQUALSSIGN) {\n        if (!this.scanner.isDelim(EQUALSSIGN)) {\n            this.error('Equal sign is expected');\n        }\n\n        this.scanner.next();\n    }\n\n    return this.scanner.substrToCursor(start);\n}\n\n// '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\nvar AttributeSelector = {\n    name: 'AttributeSelector',\n    structure: {\n        name: 'Identifier',\n        matcher: [String, null],\n        value: ['String', 'Identifier', null],\n        flags: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var matcher = null;\n        var value = null;\n        var flags = null;\n\n        this.eat(LEFTSQUAREBRACKET$2);\n        this.scanner.skipSC();\n\n        name = getAttributeName.call(this);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n            // avoid case `[name i]`\n            if (this.scanner.tokenType !== IDENT$6) {\n                matcher = getOperator.call(this);\n\n                this.scanner.skipSC();\n\n                value = this.scanner.tokenType === STRING$2\n                    ? this.String()\n                    : this.Identifier();\n\n                this.scanner.skipSC();\n            }\n\n            // attribute flags\n            if (this.scanner.tokenType === IDENT$6) {\n                flags = this.scanner.getTokenValue();\n                this.scanner.next();\n\n                this.scanner.skipSC();\n            }\n        }\n\n        this.eat(RIGHTSQUAREBRACKET);\n\n        return {\n            type: 'AttributeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            matcher: matcher,\n            value: value,\n            flags: flags\n        };\n    },\n    generate: function(node) {\n        var flagsPrefix = ' ';\n\n        this.chunk('[');\n        this.node(node.name);\n\n        if (node.matcher !== null) {\n            this.chunk(node.matcher);\n\n            if (node.value !== null) {\n                this.node(node.value);\n\n                // space between string and flags is not required\n                if (node.value.type === 'String') {\n                    flagsPrefix = '';\n                }\n            }\n        }\n\n        if (node.flags !== null) {\n            this.chunk(flagsPrefix);\n            this.chunk(node.flags);\n        }\n\n        this.chunk(']');\n    }\n};\n\nvar TYPE$f = tokenizer.TYPE;\nvar rawMode$2 = Raw.mode;\n\nvar WHITESPACE$6 = TYPE$f.WhiteSpace;\nvar COMMENT$5 = TYPE$f.Comment;\nvar SEMICOLON$2 = TYPE$f.Semicolon;\nvar ATKEYWORD$1 = TYPE$f.AtKeyword;\nvar LEFTCURLYBRACKET$2 = TYPE$f.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET$1 = TYPE$f.RightCurlyBracket;\n\nfunction consumeRaw$2(startToken) {\n    return this.Raw(startToken, null, true);\n}\nfunction consumeRule() {\n    return this.parseWithFallback(this.Rule, consumeRaw$2);\n}\nfunction consumeRawDeclaration(startToken) {\n    return this.Raw(startToken, rawMode$2.semicolonIncluded, true);\n}\nfunction consumeDeclaration() {\n    if (this.scanner.tokenType === SEMICOLON$2) {\n        return consumeRawDeclaration.call(this, this.scanner.tokenIndex);\n    }\n\n    var node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);\n\n    if (this.scanner.tokenType === SEMICOLON$2) {\n        this.scanner.next();\n    }\n\n    return node;\n}\n\nvar Block = {\n    name: 'Block',\n    structure: {\n        children: [[\n            'Atrule',\n            'Rule',\n            'Declaration'\n        ]]\n    },\n    parse: function(isDeclaration) {\n        var consumer = isDeclaration ? consumeDeclaration : consumeRule;\n\n        var start = this.scanner.tokenStart;\n        var children = this.createList();\n\n        this.eat(LEFTCURLYBRACKET$2);\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case RIGHTCURLYBRACKET$1:\n                    break scan;\n\n                case WHITESPACE$6:\n                case COMMENT$5:\n                    this.scanner.next();\n                    break;\n\n                case ATKEYWORD$1:\n                    children.push(this.parseWithFallback(this.Atrule, consumeRaw$2));\n                    break;\n\n                default:\n                    children.push(consumer.call(this));\n            }\n        }\n\n        if (!this.scanner.eof) {\n            this.eat(RIGHTCURLYBRACKET$1);\n        }\n\n        return {\n            type: 'Block',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk('{');\n        this.children(node, function(prev) {\n            if (prev.type === 'Declaration') {\n                this.chunk(';');\n            }\n        });\n        this.chunk('}');\n    },\n    walkContext: 'block'\n};\n\nvar TYPE$g = tokenizer.TYPE;\n\nvar LEFTSQUAREBRACKET$3 = TYPE$g.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET$1 = TYPE$g.RightSquareBracket;\n\nvar Brackets = {\n    name: 'Brackets',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.eat(LEFTSQUAREBRACKET$3);\n\n        children = readSequence.call(this, recognizer);\n\n        if (!this.scanner.eof) {\n            this.eat(RIGHTSQUAREBRACKET$1);\n        }\n\n        return {\n            type: 'Brackets',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk('[');\n        this.children(node);\n        this.chunk(']');\n    }\n};\n\nvar CDC = tokenizer.TYPE.CDC;\n\nvar CDC_1 = {\n    name: 'CDC',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.eat(CDC); // -->\n\n        return {\n            type: 'CDC',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function() {\n        this.chunk('-->');\n    }\n};\n\nvar CDO = tokenizer.TYPE.CDO;\n\nvar CDO_1 = {\n    name: 'CDO',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.eat(CDO); // <!--\n\n        return {\n            type: 'CDO',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function() {\n        this.chunk('<!--');\n    }\n};\n\nvar TYPE$h = tokenizer.TYPE;\n\nvar IDENT$7 = TYPE$h.Ident;\nvar FULLSTOP$1 = 0x002E; // U+002E FULL STOP (.)\n\n// '.' ident\nvar ClassSelector = {\n    name: 'ClassSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        if (!this.scanner.isDelim(FULLSTOP$1)) {\n            this.error('Full stop is expected');\n        }\n\n        this.scanner.next();\n\n        return {\n            type: 'ClassSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.consume(IDENT$7)\n        };\n    },\n    generate: function(node) {\n        this.chunk('.');\n        this.chunk(node.name);\n    }\n};\n\nvar TYPE$i = tokenizer.TYPE;\n\nvar IDENT$8 = TYPE$i.Ident;\nvar PLUSSIGN$3 = 0x002B;        // U+002B PLUS SIGN (+)\nvar SOLIDUS$2 = 0x002F;         // U+002F SOLIDUS (/)\nvar GREATERTHANSIGN$1 = 0x003E; // U+003E GREATER-THAN SIGN (>)\nvar TILDE$2 = 0x007E;           // U+007E TILDE (~)\n\n// + | > | ~ | /deep/\nvar Combinator = {\n    name: 'Combinator',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n\n        switch (code) {\n            case GREATERTHANSIGN$1:\n            case PLUSSIGN$3:\n            case TILDE$2:\n                this.scanner.next();\n                break;\n\n            case SOLIDUS$2:\n                this.scanner.next();\n\n                if (this.scanner.tokenType !== IDENT$8 || this.scanner.lookupValue(0, 'deep') === false) {\n                    this.error('Identifier `deep` is expected');\n                }\n\n                this.scanner.next();\n\n                if (!this.scanner.isDelim(SOLIDUS$2)) {\n                    this.error('Solidus is expected');\n                }\n\n                this.scanner.next();\n                break;\n\n            default:\n                this.error('Combinator is expected');\n        }\n\n        return {\n            type: 'Combinator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n    }\n};\n\nvar TYPE$j = tokenizer.TYPE;\n\nvar COMMENT$6 = TYPE$j.Comment;\nvar ASTERISK$3 = 0x002A;        // U+002A ASTERISK (*)\nvar SOLIDUS$3 = 0x002F;         // U+002F SOLIDUS (/)\n\n// '/*' .* '*/'\nvar Comment = {\n    name: 'Comment',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = this.scanner.tokenEnd;\n\n        this.eat(COMMENT$6);\n\n        if ((end - start + 2) >= 2 &&\n            this.scanner.source.charCodeAt(end - 2) === ASTERISK$3 &&\n            this.scanner.source.charCodeAt(end - 1) === SOLIDUS$3) {\n            end -= 2;\n        }\n\n        return {\n            type: 'Comment',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.source.substring(start + 2, end)\n        };\n    },\n    generate: function(node) {\n        this.chunk('/*');\n        this.chunk(node.value);\n        this.chunk('*/');\n    }\n};\n\nvar hasOwnProperty$1 = Object.prototype.hasOwnProperty;\nvar keywords$2 = Object.create(null);\nvar properties = Object.create(null);\nvar HYPHENMINUS$2 = 45; // '-'.charCodeAt()\n\nfunction isCustomProperty(str, offset) {\n    offset = offset || 0;\n\n    return str.length - offset >= 2 &&\n           str.charCodeAt(offset) === HYPHENMINUS$2 &&\n           str.charCodeAt(offset + 1) === HYPHENMINUS$2;\n}\n\nfunction getVendorPrefix(str, offset) {\n    offset = offset || 0;\n\n    // verdor prefix should be at least 3 chars length\n    if (str.length - offset >= 3) {\n        // vendor prefix starts with hyper minus following non-hyper minus\n        if (str.charCodeAt(offset) === HYPHENMINUS$2 &&\n            str.charCodeAt(offset + 1) !== HYPHENMINUS$2) {\n            // vendor prefix should contain a hyper minus at the ending\n            var secondDashIndex = str.indexOf('-', offset + 2);\n\n            if (secondDashIndex !== -1) {\n                return str.substring(offset, secondDashIndex + 1);\n            }\n        }\n    }\n\n    return '';\n}\n\nfunction getKeywordDescriptor(keyword) {\n    if (hasOwnProperty$1.call(keywords$2, keyword)) {\n        return keywords$2[keyword];\n    }\n\n    var name = keyword.toLowerCase();\n\n    if (hasOwnProperty$1.call(keywords$2, name)) {\n        return keywords$2[keyword] = keywords$2[name];\n    }\n\n    var custom = isCustomProperty(name, 0);\n    var vendor = !custom ? getVendorPrefix(name, 0) : '';\n\n    return keywords$2[keyword] = Object.freeze({\n        basename: name.substr(vendor.length),\n        name: name,\n        vendor: vendor,\n        prefix: vendor,\n        custom: custom\n    });\n}\n\nfunction getPropertyDescriptor(property) {\n    if (hasOwnProperty$1.call(properties, property)) {\n        return properties[property];\n    }\n\n    var name = property;\n    var hack = property[0];\n\n    if (hack === '/') {\n        hack = property[1] === '/' ? '//' : '/';\n    } else if (hack !== '_' &&\n               hack !== '*' &&\n               hack !== '$' &&\n               hack !== '#' &&\n               hack !== '+' &&\n               hack !== '&') {\n        hack = '';\n    }\n\n    var custom = isCustomProperty(name, hack.length);\n\n    // re-use result when possible (the same as for lower case)\n    if (!custom) {\n        name = name.toLowerCase();\n        if (hasOwnProperty$1.call(properties, name)) {\n            return properties[property] = properties[name];\n        }\n    }\n\n    var vendor = !custom ? getVendorPrefix(name, hack.length) : '';\n    var prefix = name.substr(0, hack.length + vendor.length);\n\n    return properties[property] = Object.freeze({\n        basename: name.substr(prefix.length),\n        name: name.substr(hack.length),\n        hack: hack,\n        vendor: vendor,\n        prefix: prefix,\n        custom: custom\n    });\n}\n\nvar names = {\n    keyword: getKeywordDescriptor,\n    property: getPropertyDescriptor,\n    isCustomProperty: isCustomProperty,\n    vendorPrefix: getVendorPrefix\n};\n\nvar isCustomProperty$1 = names.isCustomProperty;\nvar TYPE$k = tokenizer.TYPE;\nvar rawMode$3 = Raw.mode;\n\nvar IDENT$9 = TYPE$k.Ident;\nvar HASH$3 = TYPE$k.Hash;\nvar COLON$3 = TYPE$k.Colon;\nvar SEMICOLON$3 = TYPE$k.Semicolon;\nvar DELIM$2 = TYPE$k.Delim;\nvar WHITESPACE$7 = TYPE$k.WhiteSpace;\nvar EXCLAMATIONMARK$1 = 0x0021; // U+0021 EXCLAMATION MARK (!)\nvar NUMBERSIGN$3 = 0x0023;      // U+0023 NUMBER SIGN (#)\nvar DOLLARSIGN$1 = 0x0024;      // U+0024 DOLLAR SIGN ($)\nvar AMPERSAND = 0x0026;       // U+0026 ANPERSAND (&)\nvar ASTERISK$4 = 0x002A;        // U+002A ASTERISK (*)\nvar PLUSSIGN$4 = 0x002B;        // U+002B PLUS SIGN (+)\nvar SOLIDUS$4 = 0x002F;         // U+002F SOLIDUS (/)\n\nfunction consumeValueRaw(startToken) {\n    return this.Raw(startToken, rawMode$3.exclamationMarkOrSemicolon, true);\n}\n\nfunction consumeCustomPropertyRaw(startToken) {\n    return this.Raw(startToken, rawMode$3.exclamationMarkOrSemicolon, false);\n}\n\nfunction consumeValue() {\n    var startValueToken = this.scanner.tokenIndex;\n    var value = this.Value();\n\n    if (value.type !== 'Raw' &&\n        this.scanner.eof === false &&\n        this.scanner.tokenType !== SEMICOLON$3 &&\n        this.scanner.isDelim(EXCLAMATIONMARK$1) === false &&\n        this.scanner.isBalanceEdge(startValueToken) === false) {\n        this.error();\n    }\n\n    return value;\n}\n\nvar Declaration = {\n    name: 'Declaration',\n    structure: {\n        important: [Boolean, String],\n        property: String,\n        value: ['Value', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var startToken = this.scanner.tokenIndex;\n        var property = readProperty.call(this);\n        var customProperty = isCustomProperty$1(property);\n        var parseValue = customProperty ? this.parseCustomProperty : this.parseValue;\n        var consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;\n        var important = false;\n        var value;\n\n        this.scanner.skipSC();\n        this.eat(COLON$3);\n\n        const valueStart = this.scanner.tokenIndex;\n\n        if (!customProperty) {\n            this.scanner.skipSC();\n        }\n\n        if (parseValue) {\n            value = this.parseWithFallback(consumeValue, consumeRaw);\n        } else {\n            value = consumeRaw.call(this, this.scanner.tokenIndex);\n        }\n\n        if (customProperty && value.type === 'Value' && value.children.isEmpty()) {\n            for (let offset = valueStart - this.scanner.tokenIndex; offset <= 0; offset++) {\n                if (this.scanner.lookupType(offset) === WHITESPACE$7) {\n                    value.children.appendData({\n                        type: 'WhiteSpace',\n                        loc: null,\n                        value: ' '\n                    });\n                    break;\n                }\n            }\n        }\n\n        if (this.scanner.isDelim(EXCLAMATIONMARK$1)) {\n            important = getImportant.call(this);\n            this.scanner.skipSC();\n        }\n\n        // Do not include semicolon to range per spec\n        // https://drafts.csswg.org/css-syntax/#declaration-diagram\n\n        if (this.scanner.eof === false &&\n            this.scanner.tokenType !== SEMICOLON$3 &&\n            this.scanner.isBalanceEdge(startToken) === false) {\n            this.error();\n        }\n\n        return {\n            type: 'Declaration',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            important: important,\n            property: property,\n            value: value\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.property);\n        this.chunk(':');\n        this.node(node.value);\n\n        if (node.important) {\n            this.chunk(node.important === true ? '!important' : '!' + node.important);\n        }\n    },\n    walkContext: 'declaration'\n};\n\nfunction readProperty() {\n    var start = this.scanner.tokenStart;\n\n    // hacks\n    if (this.scanner.tokenType === DELIM$2) {\n        switch (this.scanner.source.charCodeAt(this.scanner.tokenStart)) {\n            case ASTERISK$4:\n            case DOLLARSIGN$1:\n            case PLUSSIGN$4:\n            case NUMBERSIGN$3:\n            case AMPERSAND:\n                this.scanner.next();\n                break;\n\n            // TODO: not sure we should support this hack\n            case SOLIDUS$4:\n                this.scanner.next();\n                if (this.scanner.isDelim(SOLIDUS$4)) {\n                    this.scanner.next();\n                }\n                break;\n        }\n    }\n\n    if (this.scanner.tokenType === HASH$3) {\n        this.eat(HASH$3);\n    } else {\n        this.eat(IDENT$9);\n    }\n\n    return this.scanner.substrToCursor(start);\n}\n\n// ! ws* important\nfunction getImportant() {\n    this.eat(DELIM$2);\n    this.scanner.skipSC();\n\n    var important = this.consume(IDENT$9);\n\n    // store original value in case it differ from `important`\n    // for better original source restoring and hacks like `!ie` support\n    return important === 'important' ? true : important;\n}\n\nvar TYPE$l = tokenizer.TYPE;\nvar rawMode$4 = Raw.mode;\n\nvar WHITESPACE$8 = TYPE$l.WhiteSpace;\nvar COMMENT$7 = TYPE$l.Comment;\nvar SEMICOLON$4 = TYPE$l.Semicolon;\n\nfunction consumeRaw$3(startToken) {\n    return this.Raw(startToken, rawMode$4.semicolonIncluded, true);\n}\n\nvar DeclarationList = {\n    name: 'DeclarationList',\n    structure: {\n        children: [[\n            'Declaration'\n        ]]\n    },\n    parse: function() {\n        var children = this.createList();\n\n        \n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE$8:\n                case COMMENT$7:\n                case SEMICOLON$4:\n                    this.scanner.next();\n                    break;\n\n                default:\n                    children.push(this.parseWithFallback(this.Declaration, consumeRaw$3));\n            }\n        }\n\n        return {\n            type: 'DeclarationList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node, function(prev) {\n            if (prev.type === 'Declaration') {\n                this.chunk(';');\n            }\n        });\n    }\n};\n\nvar consumeNumber$2 = utils.consumeNumber;\nvar TYPE$m = tokenizer.TYPE;\n\nvar DIMENSION$3 = TYPE$m.Dimension;\n\nvar Dimension = {\n    name: 'Dimension',\n    structure: {\n        value: String,\n        unit: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var numberEnd = consumeNumber$2(this.scanner.source, start);\n\n        this.eat(DIMENSION$3);\n\n        return {\n            type: 'Dimension',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.source.substring(start, numberEnd),\n            unit: this.scanner.source.substring(numberEnd, this.scanner.tokenStart)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n        this.chunk(node.unit);\n    }\n};\n\nvar TYPE$n = tokenizer.TYPE;\n\nvar RIGHTPARENTHESIS = TYPE$n.RightParenthesis;\n\n// <function-token> <sequence> )\nvar _Function = {\n    name: 'Function',\n    structure: {\n        name: String,\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var name = this.consumeFunctionName();\n        var nameLowerCase = name.toLowerCase();\n        var children;\n\n        children = recognizer.hasOwnProperty(nameLowerCase)\n            ? recognizer[nameLowerCase].call(this, recognizer)\n            : readSequence.call(this, recognizer);\n\n        if (!this.scanner.eof) {\n            this.eat(RIGHTPARENTHESIS);\n        }\n\n        return {\n            type: 'Function',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n        this.chunk('(');\n        this.children(node);\n        this.chunk(')');\n    },\n    walkContext: 'function'\n};\n\nvar TYPE$o = tokenizer.TYPE;\n\nvar HASH$4 = TYPE$o.Hash;\n\n// '#' ident\nvar Hash = {\n    name: 'Hash',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.eat(HASH$4);\n\n        return {\n            type: 'Hash',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start + 1)\n        };\n    },\n    generate: function(node) {\n        this.chunk('#');\n        this.chunk(node.value);\n    }\n};\n\nvar TYPE$p = tokenizer.TYPE;\n\nvar IDENT$a = TYPE$p.Ident;\n\nvar Identifier = {\n    name: 'Identifier',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        return {\n            type: 'Identifier',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            name: this.consume(IDENT$a)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n    }\n};\n\nvar TYPE$q = tokenizer.TYPE;\n\nvar HASH$5 = TYPE$q.Hash;\n\n// <hash-token>\nvar IdSelector = {\n    name: 'IdSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        // TODO: check value is an ident\n        this.eat(HASH$5);\n\n        return {\n            type: 'IdSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start + 1)\n        };\n    },\n    generate: function(node) {\n        this.chunk('#');\n        this.chunk(node.name);\n    }\n};\n\nvar TYPE$r = tokenizer.TYPE;\n\nvar IDENT$b = TYPE$r.Ident;\nvar NUMBER$4 = TYPE$r.Number;\nvar DIMENSION$4 = TYPE$r.Dimension;\nvar LEFTPARENTHESIS$3 = TYPE$r.LeftParenthesis;\nvar RIGHTPARENTHESIS$1 = TYPE$r.RightParenthesis;\nvar COLON$4 = TYPE$r.Colon;\nvar DELIM$3 = TYPE$r.Delim;\n\nvar MediaFeature = {\n    name: 'MediaFeature',\n    structure: {\n        name: String,\n        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var value = null;\n\n        this.eat(LEFTPARENTHESIS$3);\n        this.scanner.skipSC();\n\n        name = this.consume(IDENT$b);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTPARENTHESIS$1) {\n            this.eat(COLON$4);\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case NUMBER$4:\n                    if (this.lookupNonWSType(1) === DELIM$3) {\n                        value = this.Ratio();\n                    } else {\n                        value = this.Number();\n                    }\n\n                    break;\n\n                case DIMENSION$4:\n                    value = this.Dimension();\n                    break;\n\n                case IDENT$b:\n                    value = this.Identifier();\n\n                    break;\n\n                default:\n                    this.error('Number, dimension, ratio or identifier is expected');\n            }\n\n            this.scanner.skipSC();\n        }\n\n        this.eat(RIGHTPARENTHESIS$1);\n\n        return {\n            type: 'MediaFeature',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            value: value\n        };\n    },\n    generate: function(node) {\n        this.chunk('(');\n        this.chunk(node.name);\n        if (node.value !== null) {\n            this.chunk(':');\n            this.node(node.value);\n        }\n        this.chunk(')');\n    }\n};\n\nvar TYPE$s = tokenizer.TYPE;\n\nvar WHITESPACE$9 = TYPE$s.WhiteSpace;\nvar COMMENT$8 = TYPE$s.Comment;\nvar IDENT$c = TYPE$s.Ident;\nvar LEFTPARENTHESIS$4 = TYPE$s.LeftParenthesis;\n\nvar MediaQuery = {\n    name: 'MediaQuery',\n    structure: {\n        children: [[\n            'Identifier',\n            'MediaFeature',\n            'WhiteSpace'\n        ]]\n    },\n    parse: function() {\n        this.scanner.skipSC();\n\n        var children = this.createList();\n        var child = null;\n        var space = null;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case COMMENT$8:\n                    this.scanner.next();\n                    continue;\n\n                case WHITESPACE$9:\n                    space = this.WhiteSpace();\n                    continue;\n\n                case IDENT$c:\n                    child = this.Identifier();\n                    break;\n\n                case LEFTPARENTHESIS$4:\n                    child = this.MediaFeature();\n                    break;\n\n                default:\n                    break scan;\n            }\n\n            if (space !== null) {\n                children.push(space);\n                space = null;\n            }\n\n            children.push(child);\n        }\n\n        if (child === null) {\n            this.error('Identifier or parenthesis is expected');\n        }\n\n        return {\n            type: 'MediaQuery',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    }\n};\n\nvar COMMA$2 = tokenizer.TYPE.Comma;\n\nvar MediaQueryList = {\n    name: 'MediaQueryList',\n    structure: {\n        children: [[\n            'MediaQuery'\n        ]]\n    },\n    parse: function(relative) {\n        var children = this.createList();\n\n        this.scanner.skipSC();\n\n        while (!this.scanner.eof) {\n            children.push(this.MediaQuery(relative));\n\n            if (this.scanner.tokenType !== COMMA$2) {\n                break;\n            }\n\n            this.scanner.next();\n        }\n\n        return {\n            type: 'MediaQueryList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node, function() {\n            this.chunk(',');\n        });\n    }\n};\n\nvar Nth = {\n    name: 'Nth',\n    structure: {\n        nth: ['AnPlusB', 'Identifier'],\n        selector: ['SelectorList', null]\n    },\n    parse: function(allowOfClause) {\n        this.scanner.skipSC();\n\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var selector = null;\n        var query;\n\n        if (this.scanner.lookupValue(0, 'odd') || this.scanner.lookupValue(0, 'even')) {\n            query = this.Identifier();\n        } else {\n            query = this.AnPlusB();\n        }\n\n        this.scanner.skipSC();\n\n        if (allowOfClause && this.scanner.lookupValue(0, 'of')) {\n            this.scanner.next();\n\n            selector = this.SelectorList();\n\n            if (this.needPositions) {\n                end = this.getLastListNode(selector.children).loc.end.offset;\n            }\n        } else {\n            if (this.needPositions) {\n                end = query.loc.end.offset;\n            }\n        }\n\n        return {\n            type: 'Nth',\n            loc: this.getLocation(start, end),\n            nth: query,\n            selector: selector\n        };\n    },\n    generate: function(node) {\n        this.node(node.nth);\n        if (node.selector !== null) {\n            this.chunk(' of ');\n            this.node(node.selector);\n        }\n    }\n};\n\nvar NUMBER$5 = tokenizer.TYPE.Number;\n\nvar _Number = {\n    name: 'Number',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'Number',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.consume(NUMBER$5)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n\n// '/' | '*' | ',' | ':' | '+' | '-'\nvar Operator = {\n    name: 'Operator',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next();\n\n        return {\n            type: 'Operator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n\nvar TYPE$t = tokenizer.TYPE;\n\nvar LEFTPARENTHESIS$5 = TYPE$t.LeftParenthesis;\nvar RIGHTPARENTHESIS$2 = TYPE$t.RightParenthesis;\n\nvar Parentheses = {\n    name: 'Parentheses',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.eat(LEFTPARENTHESIS$5);\n\n        children = readSequence.call(this, recognizer);\n\n        if (!this.scanner.eof) {\n            this.eat(RIGHTPARENTHESIS$2);\n        }\n\n        return {\n            type: 'Parentheses',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk('(');\n        this.children(node);\n        this.chunk(')');\n    }\n};\n\nvar consumeNumber$3 = utils.consumeNumber;\nvar TYPE$u = tokenizer.TYPE;\n\nvar PERCENTAGE$3 = TYPE$u.Percentage;\n\nvar Percentage = {\n    name: 'Percentage',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var numberEnd = consumeNumber$3(this.scanner.source, start);\n\n        this.eat(PERCENTAGE$3);\n\n        return {\n            type: 'Percentage',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.source.substring(start, numberEnd)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n        this.chunk('%');\n    }\n};\n\nvar TYPE$v = tokenizer.TYPE;\n\nvar IDENT$d = TYPE$v.Ident;\nvar FUNCTION$4 = TYPE$v.Function;\nvar COLON$5 = TYPE$v.Colon;\nvar RIGHTPARENTHESIS$3 = TYPE$v.RightParenthesis;\n\n// : [ <ident> | <function-token> <any-value>? ) ]\nvar PseudoClassSelector = {\n    name: 'PseudoClassSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.eat(COLON$5);\n\n        if (this.scanner.tokenType === FUNCTION$4) {\n            name = this.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = this.createList();\n                children.push(\n                    this.Raw(this.scanner.tokenIndex, null, false)\n                );\n            }\n\n            this.eat(RIGHTPARENTHESIS$3);\n        } else {\n            name = this.consume(IDENT$d);\n        }\n\n        return {\n            type: 'PseudoClassSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk(':');\n        this.chunk(node.name);\n\n        if (node.children !== null) {\n            this.chunk('(');\n            this.children(node);\n            this.chunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n\nvar TYPE$w = tokenizer.TYPE;\n\nvar IDENT$e = TYPE$w.Ident;\nvar FUNCTION$5 = TYPE$w.Function;\nvar COLON$6 = TYPE$w.Colon;\nvar RIGHTPARENTHESIS$4 = TYPE$w.RightParenthesis;\n\n// :: [ <ident> | <function-token> <any-value>? ) ]\nvar PseudoElementSelector = {\n    name: 'PseudoElementSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.eat(COLON$6);\n        this.eat(COLON$6);\n\n        if (this.scanner.tokenType === FUNCTION$5) {\n            name = this.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = this.createList();\n                children.push(\n                    this.Raw(this.scanner.tokenIndex, null, false)\n                );\n            }\n\n            this.eat(RIGHTPARENTHESIS$4);\n        } else {\n            name = this.consume(IDENT$e);\n        }\n\n        return {\n            type: 'PseudoElementSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk('::');\n        this.chunk(node.name);\n\n        if (node.children !== null) {\n            this.chunk('(');\n            this.children(node);\n            this.chunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n\nvar isDigit$3 = tokenizer.isDigit;\nvar TYPE$x = tokenizer.TYPE;\n\nvar NUMBER$6 = TYPE$x.Number;\nvar DELIM$4 = TYPE$x.Delim;\nvar SOLIDUS$5 = 0x002F;  // U+002F SOLIDUS (/)\nvar FULLSTOP$2 = 0x002E; // U+002E FULL STOP (.)\n\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\nfunction consumeNumber$4() {\n    this.scanner.skipWS();\n\n    var value = this.consume(NUMBER$6);\n\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        if (!isDigit$3(code) && code !== FULLSTOP$2) {\n            this.error('Unsigned number is expected', this.scanner.tokenStart - value.length + i);\n        }\n    }\n\n    if (Number(value) === 0) {\n        this.error('Zero number is not allowed', this.scanner.tokenStart - value.length);\n    }\n\n    return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nvar Ratio = {\n    name: 'Ratio',\n    structure: {\n        left: String,\n        right: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var left = consumeNumber$4.call(this);\n        var right;\n\n        this.scanner.skipWS();\n\n        if (!this.scanner.isDelim(SOLIDUS$5)) {\n            this.error('Solidus is expected');\n        }\n        this.eat(DELIM$4);\n        right = consumeNumber$4.call(this);\n\n        return {\n            type: 'Ratio',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            left: left,\n            right: right\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.left);\n        this.chunk('/');\n        this.chunk(node.right);\n    }\n};\n\nvar TYPE$y = tokenizer.TYPE;\nvar rawMode$5 = Raw.mode;\n\nvar LEFTCURLYBRACKET$3 = TYPE$y.LeftCurlyBracket;\n\nfunction consumeRaw$4(startToken) {\n    return this.Raw(startToken, rawMode$5.leftCurlyBracket, true);\n}\n\nfunction consumePrelude() {\n    var prelude = this.SelectorList();\n\n    if (prelude.type !== 'Raw' &&\n        this.scanner.eof === false &&\n        this.scanner.tokenType !== LEFTCURLYBRACKET$3) {\n        this.error();\n    }\n\n    return prelude;\n}\n\nvar Rule = {\n    name: 'Rule',\n    structure: {\n        prelude: ['SelectorList', 'Raw'],\n        block: ['Block']\n    },\n    parse: function() {\n        var startToken = this.scanner.tokenIndex;\n        var startOffset = this.scanner.tokenStart;\n        var prelude;\n        var block;\n\n        if (this.parseRulePrelude) {\n            prelude = this.parseWithFallback(consumePrelude, consumeRaw$4);\n        } else {\n            prelude = consumeRaw$4.call(this, startToken);\n        }\n\n        block = this.Block(true);\n\n        return {\n            type: 'Rule',\n            loc: this.getLocation(startOffset, this.scanner.tokenStart),\n            prelude: prelude,\n            block: block\n        };\n    },\n    generate: function(node) {\n        this.node(node.prelude);\n        this.node(node.block);\n    },\n    walkContext: 'rule'\n};\n\nvar Selector = {\n    name: 'Selector',\n    structure: {\n        children: [[\n            'TypeSelector',\n            'IdSelector',\n            'ClassSelector',\n            'AttributeSelector',\n            'PseudoClassSelector',\n            'PseudoElementSelector',\n            'Combinator',\n            'WhiteSpace'\n        ]]\n    },\n    parse: function() {\n        var children = this.readSequence(this.scope.Selector);\n\n        // nothing were consumed\n        if (this.getFirstListNode(children) === null) {\n            this.error('Selector is expected');\n        }\n\n        return {\n            type: 'Selector',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    }\n};\n\nvar TYPE$z = tokenizer.TYPE;\n\nvar COMMA$3 = TYPE$z.Comma;\n\nvar SelectorList = {\n    name: 'SelectorList',\n    structure: {\n        children: [[\n            'Selector',\n            'Raw'\n        ]]\n    },\n    parse: function() {\n        var children = this.createList();\n\n        while (!this.scanner.eof) {\n            children.push(this.Selector());\n\n            if (this.scanner.tokenType === COMMA$3) {\n                this.scanner.next();\n                continue;\n            }\n\n            break;\n        }\n\n        return {\n            type: 'SelectorList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node, function() {\n            this.chunk(',');\n        });\n    },\n    walkContext: 'selector'\n};\n\nvar STRING$3 = tokenizer.TYPE.String;\n\nvar _String = {\n    name: 'String',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'String',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.consume(STRING$3)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n\nvar TYPE$A = tokenizer.TYPE;\n\nvar WHITESPACE$a = TYPE$A.WhiteSpace;\nvar COMMENT$9 = TYPE$A.Comment;\nvar ATKEYWORD$2 = TYPE$A.AtKeyword;\nvar CDO$1 = TYPE$A.CDO;\nvar CDC$1 = TYPE$A.CDC;\nvar EXCLAMATIONMARK$2 = 0x0021; // U+0021 EXCLAMATION MARK (!)\n\nfunction consumeRaw$5(startToken) {\n    return this.Raw(startToken, null, false);\n}\n\nvar StyleSheet = {\n    name: 'StyleSheet',\n    structure: {\n        children: [[\n            'Comment',\n            'CDO',\n            'CDC',\n            'Atrule',\n            'Rule',\n            'Raw'\n        ]]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = this.createList();\n        var child;\n\n        \n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE$a:\n                    this.scanner.next();\n                    continue;\n\n                case COMMENT$9:\n                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level\n                    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK$2) {\n                        this.scanner.next();\n                        continue;\n                    }\n\n                    child = this.Comment();\n                    break;\n\n                case CDO$1: // <!--\n                    child = this.CDO();\n                    break;\n\n                case CDC$1: // -->\n                    child = this.CDC();\n                    break;\n\n                // CSS Syntax Module Level 3\n                // §2.2 Error handling\n                // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n                case ATKEYWORD$2:\n                    child = this.parseWithFallback(this.Atrule, consumeRaw$5);\n                    break;\n\n                // Anything else starts a qualified rule ...\n                default:\n                    child = this.parseWithFallback(this.Rule, consumeRaw$5);\n            }\n\n            children.push(child);\n        }\n\n        return {\n            type: 'StyleSheet',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    },\n    walkContext: 'stylesheet'\n};\n\nvar TYPE$B = tokenizer.TYPE;\n\nvar IDENT$f = TYPE$B.Ident;\nvar ASTERISK$5 = 0x002A;     // U+002A ASTERISK (*)\nvar VERTICALLINE$2 = 0x007C; // U+007C VERTICAL LINE (|)\n\nfunction eatIdentifierOrAsterisk() {\n    if (this.scanner.tokenType !== IDENT$f &&\n        this.scanner.isDelim(ASTERISK$5) === false) {\n        this.error('Identifier or asterisk is expected');\n    }\n\n    this.scanner.next();\n}\n\n// ident\n// ident|ident\n// ident|*\n// *\n// *|ident\n// *|*\n// |ident\n// |*\nvar TypeSelector = {\n    name: 'TypeSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        if (this.scanner.isDelim(VERTICALLINE$2)) {\n            this.scanner.next();\n            eatIdentifierOrAsterisk.call(this);\n        } else {\n            eatIdentifierOrAsterisk.call(this);\n\n            if (this.scanner.isDelim(VERTICALLINE$2)) {\n                this.scanner.next();\n                eatIdentifierOrAsterisk.call(this);\n            }\n        }\n\n        return {\n            type: 'TypeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n    }\n};\n\nvar isHexDigit$3 = tokenizer.isHexDigit;\nvar cmpChar$3 = tokenizer.cmpChar;\nvar TYPE$C = tokenizer.TYPE;\nvar NAME$3 = tokenizer.NAME;\n\nvar IDENT$g = TYPE$C.Ident;\nvar NUMBER$7 = TYPE$C.Number;\nvar DIMENSION$5 = TYPE$C.Dimension;\nvar PLUSSIGN$5 = 0x002B;     // U+002B PLUS SIGN (+)\nvar HYPHENMINUS$3 = 0x002D;  // U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nvar U$1 = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)\n\nfunction eatHexSequence(offset, allowDash) {\n    for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {\n        var code = this.scanner.source.charCodeAt(pos);\n\n        if (code === HYPHENMINUS$3 && allowDash && len !== 0) {\n            if (eatHexSequence.call(this, offset + len + 1, false) === 0) {\n                this.error();\n            }\n\n            return -1;\n        }\n\n        if (!isHexDigit$3(code)) {\n            this.error(\n                allowDash && len !== 0\n                    ? 'HyphenMinus' + (len < 6 ? ' or hex digit' : '') + ' is expected'\n                    : (len < 6 ? 'Hex digit is expected' : 'Unexpected input'),\n                pos\n            );\n        }\n\n        if (++len > 6) {\n            this.error('Too many hex digits', pos);\n        }    }\n\n    this.scanner.next();\n    return len;\n}\n\nfunction eatQuestionMarkSequence(max) {\n    var count = 0;\n\n    while (this.scanner.isDelim(QUESTIONMARK)) {\n        if (++count > max) {\n            this.error('Too many question marks');\n        }\n\n        this.scanner.next();\n    }\n}\n\nfunction startsWith(code) {\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {\n        this.error(NAME$3[code] + ' is expected');\n    }\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nfunction scanUnicodeRange() {\n    var hexLength = 0;\n\n    // u '+' <ident-token> '?'*\n    // u '+' '?'+\n    if (this.scanner.isDelim(PLUSSIGN$5)) {\n        this.scanner.next();\n\n        if (this.scanner.tokenType === IDENT$g) {\n            hexLength = eatHexSequence.call(this, 0, true);\n            if (hexLength > 0) {\n                eatQuestionMarkSequence.call(this, 6 - hexLength);\n            }\n            return;\n        }\n\n        if (this.scanner.isDelim(QUESTIONMARK)) {\n            this.scanner.next();\n            eatQuestionMarkSequence.call(this, 5);\n            return;\n        }\n\n        this.error('Hex digit or question mark is expected');\n        return;\n    }\n\n    // u <number-token> '?'*\n    // u <number-token> <dimension-token>\n    // u <number-token> <number-token>\n    if (this.scanner.tokenType === NUMBER$7) {\n        startsWith.call(this, PLUSSIGN$5);\n        hexLength = eatHexSequence.call(this, 1, true);\n\n        if (this.scanner.isDelim(QUESTIONMARK)) {\n            eatQuestionMarkSequence.call(this, 6 - hexLength);\n            return;\n        }\n\n        if (this.scanner.tokenType === DIMENSION$5 ||\n            this.scanner.tokenType === NUMBER$7) {\n            startsWith.call(this, HYPHENMINUS$3);\n            eatHexSequence.call(this, 1, false);\n            return;\n        }\n\n        return;\n    }\n\n    // u <dimension-token> '?'*\n    if (this.scanner.tokenType === DIMENSION$5) {\n        startsWith.call(this, PLUSSIGN$5);\n        hexLength = eatHexSequence.call(this, 1, true);\n\n        if (hexLength > 0) {\n            eatQuestionMarkSequence.call(this, 6 - hexLength);\n        }\n\n        return;\n    }\n\n    this.error();\n}\n\nvar UnicodeRange = {\n    name: 'UnicodeRange',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        // U or u\n        if (!cmpChar$3(this.scanner.source, start, U$1)) {\n            this.error('U is expected');\n        }\n\n        if (!cmpChar$3(this.scanner.source, start + 1, PLUSSIGN$5)) {\n            this.error('Plus sign is expected');\n        }\n\n        this.scanner.next();\n        scanUnicodeRange.call(this);\n\n        return {\n            type: 'UnicodeRange',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n\nvar isWhiteSpace$2 = tokenizer.isWhiteSpace;\nvar cmpStr$5 = tokenizer.cmpStr;\nvar TYPE$D = tokenizer.TYPE;\n\nvar FUNCTION$6 = TYPE$D.Function;\nvar URL$4 = TYPE$D.Url;\nvar RIGHTPARENTHESIS$5 = TYPE$D.RightParenthesis;\n\n// <url-token> | <function-token> <string> )\nvar Url = {\n    name: 'Url',\n    structure: {\n        value: ['String', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value;\n\n        switch (this.scanner.tokenType) {\n            case URL$4:\n                var rawStart = start + 4;\n                var rawEnd = this.scanner.tokenEnd - 1;\n\n                while (rawStart < rawEnd && isWhiteSpace$2(this.scanner.source.charCodeAt(rawStart))) {\n                    rawStart++;\n                }\n\n                while (rawStart < rawEnd && isWhiteSpace$2(this.scanner.source.charCodeAt(rawEnd - 1))) {\n                    rawEnd--;\n                }\n\n                value = {\n                    type: 'Raw',\n                    loc: this.getLocation(rawStart, rawEnd),\n                    value: this.scanner.source.substring(rawStart, rawEnd)\n                };\n\n                this.eat(URL$4);\n                break;\n\n            case FUNCTION$6:\n                if (!cmpStr$5(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, 'url(')) {\n                    this.error('Function name must be `url`');\n                }\n\n                this.eat(FUNCTION$6);\n                this.scanner.skipSC();\n                value = this.String();\n                this.scanner.skipSC();\n                this.eat(RIGHTPARENTHESIS$5);\n                break;\n\n            default:\n                this.error('Url or Function is expected');\n        }\n\n        return {\n            type: 'Url',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value\n        };\n    },\n    generate: function(node) {\n        this.chunk('url');\n        this.chunk('(');\n        this.node(node.value);\n        this.chunk(')');\n    }\n};\n\nvar Value = {\n    name: 'Value',\n    structure: {\n        children: [[]]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = this.readSequence(this.scope.Value);\n\n        return {\n            type: 'Value',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    }\n};\n\nvar WHITESPACE$b = tokenizer.TYPE.WhiteSpace;\nvar SPACE = Object.freeze({\n    type: 'WhiteSpace',\n    loc: null,\n    value: ' '\n});\n\nvar WhiteSpace$1 = {\n    name: 'WhiteSpace',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        this.eat(WHITESPACE$b);\n        return SPACE;\n\n        // return {\n        //     type: 'WhiteSpace',\n        //     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n        //     value: this.consume(WHITESPACE)\n        // };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n\nvar node = {\n    AnPlusB: AnPlusB,\n    Atrule: Atrule,\n    AtrulePrelude: AtrulePrelude,\n    AttributeSelector: AttributeSelector,\n    Block: Block,\n    Brackets: Brackets,\n    CDC: CDC_1,\n    CDO: CDO_1,\n    ClassSelector: ClassSelector,\n    Combinator: Combinator,\n    Comment: Comment,\n    Declaration: Declaration,\n    DeclarationList: DeclarationList,\n    Dimension: Dimension,\n    Function: _Function,\n    Hash: Hash,\n    Identifier: Identifier,\n    IdSelector: IdSelector,\n    MediaFeature: MediaFeature,\n    MediaQuery: MediaQuery,\n    MediaQueryList: MediaQueryList,\n    Nth: Nth,\n    Number: _Number,\n    Operator: Operator,\n    Parentheses: Parentheses,\n    Percentage: Percentage,\n    PseudoClassSelector: PseudoClassSelector,\n    PseudoElementSelector: PseudoElementSelector,\n    Ratio: Ratio,\n    Raw: Raw,\n    Rule: Rule,\n    Selector: Selector,\n    SelectorList: SelectorList,\n    String: _String,\n    StyleSheet: StyleSheet,\n    TypeSelector: TypeSelector,\n    UnicodeRange: UnicodeRange,\n    Url: Url,\n    Value: Value,\n    WhiteSpace: WhiteSpace$1\n};\n\nvar parser = {\n    parseContext: {\n        default: 'StyleSheet',\n        stylesheet: 'StyleSheet',\n        atrule: 'Atrule',\n        atrulePrelude: function(options) {\n            return this.AtrulePrelude(options.atrule ? String(options.atrule) : null);\n        },\n        mediaQueryList: 'MediaQueryList',\n        mediaQuery: 'MediaQuery',\n        rule: 'Rule',\n        selectorList: 'SelectorList',\n        selector: 'Selector',\n        block: function() {\n            return this.Block(true);\n        },\n        declarationList: 'DeclarationList',\n        declaration: 'Declaration',\n        value: 'Value'\n    },\n    scope: scope,\n    atrule: atrule,\n    pseudo: pseudo,\n    node: node\n};\n\nvar parser$1 = create(parser);\n\nfunction read_style(parser, start, attributes) {\n    const content_start = parser.index;\n    const styles = parser.read_until(/<\\/style\\s*>/, parser_errors.unclosed_style);\n    if (parser.index >= parser.template.length) {\n        parser.error(parser_errors.unclosed_style);\n    }\n    const content_end = parser.index;\n    let ast;\n    try {\n        ast = parser$1(styles, {\n            positions: true,\n            offset: content_start,\n            onParseError(error) {\n                throw error;\n            }\n        });\n    }\n    catch (err) {\n        if (err.name === 'SyntaxError') {\n            parser.error(parser_errors.css_syntax_error(err.message), err.offset);\n        }\n        else {\n            throw err;\n        }\n    }\n    ast = JSON.parse(JSON.stringify(ast));\n    // tidy up AST\n    walk(ast, {\n        enter: (node) => {\n            // replace `ref:a` nodes\n            if (node.type === 'Selector') {\n                for (let i = 0; i < node.children.length; i += 1) {\n                    const a = node.children[i];\n                    const b = node.children[i + 1];\n                    if (is_ref_selector(a, b)) {\n                        parser.error(parser_errors.invalid_ref_selector, a.loc.start.offset);\n                    }\n                }\n            }\n            if (node.type === 'Declaration' && node.value.type === 'Value' && node.value.children.length === 0) {\n                parser.error(parser_errors.invalid_declaration, node.start);\n            }\n            if (node.type === 'PseudoClassSelector' && node.name === 'global' && node.children === null) {\n                parser.error(parser_errors.empty_global_selector, node.loc.start.offset);\n            }\n            if (node.loc) {\n                node.start = node.loc.start.offset;\n                node.end = node.loc.end.offset;\n                delete node.loc;\n            }\n        }\n    });\n    parser.read(/<\\/style\\s*>/);\n    const end = parser.index;\n    return {\n        type: 'Style',\n        start,\n        end,\n        attributes,\n        children: ast.children,\n        content: {\n            start: content_start,\n            end: content_end,\n            styles\n        }\n    };\n}\nfunction is_ref_selector(a, b) {\n    if (!b)\n        return false;\n    return (a.type === 'TypeSelector' &&\n        a.name === 'ref' &&\n        b.type === 'PseudoClassSelector');\n}\n\n// https://dev.w3.org/html5/html-author/charref\nvar entities = {\n    CounterClockwiseContourIntegral: 8755,\n    ClockwiseContourIntegral: 8754,\n    DoubleLongLeftRightArrow: 10234,\n    DiacriticalDoubleAcute: 733,\n    NotSquareSupersetEqual: 8931,\n    CloseCurlyDoubleQuote: 8221,\n    DoubleContourIntegral: 8751,\n    FilledVerySmallSquare: 9642,\n    NegativeVeryThinSpace: 8203,\n    NotPrecedesSlantEqual: 8928,\n    NotRightTriangleEqual: 8941,\n    NotSucceedsSlantEqual: 8929,\n    CapitalDifferentialD: 8517,\n    DoubleLeftRightArrow: 8660,\n    DoubleLongRightArrow: 10233,\n    EmptyVerySmallSquare: 9643,\n    NestedGreaterGreater: 8811,\n    NotDoubleVerticalBar: 8742,\n    NotLeftTriangleEqual: 8940,\n    NotSquareSubsetEqual: 8930,\n    OpenCurlyDoubleQuote: 8220,\n    ReverseUpEquilibrium: 10607,\n    DoubleLongLeftArrow: 10232,\n    DownLeftRightVector: 10576,\n    LeftArrowRightArrow: 8646,\n    NegativeMediumSpace: 8203,\n    RightArrowLeftArrow: 8644,\n    SquareSupersetEqual: 8850,\n    leftrightsquigarrow: 8621,\n    DownRightTeeVector: 10591,\n    DownRightVectorBar: 10583,\n    LongLeftRightArrow: 10231,\n    Longleftrightarrow: 10234,\n    NegativeThickSpace: 8203,\n    PrecedesSlantEqual: 8828,\n    ReverseEquilibrium: 8651,\n    RightDoubleBracket: 10215,\n    RightDownTeeVector: 10589,\n    RightDownVectorBar: 10581,\n    RightTriangleEqual: 8885,\n    SquareIntersection: 8851,\n    SucceedsSlantEqual: 8829,\n    blacktriangleright: 9656,\n    longleftrightarrow: 10231,\n    DoubleUpDownArrow: 8661,\n    DoubleVerticalBar: 8741,\n    DownLeftTeeVector: 10590,\n    DownLeftVectorBar: 10582,\n    FilledSmallSquare: 9724,\n    GreaterSlantEqual: 10878,\n    LeftDoubleBracket: 10214,\n    LeftDownTeeVector: 10593,\n    LeftDownVectorBar: 10585,\n    LeftTriangleEqual: 8884,\n    NegativeThinSpace: 8203,\n    NotReverseElement: 8716,\n    NotTildeFullEqual: 8775,\n    RightAngleBracket: 10217,\n    RightUpDownVector: 10575,\n    SquareSubsetEqual: 8849,\n    VerticalSeparator: 10072,\n    blacktriangledown: 9662,\n    blacktriangleleft: 9666,\n    leftrightharpoons: 8651,\n    rightleftharpoons: 8652,\n    twoheadrightarrow: 8608,\n    DiacriticalAcute: 180,\n    DiacriticalGrave: 96,\n    DiacriticalTilde: 732,\n    DoubleRightArrow: 8658,\n    DownArrowUpArrow: 8693,\n    EmptySmallSquare: 9723,\n    GreaterEqualLess: 8923,\n    GreaterFullEqual: 8807,\n    LeftAngleBracket: 10216,\n    LeftUpDownVector: 10577,\n    LessEqualGreater: 8922,\n    NonBreakingSpace: 160,\n    NotRightTriangle: 8939,\n    NotSupersetEqual: 8841,\n    RightTriangleBar: 10704,\n    RightUpTeeVector: 10588,\n    RightUpVectorBar: 10580,\n    UnderParenthesis: 9181,\n    UpArrowDownArrow: 8645,\n    circlearrowright: 8635,\n    downharpoonright: 8642,\n    ntrianglerighteq: 8941,\n    rightharpoondown: 8641,\n    rightrightarrows: 8649,\n    twoheadleftarrow: 8606,\n    vartriangleright: 8883,\n    CloseCurlyQuote: 8217,\n    ContourIntegral: 8750,\n    DoubleDownArrow: 8659,\n    DoubleLeftArrow: 8656,\n    DownRightVector: 8641,\n    LeftRightVector: 10574,\n    LeftTriangleBar: 10703,\n    LeftUpTeeVector: 10592,\n    LeftUpVectorBar: 10584,\n    LowerRightArrow: 8600,\n    NotGreaterEqual: 8817,\n    NotGreaterTilde: 8821,\n    NotLeftTriangle: 8938,\n    OverParenthesis: 9180,\n    RightDownVector: 8642,\n    ShortRightArrow: 8594,\n    UpperRightArrow: 8599,\n    bigtriangledown: 9661,\n    circlearrowleft: 8634,\n    curvearrowright: 8631,\n    downharpoonleft: 8643,\n    leftharpoondown: 8637,\n    leftrightarrows: 8646,\n    nLeftrightarrow: 8654,\n    nleftrightarrow: 8622,\n    ntrianglelefteq: 8940,\n    rightleftarrows: 8644,\n    rightsquigarrow: 8605,\n    rightthreetimes: 8908,\n    straightepsilon: 1013,\n    trianglerighteq: 8885,\n    vartriangleleft: 8882,\n    DiacriticalDot: 729,\n    DoubleRightTee: 8872,\n    DownLeftVector: 8637,\n    GreaterGreater: 10914,\n    HorizontalLine: 9472,\n    InvisibleComma: 8291,\n    InvisibleTimes: 8290,\n    LeftDownVector: 8643,\n    LeftRightArrow: 8596,\n    Leftrightarrow: 8660,\n    LessSlantEqual: 10877,\n    LongRightArrow: 10230,\n    Longrightarrow: 10233,\n    LowerLeftArrow: 8601,\n    NestedLessLess: 8810,\n    NotGreaterLess: 8825,\n    NotLessGreater: 8824,\n    NotSubsetEqual: 8840,\n    NotVerticalBar: 8740,\n    OpenCurlyQuote: 8216,\n    ReverseElement: 8715,\n    RightTeeVector: 10587,\n    RightVectorBar: 10579,\n    ShortDownArrow: 8595,\n    ShortLeftArrow: 8592,\n    SquareSuperset: 8848,\n    TildeFullEqual: 8773,\n    UpperLeftArrow: 8598,\n    ZeroWidthSpace: 8203,\n    curvearrowleft: 8630,\n    doublebarwedge: 8966,\n    downdownarrows: 8650,\n    hookrightarrow: 8618,\n    leftleftarrows: 8647,\n    leftrightarrow: 8596,\n    leftthreetimes: 8907,\n    longrightarrow: 10230,\n    looparrowright: 8620,\n    nshortparallel: 8742,\n    ntriangleright: 8939,\n    rightarrowtail: 8611,\n    rightharpoonup: 8640,\n    trianglelefteq: 8884,\n    upharpoonright: 8638,\n    ApplyFunction: 8289,\n    DifferentialD: 8518,\n    DoubleLeftTee: 10980,\n    DoubleUpArrow: 8657,\n    LeftTeeVector: 10586,\n    LeftVectorBar: 10578,\n    LessFullEqual: 8806,\n    LongLeftArrow: 10229,\n    Longleftarrow: 10232,\n    NotTildeEqual: 8772,\n    NotTildeTilde: 8777,\n    Poincareplane: 8460,\n    PrecedesEqual: 10927,\n    PrecedesTilde: 8830,\n    RightArrowBar: 8677,\n    RightTeeArrow: 8614,\n    RightTriangle: 8883,\n    RightUpVector: 8638,\n    SucceedsEqual: 10928,\n    SucceedsTilde: 8831,\n    SupersetEqual: 8839,\n    UpEquilibrium: 10606,\n    VerticalTilde: 8768,\n    VeryThinSpace: 8202,\n    bigtriangleup: 9651,\n    blacktriangle: 9652,\n    divideontimes: 8903,\n    fallingdotseq: 8786,\n    hookleftarrow: 8617,\n    leftarrowtail: 8610,\n    leftharpoonup: 8636,\n    longleftarrow: 10229,\n    looparrowleft: 8619,\n    measuredangle: 8737,\n    ntriangleleft: 8938,\n    shortparallel: 8741,\n    smallsetminus: 8726,\n    triangleright: 9657,\n    upharpoonleft: 8639,\n    DownArrowBar: 10515,\n    DownTeeArrow: 8615,\n    ExponentialE: 8519,\n    GreaterEqual: 8805,\n    GreaterTilde: 8819,\n    HilbertSpace: 8459,\n    HumpDownHump: 8782,\n    Intersection: 8898,\n    LeftArrowBar: 8676,\n    LeftTeeArrow: 8612,\n    LeftTriangle: 8882,\n    LeftUpVector: 8639,\n    NotCongruent: 8802,\n    NotLessEqual: 8816,\n    NotLessTilde: 8820,\n    Proportional: 8733,\n    RightCeiling: 8969,\n    RoundImplies: 10608,\n    ShortUpArrow: 8593,\n    SquareSubset: 8847,\n    UnderBracket: 9141,\n    VerticalLine: 124,\n    blacklozenge: 10731,\n    exponentiale: 8519,\n    risingdotseq: 8787,\n    triangledown: 9663,\n    triangleleft: 9667,\n    CircleMinus: 8854,\n    CircleTimes: 8855,\n    Equilibrium: 8652,\n    GreaterLess: 8823,\n    LeftCeiling: 8968,\n    LessGreater: 8822,\n    MediumSpace: 8287,\n    NotPrecedes: 8832,\n    NotSucceeds: 8833,\n    OverBracket: 9140,\n    RightVector: 8640,\n    Rrightarrow: 8667,\n    RuleDelayed: 10740,\n    SmallCircle: 8728,\n    SquareUnion: 8852,\n    SubsetEqual: 8838,\n    UpDownArrow: 8597,\n    Updownarrow: 8661,\n    VerticalBar: 8739,\n    backepsilon: 1014,\n    blacksquare: 9642,\n    circledcirc: 8858,\n    circleddash: 8861,\n    curlyeqprec: 8926,\n    curlyeqsucc: 8927,\n    diamondsuit: 9830,\n    eqslantless: 10901,\n    expectation: 8496,\n    nRightarrow: 8655,\n    nrightarrow: 8603,\n    preccurlyeq: 8828,\n    precnapprox: 10937,\n    quaternions: 8461,\n    straightphi: 981,\n    succcurlyeq: 8829,\n    succnapprox: 10938,\n    thickapprox: 8776,\n    updownarrow: 8597,\n    Bernoullis: 8492,\n    CirclePlus: 8853,\n    EqualTilde: 8770,\n    Fouriertrf: 8497,\n    ImaginaryI: 8520,\n    Laplacetrf: 8466,\n    LeftVector: 8636,\n    Lleftarrow: 8666,\n    NotElement: 8713,\n    NotGreater: 8815,\n    Proportion: 8759,\n    RightArrow: 8594,\n    RightFloor: 8971,\n    Rightarrow: 8658,\n    TildeEqual: 8771,\n    TildeTilde: 8776,\n    UnderBrace: 9183,\n    UpArrowBar: 10514,\n    UpTeeArrow: 8613,\n    circledast: 8859,\n    complement: 8705,\n    curlywedge: 8911,\n    eqslantgtr: 10902,\n    gtreqqless: 10892,\n    lessapprox: 10885,\n    lesseqqgtr: 10891,\n    lmoustache: 9136,\n    longmapsto: 10236,\n    mapstodown: 8615,\n    mapstoleft: 8612,\n    nLeftarrow: 8653,\n    nleftarrow: 8602,\n    precapprox: 10935,\n    rightarrow: 8594,\n    rmoustache: 9137,\n    sqsubseteq: 8849,\n    sqsupseteq: 8850,\n    subsetneqq: 10955,\n    succapprox: 10936,\n    supsetneqq: 10956,\n    upuparrows: 8648,\n    varepsilon: 949,\n    varnothing: 8709,\n    Backslash: 8726,\n    CenterDot: 183,\n    CircleDot: 8857,\n    Congruent: 8801,\n    Coproduct: 8720,\n    DoubleDot: 168,\n    DownArrow: 8595,\n    DownBreve: 785,\n    Downarrow: 8659,\n    HumpEqual: 8783,\n    LeftArrow: 8592,\n    LeftFloor: 8970,\n    Leftarrow: 8656,\n    LessTilde: 8818,\n    Mellintrf: 8499,\n    MinusPlus: 8723,\n    NotCupCap: 8813,\n    NotExists: 8708,\n    OverBrace: 9182,\n    PlusMinus: 177,\n    Therefore: 8756,\n    ThinSpace: 8201,\n    TripleDot: 8411,\n    UnionPlus: 8846,\n    backprime: 8245,\n    backsimeq: 8909,\n    bigotimes: 10754,\n    centerdot: 183,\n    checkmark: 10003,\n    complexes: 8450,\n    dotsquare: 8865,\n    downarrow: 8595,\n    gtrapprox: 10886,\n    gtreqless: 8923,\n    heartsuit: 9829,\n    leftarrow: 8592,\n    lesseqgtr: 8922,\n    nparallel: 8742,\n    nshortmid: 8740,\n    nsubseteq: 8840,\n    nsupseteq: 8841,\n    pitchfork: 8916,\n    rationals: 8474,\n    spadesuit: 9824,\n    subseteqq: 10949,\n    subsetneq: 8842,\n    supseteqq: 10950,\n    supsetneq: 8843,\n    therefore: 8756,\n    triangleq: 8796,\n    varpropto: 8733,\n    DDotrahd: 10513,\n    DotEqual: 8784,\n    Integral: 8747,\n    LessLess: 10913,\n    NotEqual: 8800,\n    NotTilde: 8769,\n    PartialD: 8706,\n    Precedes: 8826,\n    RightTee: 8866,\n    Succeeds: 8827,\n    SuchThat: 8715,\n    Superset: 8835,\n    Uarrocir: 10569,\n    UnderBar: 818,\n    andslope: 10840,\n    angmsdaa: 10664,\n    angmsdab: 10665,\n    angmsdac: 10666,\n    angmsdad: 10667,\n    angmsdae: 10668,\n    angmsdaf: 10669,\n    angmsdag: 10670,\n    angmsdah: 10671,\n    angrtvbd: 10653,\n    approxeq: 8778,\n    awconint: 8755,\n    backcong: 8780,\n    barwedge: 8965,\n    bbrktbrk: 9142,\n    bigoplus: 10753,\n    bigsqcup: 10758,\n    biguplus: 10756,\n    bigwedge: 8896,\n    boxminus: 8863,\n    boxtimes: 8864,\n    capbrcup: 10825,\n    circledR: 174,\n    circledS: 9416,\n    cirfnint: 10768,\n    clubsuit: 9827,\n    cupbrcap: 10824,\n    curlyvee: 8910,\n    cwconint: 8754,\n    doteqdot: 8785,\n    dotminus: 8760,\n    drbkarow: 10512,\n    dzigrarr: 10239,\n    elinters: 9191,\n    emptyset: 8709,\n    eqvparsl: 10725,\n    fpartint: 10765,\n    geqslant: 10878,\n    gesdotol: 10884,\n    gnapprox: 10890,\n    hksearow: 10533,\n    hkswarow: 10534,\n    imagline: 8464,\n    imagpart: 8465,\n    infintie: 10717,\n    integers: 8484,\n    intercal: 8890,\n    intlarhk: 10775,\n    laemptyv: 10676,\n    ldrushar: 10571,\n    leqslant: 10877,\n    lesdotor: 10883,\n    llcorner: 8990,\n    lnapprox: 10889,\n    lrcorner: 8991,\n    lurdshar: 10570,\n    mapstoup: 8613,\n    multimap: 8888,\n    naturals: 8469,\n    otimesas: 10806,\n    parallel: 8741,\n    plusacir: 10787,\n    pointint: 10773,\n    precneqq: 10933,\n    precnsim: 8936,\n    profalar: 9006,\n    profline: 8978,\n    profsurf: 8979,\n    raemptyv: 10675,\n    realpart: 8476,\n    rppolint: 10770,\n    rtriltri: 10702,\n    scpolint: 10771,\n    setminus: 8726,\n    shortmid: 8739,\n    smeparsl: 10724,\n    sqsubset: 8847,\n    sqsupset: 8848,\n    subseteq: 8838,\n    succneqq: 10934,\n    succnsim: 8937,\n    supseteq: 8839,\n    thetasym: 977,\n    thicksim: 8764,\n    timesbar: 10801,\n    triangle: 9653,\n    triminus: 10810,\n    trpezium: 9186,\n    ulcorner: 8988,\n    urcorner: 8989,\n    varkappa: 1008,\n    varsigma: 962,\n    vartheta: 977,\n    Because: 8757,\n    Cayleys: 8493,\n    Cconint: 8752,\n    Cedilla: 184,\n    Diamond: 8900,\n    DownTee: 8868,\n    Element: 8712,\n    Epsilon: 917,\n    Implies: 8658,\n    LeftTee: 8867,\n    NewLine: 10,\n    NoBreak: 8288,\n    NotLess: 8814,\n    Omicron: 927,\n    OverBar: 175,\n    Product: 8719,\n    UpArrow: 8593,\n    Uparrow: 8657,\n    Upsilon: 933,\n    alefsym: 8501,\n    angrtvb: 8894,\n    angzarr: 9084,\n    asympeq: 8781,\n    backsim: 8765,\n    because: 8757,\n    bemptyv: 10672,\n    between: 8812,\n    bigcirc: 9711,\n    bigodot: 10752,\n    bigstar: 9733,\n    boxplus: 8862,\n    ccupssm: 10832,\n    cemptyv: 10674,\n    cirscir: 10690,\n    coloneq: 8788,\n    congdot: 10861,\n    cudarrl: 10552,\n    cudarrr: 10549,\n    cularrp: 10557,\n    curarrm: 10556,\n    dbkarow: 10511,\n    ddagger: 8225,\n    ddotseq: 10871,\n    demptyv: 10673,\n    diamond: 8900,\n    digamma: 989,\n    dotplus: 8724,\n    dwangle: 10662,\n    epsilon: 949,\n    eqcolon: 8789,\n    equivDD: 10872,\n    gesdoto: 10882,\n    gtquest: 10876,\n    gtrless: 8823,\n    harrcir: 10568,\n    intprod: 10812,\n    isindot: 8949,\n    larrbfs: 10527,\n    larrsim: 10611,\n    lbrksld: 10639,\n    lbrkslu: 10637,\n    ldrdhar: 10599,\n    lesdoto: 10881,\n    lessdot: 8918,\n    lessgtr: 8822,\n    lesssim: 8818,\n    lotimes: 10804,\n    lozenge: 9674,\n    ltquest: 10875,\n    luruhar: 10598,\n    maltese: 10016,\n    minusdu: 10794,\n    napprox: 8777,\n    natural: 9838,\n    nearrow: 8599,\n    nexists: 8708,\n    notinva: 8713,\n    notinvb: 8951,\n    notinvc: 8950,\n    notniva: 8716,\n    notnivb: 8958,\n    notnivc: 8957,\n    npolint: 10772,\n    nsqsube: 8930,\n    nsqsupe: 8931,\n    nvinfin: 10718,\n    nwarrow: 8598,\n    olcross: 10683,\n    omicron: 959,\n    orderof: 8500,\n    orslope: 10839,\n    pertenk: 8241,\n    planckh: 8462,\n    pluscir: 10786,\n    plussim: 10790,\n    plustwo: 10791,\n    precsim: 8830,\n    quatint: 10774,\n    questeq: 8799,\n    rarrbfs: 10528,\n    rarrsim: 10612,\n    rbrksld: 10638,\n    rbrkslu: 10640,\n    rdldhar: 10601,\n    realine: 8475,\n    rotimes: 10805,\n    ruluhar: 10600,\n    searrow: 8600,\n    simplus: 10788,\n    simrarr: 10610,\n    subedot: 10947,\n    submult: 10945,\n    subplus: 10943,\n    subrarr: 10617,\n    succsim: 8831,\n    supdsub: 10968,\n    supedot: 10948,\n    suphsub: 10967,\n    suplarr: 10619,\n    supmult: 10946,\n    supplus: 10944,\n    swarrow: 8601,\n    topfork: 10970,\n    triplus: 10809,\n    tritime: 10811,\n    uparrow: 8593,\n    upsilon: 965,\n    uwangle: 10663,\n    vzigzag: 10650,\n    zigrarr: 8669,\n    Aacute: 193,\n    Abreve: 258,\n    Agrave: 192,\n    Assign: 8788,\n    Atilde: 195,\n    Barwed: 8966,\n    Bumpeq: 8782,\n    Cacute: 262,\n    Ccaron: 268,\n    Ccedil: 199,\n    Colone: 10868,\n    Conint: 8751,\n    CupCap: 8781,\n    Dagger: 8225,\n    Dcaron: 270,\n    DotDot: 8412,\n    Dstrok: 272,\n    Eacute: 201,\n    Ecaron: 282,\n    Egrave: 200,\n    Exists: 8707,\n    ForAll: 8704,\n    Gammad: 988,\n    Gbreve: 286,\n    Gcedil: 290,\n    HARDcy: 1066,\n    Hstrok: 294,\n    Iacute: 205,\n    Igrave: 204,\n    Itilde: 296,\n    Jsercy: 1032,\n    Kcedil: 310,\n    Lacute: 313,\n    Lambda: 923,\n    Lcaron: 317,\n    Lcedil: 315,\n    Lmidot: 319,\n    Lstrok: 321,\n    Nacute: 323,\n    Ncaron: 327,\n    Ncedil: 325,\n    Ntilde: 209,\n    Oacute: 211,\n    Odblac: 336,\n    Ograve: 210,\n    Oslash: 216,\n    Otilde: 213,\n    Otimes: 10807,\n    Racute: 340,\n    Rarrtl: 10518,\n    Rcaron: 344,\n    Rcedil: 342,\n    SHCHcy: 1065,\n    SOFTcy: 1068,\n    Sacute: 346,\n    Scaron: 352,\n    Scedil: 350,\n    Square: 9633,\n    Subset: 8912,\n    Supset: 8913,\n    Tcaron: 356,\n    Tcedil: 354,\n    Tstrok: 358,\n    Uacute: 218,\n    Ubreve: 364,\n    Udblac: 368,\n    Ugrave: 217,\n    Utilde: 360,\n    Vdashl: 10982,\n    Verbar: 8214,\n    Vvdash: 8874,\n    Yacute: 221,\n    Zacute: 377,\n    Zcaron: 381,\n    aacute: 225,\n    abreve: 259,\n    agrave: 224,\n    andand: 10837,\n    angmsd: 8737,\n    angsph: 8738,\n    apacir: 10863,\n    approx: 8776,\n    atilde: 227,\n    barvee: 8893,\n    barwed: 8965,\n    becaus: 8757,\n    bernou: 8492,\n    bigcap: 8898,\n    bigcup: 8899,\n    bigvee: 8897,\n    bkarow: 10509,\n    bottom: 8869,\n    bowtie: 8904,\n    boxbox: 10697,\n    bprime: 8245,\n    brvbar: 166,\n    bullet: 8226,\n    bumpeq: 8783,\n    cacute: 263,\n    capand: 10820,\n    capcap: 10827,\n    capcup: 10823,\n    capdot: 10816,\n    ccaron: 269,\n    ccedil: 231,\n    circeq: 8791,\n    cirmid: 10991,\n    colone: 8788,\n    commat: 64,\n    compfn: 8728,\n    conint: 8750,\n    coprod: 8720,\n    copysr: 8471,\n    cularr: 8630,\n    cupcap: 10822,\n    cupcup: 10826,\n    cupdot: 8845,\n    curarr: 8631,\n    curren: 164,\n    cylcty: 9005,\n    dagger: 8224,\n    daleth: 8504,\n    dcaron: 271,\n    dfisht: 10623,\n    divide: 247,\n    divonx: 8903,\n    dlcorn: 8990,\n    dlcrop: 8973,\n    dollar: 36,\n    drcorn: 8991,\n    drcrop: 8972,\n    dstrok: 273,\n    eacute: 233,\n    easter: 10862,\n    ecaron: 283,\n    ecolon: 8789,\n    egrave: 232,\n    egsdot: 10904,\n    elsdot: 10903,\n    emptyv: 8709,\n    emsp13: 8196,\n    emsp14: 8197,\n    eparsl: 10723,\n    eqcirc: 8790,\n    equals: 61,\n    equest: 8799,\n    female: 9792,\n    ffilig: 64259,\n    ffllig: 64260,\n    forall: 8704,\n    frac12: 189,\n    frac13: 8531,\n    frac14: 188,\n    frac15: 8533,\n    frac16: 8537,\n    frac18: 8539,\n    frac23: 8532,\n    frac25: 8534,\n    frac34: 190,\n    frac35: 8535,\n    frac38: 8540,\n    frac45: 8536,\n    frac56: 8538,\n    frac58: 8541,\n    frac78: 8542,\n    gacute: 501,\n    gammad: 989,\n    gbreve: 287,\n    gesdot: 10880,\n    gesles: 10900,\n    gtlPar: 10645,\n    gtrarr: 10616,\n    gtrdot: 8919,\n    gtrsim: 8819,\n    hairsp: 8202,\n    hamilt: 8459,\n    hardcy: 1098,\n    hearts: 9829,\n    hellip: 8230,\n    hercon: 8889,\n    homtht: 8763,\n    horbar: 8213,\n    hslash: 8463,\n    hstrok: 295,\n    hybull: 8259,\n    hyphen: 8208,\n    iacute: 237,\n    igrave: 236,\n    iiiint: 10764,\n    iinfin: 10716,\n    incare: 8453,\n    inodot: 305,\n    intcal: 8890,\n    iquest: 191,\n    isinsv: 8947,\n    itilde: 297,\n    jsercy: 1112,\n    kappav: 1008,\n    kcedil: 311,\n    kgreen: 312,\n    lAtail: 10523,\n    lacute: 314,\n    lagran: 8466,\n    lambda: 955,\n    langle: 10216,\n    larrfs: 10525,\n    larrhk: 8617,\n    larrlp: 8619,\n    larrpl: 10553,\n    larrtl: 8610,\n    latail: 10521,\n    lbrace: 123,\n    lbrack: 91,\n    lcaron: 318,\n    lcedil: 316,\n    ldquor: 8222,\n    lesdot: 10879,\n    lesges: 10899,\n    lfisht: 10620,\n    lfloor: 8970,\n    lharul: 10602,\n    llhard: 10603,\n    lmidot: 320,\n    lmoust: 9136,\n    loplus: 10797,\n    lowast: 8727,\n    lowbar: 95,\n    lparlt: 10643,\n    lrhard: 10605,\n    lsaquo: 8249,\n    lsquor: 8218,\n    lstrok: 322,\n    lthree: 8907,\n    ltimes: 8905,\n    ltlarr: 10614,\n    ltrPar: 10646,\n    mapsto: 8614,\n    marker: 9646,\n    mcomma: 10793,\n    midast: 42,\n    midcir: 10992,\n    middot: 183,\n    minusb: 8863,\n    minusd: 8760,\n    mnplus: 8723,\n    models: 8871,\n    mstpos: 8766,\n    nVDash: 8879,\n    nVdash: 8878,\n    nacute: 324,\n    ncaron: 328,\n    ncedil: 326,\n    nearhk: 10532,\n    nequiv: 8802,\n    nesear: 10536,\n    nexist: 8708,\n    nltrie: 8940,\n    nprcue: 8928,\n    nrtrie: 8941,\n    nsccue: 8929,\n    nsimeq: 8772,\n    ntilde: 241,\n    numero: 8470,\n    nvDash: 8877,\n    nvHarr: 10500,\n    nvdash: 8876,\n    nvlArr: 10498,\n    nvrArr: 10499,\n    nwarhk: 10531,\n    nwnear: 10535,\n    oacute: 243,\n    odblac: 337,\n    odsold: 10684,\n    ograve: 242,\n    ominus: 8854,\n    origof: 8886,\n    oslash: 248,\n    otilde: 245,\n    otimes: 8855,\n    parsim: 10995,\n    percnt: 37,\n    period: 46,\n    permil: 8240,\n    phmmat: 8499,\n    planck: 8463,\n    plankv: 8463,\n    plusdo: 8724,\n    plusdu: 10789,\n    plusmn: 177,\n    preceq: 10927,\n    primes: 8473,\n    prnsim: 8936,\n    propto: 8733,\n    prurel: 8880,\n    puncsp: 8200,\n    qprime: 8279,\n    rAtail: 10524,\n    racute: 341,\n    rangle: 10217,\n    rarrap: 10613,\n    rarrfs: 10526,\n    rarrhk: 8618,\n    rarrlp: 8620,\n    rarrpl: 10565,\n    rarrtl: 8611,\n    ratail: 10522,\n    rbrace: 125,\n    rbrack: 93,\n    rcaron: 345,\n    rcedil: 343,\n    rdquor: 8221,\n    rfisht: 10621,\n    rfloor: 8971,\n    rharul: 10604,\n    rmoust: 9137,\n    roplus: 10798,\n    rpargt: 10644,\n    rsaquo: 8250,\n    rsquor: 8217,\n    rthree: 8908,\n    rtimes: 8906,\n    sacute: 347,\n    scaron: 353,\n    scedil: 351,\n    scnsim: 8937,\n    searhk: 10533,\n    seswar: 10537,\n    sfrown: 8994,\n    shchcy: 1097,\n    sigmaf: 962,\n    sigmav: 962,\n    simdot: 10858,\n    smashp: 10803,\n    softcy: 1100,\n    solbar: 9023,\n    spades: 9824,\n    sqsube: 8849,\n    sqsupe: 8850,\n    square: 9633,\n    squarf: 9642,\n    ssetmn: 8726,\n    ssmile: 8995,\n    sstarf: 8902,\n    subdot: 10941,\n    subset: 8834,\n    subsim: 10951,\n    subsub: 10965,\n    subsup: 10963,\n    succeq: 10928,\n    supdot: 10942,\n    supset: 8835,\n    supsim: 10952,\n    supsub: 10964,\n    supsup: 10966,\n    swarhk: 10534,\n    swnwar: 10538,\n    target: 8982,\n    tcaron: 357,\n    tcedil: 355,\n    telrec: 8981,\n    there4: 8756,\n    thetav: 977,\n    thinsp: 8201,\n    thksim: 8764,\n    timesb: 8864,\n    timesd: 10800,\n    topbot: 9014,\n    topcir: 10993,\n    tprime: 8244,\n    tridot: 9708,\n    tstrok: 359,\n    uacute: 250,\n    ubreve: 365,\n    udblac: 369,\n    ufisht: 10622,\n    ugrave: 249,\n    ulcorn: 8988,\n    ulcrop: 8975,\n    urcorn: 8989,\n    urcrop: 8974,\n    utilde: 361,\n    vangrt: 10652,\n    varphi: 966,\n    varrho: 1009,\n    veebar: 8891,\n    vellip: 8942,\n    verbar: 124,\n    wedbar: 10847,\n    wedgeq: 8793,\n    weierp: 8472,\n    wreath: 8768,\n    xoplus: 10753,\n    xotime: 10754,\n    xsqcup: 10758,\n    xuplus: 10756,\n    xwedge: 8896,\n    yacute: 253,\n    zacute: 378,\n    zcaron: 382,\n    zeetrf: 8488,\n    AElig: 198,\n    Acirc: 194,\n    Alpha: 913,\n    Amacr: 256,\n    Aogon: 260,\n    Aring: 197,\n    Breve: 728,\n    Ccirc: 264,\n    Colon: 8759,\n    Cross: 10799,\n    Dashv: 10980,\n    Delta: 916,\n    Ecirc: 202,\n    Emacr: 274,\n    Eogon: 280,\n    Equal: 10869,\n    Gamma: 915,\n    Gcirc: 284,\n    Hacek: 711,\n    Hcirc: 292,\n    IJlig: 306,\n    Icirc: 206,\n    Imacr: 298,\n    Iogon: 302,\n    Iukcy: 1030,\n    Jcirc: 308,\n    Jukcy: 1028,\n    Kappa: 922,\n    OElig: 338,\n    Ocirc: 212,\n    Omacr: 332,\n    Omega: 937,\n    Prime: 8243,\n    RBarr: 10512,\n    Scirc: 348,\n    Sigma: 931,\n    THORN: 222,\n    TRADE: 8482,\n    TSHcy: 1035,\n    Theta: 920,\n    Tilde: 8764,\n    Ubrcy: 1038,\n    Ucirc: 219,\n    Umacr: 362,\n    Union: 8899,\n    Uogon: 370,\n    UpTee: 8869,\n    Uring: 366,\n    VDash: 8875,\n    Vdash: 8873,\n    Wcirc: 372,\n    Wedge: 8896,\n    Ycirc: 374,\n    acirc: 226,\n    acute: 180,\n    aelig: 230,\n    aleph: 8501,\n    alpha: 945,\n    amacr: 257,\n    amalg: 10815,\n    angle: 8736,\n    angrt: 8735,\n    angst: 8491,\n    aogon: 261,\n    aring: 229,\n    asymp: 8776,\n    awint: 10769,\n    bcong: 8780,\n    bdquo: 8222,\n    bepsi: 1014,\n    blank: 9251,\n    blk12: 9618,\n    blk14: 9617,\n    blk34: 9619,\n    block: 9608,\n    boxDL: 9559,\n    boxDR: 9556,\n    boxDl: 9558,\n    boxDr: 9555,\n    boxHD: 9574,\n    boxHU: 9577,\n    boxHd: 9572,\n    boxHu: 9575,\n    boxUL: 9565,\n    boxUR: 9562,\n    boxUl: 9564,\n    boxUr: 9561,\n    boxVH: 9580,\n    boxVL: 9571,\n    boxVR: 9568,\n    boxVh: 9579,\n    boxVl: 9570,\n    boxVr: 9567,\n    boxdL: 9557,\n    boxdR: 9554,\n    boxdl: 9488,\n    boxdr: 9484,\n    boxhD: 9573,\n    boxhU: 9576,\n    boxhd: 9516,\n    boxhu: 9524,\n    boxuL: 9563,\n    boxuR: 9560,\n    boxul: 9496,\n    boxur: 9492,\n    boxvH: 9578,\n    boxvL: 9569,\n    boxvR: 9566,\n    boxvh: 9532,\n    boxvl: 9508,\n    boxvr: 9500,\n    breve: 728,\n    bsemi: 8271,\n    bsime: 8909,\n    bsolb: 10693,\n    bumpE: 10926,\n    bumpe: 8783,\n    caret: 8257,\n    caron: 711,\n    ccaps: 10829,\n    ccirc: 265,\n    ccups: 10828,\n    cedil: 184,\n    check: 10003,\n    clubs: 9827,\n    colon: 58,\n    comma: 44,\n    crarr: 8629,\n    cross: 10007,\n    csube: 10961,\n    csupe: 10962,\n    ctdot: 8943,\n    cuepr: 8926,\n    cuesc: 8927,\n    cupor: 10821,\n    cuvee: 8910,\n    cuwed: 8911,\n    cwint: 8753,\n    dashv: 8867,\n    dblac: 733,\n    ddarr: 8650,\n    delta: 948,\n    dharl: 8643,\n    dharr: 8642,\n    diams: 9830,\n    disin: 8946,\n    doteq: 8784,\n    dtdot: 8945,\n    dtrif: 9662,\n    duarr: 8693,\n    duhar: 10607,\n    eDDot: 10871,\n    ecirc: 234,\n    efDot: 8786,\n    emacr: 275,\n    empty: 8709,\n    eogon: 281,\n    eplus: 10865,\n    epsiv: 949,\n    eqsim: 8770,\n    equiv: 8801,\n    erDot: 8787,\n    erarr: 10609,\n    esdot: 8784,\n    exist: 8707,\n    fflig: 64256,\n    filig: 64257,\n    fllig: 64258,\n    fltns: 9649,\n    forkv: 10969,\n    frasl: 8260,\n    frown: 8994,\n    gamma: 947,\n    gcirc: 285,\n    gescc: 10921,\n    gimel: 8503,\n    gneqq: 8809,\n    gnsim: 8935,\n    grave: 96,\n    gsime: 10894,\n    gsiml: 10896,\n    gtcir: 10874,\n    gtdot: 8919,\n    harrw: 8621,\n    hcirc: 293,\n    hoarr: 8703,\n    icirc: 238,\n    iexcl: 161,\n    iiint: 8749,\n    iiota: 8489,\n    ijlig: 307,\n    imacr: 299,\n    image: 8465,\n    imath: 305,\n    imped: 437,\n    infin: 8734,\n    iogon: 303,\n    iprod: 10812,\n    isinE: 8953,\n    isins: 8948,\n    isinv: 8712,\n    iukcy: 1110,\n    jcirc: 309,\n    jmath: 567,\n    jukcy: 1108,\n    kappa: 954,\n    lAarr: 8666,\n    lBarr: 10510,\n    langd: 10641,\n    laquo: 171,\n    larrb: 8676,\n    lbarr: 10508,\n    lbbrk: 10098,\n    lbrke: 10635,\n    lceil: 8968,\n    ldquo: 8220,\n    lescc: 10920,\n    lhard: 8637,\n    lharu: 8636,\n    lhblk: 9604,\n    llarr: 8647,\n    lltri: 9722,\n    lneqq: 8808,\n    lnsim: 8934,\n    loang: 10220,\n    loarr: 8701,\n    lobrk: 10214,\n    lopar: 10629,\n    lrarr: 8646,\n    lrhar: 8651,\n    lrtri: 8895,\n    lsime: 10893,\n    lsimg: 10895,\n    lsquo: 8216,\n    ltcir: 10873,\n    ltdot: 8918,\n    ltrie: 8884,\n    ltrif: 9666,\n    mDDot: 8762,\n    mdash: 8212,\n    micro: 181,\n    minus: 8722,\n    mumap: 8888,\n    nabla: 8711,\n    napos: 329,\n    natur: 9838,\n    ncong: 8775,\n    ndash: 8211,\n    neArr: 8663,\n    nearr: 8599,\n    ngsim: 8821,\n    nhArr: 8654,\n    nharr: 8622,\n    nhpar: 10994,\n    nlArr: 8653,\n    nlarr: 8602,\n    nless: 8814,\n    nlsim: 8820,\n    nltri: 8938,\n    notin: 8713,\n    notni: 8716,\n    nprec: 8832,\n    nrArr: 8655,\n    nrarr: 8603,\n    nrtri: 8939,\n    nsime: 8772,\n    nsmid: 8740,\n    nspar: 8742,\n    nsube: 8840,\n    nsucc: 8833,\n    nsupe: 8841,\n    numsp: 8199,\n    nwArr: 8662,\n    nwarr: 8598,\n    ocirc: 244,\n    odash: 8861,\n    oelig: 339,\n    ofcir: 10687,\n    ohbar: 10677,\n    olarr: 8634,\n    olcir: 10686,\n    oline: 8254,\n    omacr: 333,\n    omega: 969,\n    operp: 10681,\n    oplus: 8853,\n    orarr: 8635,\n    order: 8500,\n    ovbar: 9021,\n    parsl: 11005,\n    phone: 9742,\n    plusb: 8862,\n    pluse: 10866,\n    pound: 163,\n    prcue: 8828,\n    prime: 8242,\n    prnap: 10937,\n    prsim: 8830,\n    quest: 63,\n    rAarr: 8667,\n    rBarr: 10511,\n    radic: 8730,\n    rangd: 10642,\n    range: 10661,\n    raquo: 187,\n    rarrb: 8677,\n    rarrc: 10547,\n    rarrw: 8605,\n    ratio: 8758,\n    rbarr: 10509,\n    rbbrk: 10099,\n    rbrke: 10636,\n    rceil: 8969,\n    rdquo: 8221,\n    reals: 8477,\n    rhard: 8641,\n    rharu: 8640,\n    rlarr: 8644,\n    rlhar: 8652,\n    rnmid: 10990,\n    roang: 10221,\n    roarr: 8702,\n    robrk: 10215,\n    ropar: 10630,\n    rrarr: 8649,\n    rsquo: 8217,\n    rtrie: 8885,\n    rtrif: 9656,\n    sbquo: 8218,\n    sccue: 8829,\n    scirc: 349,\n    scnap: 10938,\n    scsim: 8831,\n    sdotb: 8865,\n    sdote: 10854,\n    seArr: 8664,\n    searr: 8600,\n    setmn: 8726,\n    sharp: 9839,\n    sigma: 963,\n    simeq: 8771,\n    simgE: 10912,\n    simlE: 10911,\n    simne: 8774,\n    slarr: 8592,\n    smile: 8995,\n    sqcap: 8851,\n    sqcup: 8852,\n    sqsub: 8847,\n    sqsup: 8848,\n    srarr: 8594,\n    starf: 9733,\n    strns: 175,\n    subnE: 10955,\n    subne: 8842,\n    supnE: 10956,\n    supne: 8843,\n    swArr: 8665,\n    swarr: 8601,\n    szlig: 223,\n    theta: 952,\n    thkap: 8776,\n    thorn: 254,\n    tilde: 732,\n    times: 215,\n    trade: 8482,\n    trisb: 10701,\n    tshcy: 1115,\n    twixt: 8812,\n    ubrcy: 1118,\n    ucirc: 251,\n    udarr: 8645,\n    udhar: 10606,\n    uharl: 8639,\n    uharr: 8638,\n    uhblk: 9600,\n    ultri: 9720,\n    umacr: 363,\n    uogon: 371,\n    uplus: 8846,\n    upsih: 978,\n    uring: 367,\n    urtri: 9721,\n    utdot: 8944,\n    utrif: 9652,\n    uuarr: 8648,\n    vBarv: 10985,\n    vDash: 8872,\n    varpi: 982,\n    vdash: 8866,\n    veeeq: 8794,\n    vltri: 8882,\n    vprop: 8733,\n    vrtri: 8883,\n    wcirc: 373,\n    wedge: 8743,\n    xcirc: 9711,\n    xdtri: 9661,\n    xhArr: 10234,\n    xharr: 10231,\n    xlArr: 10232,\n    xlarr: 10229,\n    xodot: 10752,\n    xrArr: 10233,\n    xrarr: 10230,\n    xutri: 9651,\n    ycirc: 375,\n    Aopf: 120120,\n    Ascr: 119964,\n    Auml: 196,\n    Barv: 10983,\n    Beta: 914,\n    Bopf: 120121,\n    Bscr: 8492,\n    CHcy: 1063,\n    COPY: 169,\n    Cdot: 266,\n    Copf: 8450,\n    Cscr: 119966,\n    DJcy: 1026,\n    DScy: 1029,\n    DZcy: 1039,\n    Darr: 8609,\n    Dopf: 120123,\n    Dscr: 119967,\n    Edot: 278,\n    Eopf: 120124,\n    Escr: 8496,\n    Esim: 10867,\n    Euml: 203,\n    Fopf: 120125,\n    Fscr: 8497,\n    GJcy: 1027,\n    Gdot: 288,\n    Gopf: 120126,\n    Gscr: 119970,\n    Hopf: 8461,\n    Hscr: 8459,\n    IEcy: 1045,\n    IOcy: 1025,\n    Idot: 304,\n    Iopf: 120128,\n    Iota: 921,\n    Iscr: 8464,\n    Iuml: 207,\n    Jopf: 120129,\n    Jscr: 119973,\n    KHcy: 1061,\n    KJcy: 1036,\n    Kopf: 120130,\n    Kscr: 119974,\n    LJcy: 1033,\n    Lang: 10218,\n    Larr: 8606,\n    Lopf: 120131,\n    Lscr: 8466,\n    Mopf: 120132,\n    Mscr: 8499,\n    NJcy: 1034,\n    Nopf: 8469,\n    Nscr: 119977,\n    Oopf: 120134,\n    Oscr: 119978,\n    Ouml: 214,\n    Popf: 8473,\n    Pscr: 119979,\n    QUOT: 34,\n    Qopf: 8474,\n    Qscr: 119980,\n    Rang: 10219,\n    Rarr: 8608,\n    Ropf: 8477,\n    Rscr: 8475,\n    SHcy: 1064,\n    Sopf: 120138,\n    Sqrt: 8730,\n    Sscr: 119982,\n    Star: 8902,\n    TScy: 1062,\n    Topf: 120139,\n    Tscr: 119983,\n    Uarr: 8607,\n    Uopf: 120140,\n    Upsi: 978,\n    Uscr: 119984,\n    Uuml: 220,\n    Vbar: 10987,\n    Vert: 8214,\n    Vopf: 120141,\n    Vscr: 119985,\n    Wopf: 120142,\n    Wscr: 119986,\n    Xopf: 120143,\n    Xscr: 119987,\n    YAcy: 1071,\n    YIcy: 1031,\n    YUcy: 1070,\n    Yopf: 120144,\n    Yscr: 119988,\n    Yuml: 376,\n    ZHcy: 1046,\n    Zdot: 379,\n    Zeta: 918,\n    Zopf: 8484,\n    Zscr: 119989,\n    andd: 10844,\n    andv: 10842,\n    ange: 10660,\n    aopf: 120146,\n    apid: 8779,\n    apos: 39,\n    ascr: 119990,\n    auml: 228,\n    bNot: 10989,\n    bbrk: 9141,\n    beta: 946,\n    beth: 8502,\n    bnot: 8976,\n    bopf: 120147,\n    boxH: 9552,\n    boxV: 9553,\n    boxh: 9472,\n    boxv: 9474,\n    bscr: 119991,\n    bsim: 8765,\n    bsol: 92,\n    bull: 8226,\n    bump: 8782,\n    cdot: 267,\n    cent: 162,\n    chcy: 1095,\n    cirE: 10691,\n    circ: 710,\n    cire: 8791,\n    comp: 8705,\n    cong: 8773,\n    copf: 120148,\n    copy: 169,\n    cscr: 119992,\n    csub: 10959,\n    csup: 10960,\n    dArr: 8659,\n    dHar: 10597,\n    darr: 8595,\n    dash: 8208,\n    diam: 8900,\n    djcy: 1106,\n    dopf: 120149,\n    dscr: 119993,\n    dscy: 1109,\n    dsol: 10742,\n    dtri: 9663,\n    dzcy: 1119,\n    eDot: 8785,\n    ecir: 8790,\n    edot: 279,\n    emsp: 8195,\n    ensp: 8194,\n    eopf: 120150,\n    epar: 8917,\n    epsi: 1013,\n    escr: 8495,\n    esim: 8770,\n    euml: 235,\n    euro: 8364,\n    excl: 33,\n    flat: 9837,\n    fnof: 402,\n    fopf: 120151,\n    fork: 8916,\n    fscr: 119995,\n    gdot: 289,\n    geqq: 8807,\n    gjcy: 1107,\n    gnap: 10890,\n    gneq: 10888,\n    gopf: 120152,\n    gscr: 8458,\n    gsim: 8819,\n    gtcc: 10919,\n    hArr: 8660,\n    half: 189,\n    harr: 8596,\n    hbar: 8463,\n    hopf: 120153,\n    hscr: 119997,\n    iecy: 1077,\n    imof: 8887,\n    iocy: 1105,\n    iopf: 120154,\n    iota: 953,\n    iscr: 119998,\n    isin: 8712,\n    iuml: 239,\n    jopf: 120155,\n    jscr: 119999,\n    khcy: 1093,\n    kjcy: 1116,\n    kopf: 120156,\n    kscr: 120000,\n    lArr: 8656,\n    lHar: 10594,\n    lang: 10216,\n    larr: 8592,\n    late: 10925,\n    lcub: 123,\n    ldca: 10550,\n    ldsh: 8626,\n    leqq: 8806,\n    ljcy: 1113,\n    lnap: 10889,\n    lneq: 10887,\n    lopf: 120157,\n    lozf: 10731,\n    lpar: 40,\n    lscr: 120001,\n    lsim: 8818,\n    lsqb: 91,\n    ltcc: 10918,\n    ltri: 9667,\n    macr: 175,\n    male: 9794,\n    malt: 10016,\n    mlcp: 10971,\n    mldr: 8230,\n    mopf: 120158,\n    mscr: 120002,\n    nbsp: 160,\n    ncap: 10819,\n    ncup: 10818,\n    ngeq: 8817,\n    ngtr: 8815,\n    nisd: 8954,\n    njcy: 1114,\n    nldr: 8229,\n    nleq: 8816,\n    nmid: 8740,\n    nopf: 120159,\n    npar: 8742,\n    nscr: 120003,\n    nsim: 8769,\n    nsub: 8836,\n    nsup: 8837,\n    ntgl: 8825,\n    ntlg: 8824,\n    oast: 8859,\n    ocir: 8858,\n    odiv: 10808,\n    odot: 8857,\n    ogon: 731,\n    oint: 8750,\n    omid: 10678,\n    oopf: 120160,\n    opar: 10679,\n    ordf: 170,\n    ordm: 186,\n    oror: 10838,\n    oscr: 8500,\n    osol: 8856,\n    ouml: 246,\n    para: 182,\n    part: 8706,\n    perp: 8869,\n    phiv: 966,\n    plus: 43,\n    popf: 120161,\n    prap: 10935,\n    prec: 8826,\n    prnE: 10933,\n    prod: 8719,\n    prop: 8733,\n    pscr: 120005,\n    qint: 10764,\n    qopf: 120162,\n    qscr: 120006,\n    quot: 34,\n    rArr: 8658,\n    rHar: 10596,\n    race: 10714,\n    rang: 10217,\n    rarr: 8594,\n    rcub: 125,\n    rdca: 10551,\n    rdsh: 8627,\n    real: 8476,\n    rect: 9645,\n    rhov: 1009,\n    ring: 730,\n    ropf: 120163,\n    rpar: 41,\n    rscr: 120007,\n    rsqb: 93,\n    rtri: 9657,\n    scap: 10936,\n    scnE: 10934,\n    sdot: 8901,\n    sect: 167,\n    semi: 59,\n    sext: 10038,\n    shcy: 1096,\n    sime: 8771,\n    simg: 10910,\n    siml: 10909,\n    smid: 8739,\n    smte: 10924,\n    solb: 10692,\n    sopf: 120164,\n    spar: 8741,\n    squf: 9642,\n    sscr: 120008,\n    star: 9734,\n    subE: 10949,\n    sube: 8838,\n    succ: 8827,\n    sung: 9834,\n    sup1: 185,\n    sup2: 178,\n    sup3: 179,\n    supE: 10950,\n    supe: 8839,\n    tbrk: 9140,\n    tdot: 8411,\n    tint: 8749,\n    toea: 10536,\n    topf: 120165,\n    tosa: 10537,\n    trie: 8796,\n    tscr: 120009,\n    tscy: 1094,\n    uArr: 8657,\n    uHar: 10595,\n    uarr: 8593,\n    uopf: 120166,\n    upsi: 965,\n    uscr: 120010,\n    utri: 9653,\n    uuml: 252,\n    vArr: 8661,\n    vBar: 10984,\n    varr: 8597,\n    vert: 124,\n    vopf: 120167,\n    vscr: 120011,\n    wopf: 120168,\n    wscr: 120012,\n    xcap: 8898,\n    xcup: 8899,\n    xmap: 10236,\n    xnis: 8955,\n    xopf: 120169,\n    xscr: 120013,\n    xvee: 8897,\n    yacy: 1103,\n    yicy: 1111,\n    yopf: 120170,\n    yscr: 120014,\n    yucy: 1102,\n    yuml: 255,\n    zdot: 380,\n    zeta: 950,\n    zhcy: 1078,\n    zopf: 120171,\n    zscr: 120015,\n    zwnj: 8204,\n    AMP: 38,\n    Acy: 1040,\n    Afr: 120068,\n    And: 10835,\n    Bcy: 1041,\n    Bfr: 120069,\n    Cap: 8914,\n    Cfr: 8493,\n    Chi: 935,\n    Cup: 8915,\n    Dcy: 1044,\n    Del: 8711,\n    Dfr: 120071,\n    Dot: 168,\n    ENG: 330,\n    ETH: 208,\n    Ecy: 1069,\n    Efr: 120072,\n    Eta: 919,\n    Fcy: 1060,\n    Ffr: 120073,\n    Gcy: 1043,\n    Gfr: 120074,\n    Hat: 94,\n    Hfr: 8460,\n    Icy: 1048,\n    Ifr: 8465,\n    Int: 8748,\n    Jcy: 1049,\n    Jfr: 120077,\n    Kcy: 1050,\n    Kfr: 120078,\n    Lcy: 1051,\n    Lfr: 120079,\n    Lsh: 8624,\n    Map: 10501,\n    Mcy: 1052,\n    Mfr: 120080,\n    Ncy: 1053,\n    Nfr: 120081,\n    Not: 10988,\n    Ocy: 1054,\n    Ofr: 120082,\n    Pcy: 1055,\n    Pfr: 120083,\n    Phi: 934,\n    Psi: 936,\n    Qfr: 120084,\n    REG: 174,\n    Rcy: 1056,\n    Rfr: 8476,\n    Rho: 929,\n    Rsh: 8625,\n    Scy: 1057,\n    Sfr: 120086,\n    Sub: 8912,\n    Sum: 8721,\n    Sup: 8913,\n    Tab: 9,\n    Tau: 932,\n    Tcy: 1058,\n    Tfr: 120087,\n    Ucy: 1059,\n    Ufr: 120088,\n    Vcy: 1042,\n    Vee: 8897,\n    Vfr: 120089,\n    Wfr: 120090,\n    Xfr: 120091,\n    Ycy: 1067,\n    Yfr: 120092,\n    Zcy: 1047,\n    Zfr: 8488,\n    acd: 8767,\n    acy: 1072,\n    afr: 120094,\n    amp: 38,\n    and: 8743,\n    ang: 8736,\n    apE: 10864,\n    ape: 8778,\n    ast: 42,\n    bcy: 1073,\n    bfr: 120095,\n    bot: 8869,\n    cap: 8745,\n    cfr: 120096,\n    chi: 967,\n    cir: 9675,\n    cup: 8746,\n    dcy: 1076,\n    deg: 176,\n    dfr: 120097,\n    die: 168,\n    div: 247,\n    dot: 729,\n    ecy: 1101,\n    efr: 120098,\n    egs: 10902,\n    ell: 8467,\n    els: 10901,\n    eng: 331,\n    eta: 951,\n    eth: 240,\n    fcy: 1092,\n    ffr: 120099,\n    gEl: 10892,\n    gap: 10886,\n    gcy: 1075,\n    gel: 8923,\n    geq: 8805,\n    ges: 10878,\n    gfr: 120100,\n    ggg: 8921,\n    glE: 10898,\n    gla: 10917,\n    glj: 10916,\n    gnE: 8809,\n    gne: 10888,\n    hfr: 120101,\n    icy: 1080,\n    iff: 8660,\n    ifr: 120102,\n    int: 8747,\n    jcy: 1081,\n    jfr: 120103,\n    kcy: 1082,\n    kfr: 120104,\n    lEg: 10891,\n    lap: 10885,\n    lat: 10923,\n    lcy: 1083,\n    leg: 8922,\n    leq: 8804,\n    les: 10877,\n    lfr: 120105,\n    lgE: 10897,\n    lnE: 8808,\n    lne: 10887,\n    loz: 9674,\n    lrm: 8206,\n    lsh: 8624,\n    map: 8614,\n    mcy: 1084,\n    mfr: 120106,\n    mho: 8487,\n    mid: 8739,\n    nap: 8777,\n    ncy: 1085,\n    nfr: 120107,\n    nge: 8817,\n    ngt: 8815,\n    nis: 8956,\n    niv: 8715,\n    nle: 8816,\n    nlt: 8814,\n    not: 172,\n    npr: 8832,\n    nsc: 8833,\n    num: 35,\n    ocy: 1086,\n    ofr: 120108,\n    ogt: 10689,\n    ohm: 8486,\n    olt: 10688,\n    ord: 10845,\n    orv: 10843,\n    par: 8741,\n    pcy: 1087,\n    pfr: 120109,\n    phi: 966,\n    piv: 982,\n    prE: 10931,\n    pre: 10927,\n    psi: 968,\n    qfr: 120110,\n    rcy: 1088,\n    reg: 174,\n    rfr: 120111,\n    rho: 961,\n    rlm: 8207,\n    rsh: 8625,\n    scE: 10932,\n    sce: 10928,\n    scy: 1089,\n    sfr: 120112,\n    shy: 173,\n    sim: 8764,\n    smt: 10922,\n    sol: 47,\n    squ: 9633,\n    sub: 8834,\n    sum: 8721,\n    sup: 8835,\n    tau: 964,\n    tcy: 1090,\n    tfr: 120113,\n    top: 8868,\n    ucy: 1091,\n    ufr: 120114,\n    uml: 168,\n    vcy: 1074,\n    vee: 8744,\n    vfr: 120115,\n    wfr: 120116,\n    xfr: 120117,\n    ycy: 1099,\n    yen: 165,\n    yfr: 120118,\n    zcy: 1079,\n    zfr: 120119,\n    zwj: 8205,\n    DD: 8517,\n    GT: 62,\n    Gg: 8921,\n    Gt: 8811,\n    Im: 8465,\n    LT: 60,\n    Ll: 8920,\n    Lt: 8810,\n    Mu: 924,\n    Nu: 925,\n    Or: 10836,\n    Pi: 928,\n    Pr: 10939,\n    Re: 8476,\n    Sc: 10940,\n    Xi: 926,\n    ac: 8766,\n    af: 8289,\n    ap: 8776,\n    dd: 8518,\n    ee: 8519,\n    eg: 10906,\n    el: 10905,\n    gE: 8807,\n    ge: 8805,\n    gg: 8811,\n    gl: 8823,\n    gt: 62,\n    ic: 8291,\n    ii: 8520,\n    in: 8712,\n    it: 8290,\n    lE: 8806,\n    le: 8804,\n    lg: 8822,\n    ll: 8810,\n    lt: 60,\n    mp: 8723,\n    mu: 956,\n    ne: 8800,\n    ni: 8715,\n    nu: 957,\n    oS: 9416,\n    or: 8744,\n    pi: 960,\n    pm: 177,\n    pr: 8826,\n    rx: 8478,\n    sc: 8827,\n    wp: 8472,\n    wr: 8768,\n    xi: 958\n};\n\nconst windows_1252 = [\n    8364,\n    129,\n    8218,\n    402,\n    8222,\n    8230,\n    8224,\n    8225,\n    710,\n    8240,\n    352,\n    8249,\n    338,\n    141,\n    381,\n    143,\n    144,\n    8216,\n    8217,\n    8220,\n    8221,\n    8226,\n    8211,\n    8212,\n    732,\n    8482,\n    353,\n    8250,\n    339,\n    157,\n    382,\n    376\n];\nconst entity_pattern = new RegExp(`&(#?(?:x[\\\\w\\\\d]+|\\\\d+|${Object.keys(entities).join('|')}))(?:;|\\\\b)`, 'g');\nfunction decode_character_references(html) {\n    return html.replace(entity_pattern, (match, entity) => {\n        let code;\n        // Handle named entities\n        if (entity[0] !== '#') {\n            code = entities[entity];\n        }\n        else if (entity[1] === 'x') {\n            code = parseInt(entity.substring(2), 16);\n        }\n        else {\n            code = parseInt(entity.substring(1), 10);\n        }\n        if (!code) {\n            return match;\n        }\n        return String.fromCodePoint(validate_code(code));\n    });\n}\nconst NUL = 0;\n// some code points are verboten. If we were inserting HTML, the browser would replace the illegal\n// code points with alternatives in some cases - since we're bypassing that mechanism, we need\n// to replace them ourselves\n//\n// Source: http://en.wikipedia.org/wiki/Character_encodings_in_HTML#Illegal_characters\nfunction validate_code(code) {\n    // line feed becomes generic whitespace\n    if (code === 10) {\n        return 32;\n    }\n    // ASCII range. (Why someone would use HTML entities for ASCII characters I don't know, but...)\n    if (code < 128) {\n        return code;\n    }\n    // code points 128-159 are dealt with leniently by browsers, but they're incorrect. We need\n    // to correct the mistake or we'll end up with missing € signs and so on\n    if (code <= 159) {\n        return windows_1252[code - 128];\n    }\n    // basic multilingual plane\n    if (code < 55296) {\n        return code;\n    }\n    // UTF-16 surrogate halves\n    if (code <= 57343) {\n        return NUL;\n    }\n    // rest of the basic multilingual plane\n    if (code <= 65535) {\n        return code;\n    }\n    // supplementary multilingual plane 0x10000 - 0x1ffff\n    if (code >= 65536 && code <= 131071) {\n        return code;\n    }\n    // supplementary ideographic plane 0x20000 - 0x2ffff\n    if (code >= 131072 && code <= 196607) {\n        return code;\n    }\n    return NUL;\n}\n// based on http://developers.whatwg.org/syntax.html#syntax-tag-omission\nconst disallowed_contents = new Map([\n    ['li', new Set(['li'])],\n    ['dt', new Set(['dt', 'dd'])],\n    ['dd', new Set(['dt', 'dd'])],\n    [\n        'p',\n        new Set('address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul'.split(' '))\n    ],\n    ['rt', new Set(['rt', 'rp'])],\n    ['rp', new Set(['rt', 'rp'])],\n    ['optgroup', new Set(['optgroup'])],\n    ['option', new Set(['option', 'optgroup'])],\n    ['thead', new Set(['tbody', 'tfoot'])],\n    ['tbody', new Set(['tbody', 'tfoot'])],\n    ['tfoot', new Set(['tbody'])],\n    ['tr', new Set(['tr', 'tbody'])],\n    ['td', new Set(['td', 'th', 'tr'])],\n    ['th', new Set(['td', 'th', 'tr'])]\n]);\n// can this be a child of the parent element, or does it implicitly\n// close it, like `<li>one<li>two`?\nfunction closing_tag_omitted(current, next) {\n    if (disallowed_contents.has(current)) {\n        if (!next || disallowed_contents.get(current).has(next)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// eslint-disable-next-line no-useless-escape\nconst valid_tag_name = /^\\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\\-]*/;\nconst meta_tags = new Map([\n    ['svelte:head', 'Head'],\n    ['svelte:options', 'Options'],\n    ['svelte:window', 'Window'],\n    ['svelte:body', 'Body']\n]);\nconst valid_meta_tags = Array.from(meta_tags.keys()).concat('svelte:self', 'svelte:component', 'svelte:fragment');\nconst specials = new Map([\n    [\n        'script',\n        {\n            read: read_script,\n            property: 'js'\n        }\n    ],\n    [\n        'style',\n        {\n            read: read_style,\n            property: 'css'\n        }\n    ]\n]);\nconst SELF = /^svelte:self(?=[\\s/>])/;\nconst COMPONENT = /^svelte:component(?=[\\s/>])/;\nconst SLOT = /^svelte:fragment(?=[\\s/>])/;\nfunction parent_is_head(stack) {\n    let i = stack.length;\n    while (i--) {\n        const { type } = stack[i];\n        if (type === 'Head')\n            return true;\n        if (type === 'Element' || type === 'InlineComponent')\n            return false;\n    }\n    return false;\n}\nfunction tag(parser) {\n    const start = parser.index++;\n    let parent = parser.current();\n    if (parser.eat('!--')) {\n        const data = parser.read_until(/-->/);\n        parser.eat('-->', true, parser_errors.unclosed_comment);\n        parser.current().children.push({\n            start,\n            end: parser.index,\n            type: 'Comment',\n            data,\n            ignores: extract_svelte_ignore(data)\n        });\n        return;\n    }\n    const is_closing_tag = parser.eat('/');\n    const name = read_tag_name(parser);\n    if (meta_tags.has(name)) {\n        const slug = meta_tags.get(name).toLowerCase();\n        if (is_closing_tag) {\n            if ((name === 'svelte:window' || name === 'svelte:body') &&\n                parser.current().children.length) {\n                parser.error(parser_errors.invalid_element_content(slug, name), parser.current().children[0].start);\n            }\n        }\n        else {\n            if (name in parser.meta_tags) {\n                parser.error(parser_errors.duplicate_element(slug, name), start);\n            }\n            if (parser.stack.length > 1) {\n                parser.error(parser_errors.invalid_element_placement(slug, name), start);\n            }\n            parser.meta_tags[name] = true;\n        }\n    }\n    const type = meta_tags.has(name)\n        ? meta_tags.get(name)\n        : (/[A-Z]/.test(name[0]) || name === 'svelte:self' || name === 'svelte:component') ? 'InlineComponent'\n            : name === 'svelte:fragment' ? 'SlotTemplate'\n                : name === 'title' && parent_is_head(parser.stack) ? 'Title'\n                    : name === 'slot' && !parser.customElement ? 'Slot' : 'Element';\n    const element = {\n        start,\n        end: null,\n        type,\n        name,\n        attributes: [],\n        children: []\n    };\n    parser.allow_whitespace();\n    if (is_closing_tag) {\n        if (is_void(name)) {\n            parser.error(parser_errors.invalid_void_content(name), start);\n        }\n        parser.eat('>', true);\n        // close any elements that don't have their own closing tags, e.g. <div><p></div>\n        while (parent.name !== name) {\n            if (parent.type !== 'Element') {\n                const error = parser.last_auto_closed_tag && parser.last_auto_closed_tag.tag === name\n                    ? parser_errors.invalid_closing_tag_autoclosed(name, parser.last_auto_closed_tag.reason)\n                    : parser_errors.invalid_closing_tag_unopened(name);\n                parser.error(error, start);\n            }\n            parent.end = start;\n            parser.stack.pop();\n            parent = parser.current();\n        }\n        parent.end = parser.index;\n        parser.stack.pop();\n        if (parser.last_auto_closed_tag && parser.stack.length < parser.last_auto_closed_tag.depth) {\n            parser.last_auto_closed_tag = null;\n        }\n        return;\n    }\n    else if (closing_tag_omitted(parent.name, name)) {\n        parent.end = start;\n        parser.stack.pop();\n        parser.last_auto_closed_tag = {\n            tag: parent.name,\n            reason: name,\n            depth: parser.stack.length\n        };\n    }\n    const unique_names = new Set();\n    let attribute;\n    while ((attribute = read_attribute(parser, unique_names))) {\n        element.attributes.push(attribute);\n        parser.allow_whitespace();\n    }\n    if (name === 'svelte:component') {\n        const index = element.attributes.findIndex(attr => attr.type === 'Attribute' && attr.name === 'this');\n        if (!~index) {\n            parser.error(parser_errors.missing_component_definition, start);\n        }\n        const definition = element.attributes.splice(index, 1)[0];\n        if (definition.value === true || definition.value.length !== 1 || definition.value[0].type === 'Text') {\n            parser.error(parser_errors.invalid_component_definition, definition.start);\n        }\n        element.expression = definition.value[0].expression;\n    }\n    // special cases – top-level <script> and <style>\n    if (specials.has(name) && parser.stack.length === 1) {\n        const special = specials.get(name);\n        parser.eat('>', true);\n        const content = special.read(parser, start, element.attributes);\n        if (content)\n            parser[special.property].push(content);\n        return;\n    }\n    parser.current().children.push(element);\n    const self_closing = parser.eat('/') || is_void(name);\n    parser.eat('>', true);\n    if (self_closing) {\n        // don't push self-closing elements onto the stack\n        element.end = parser.index;\n    }\n    else if (name === 'textarea') {\n        // special case\n        element.children = read_sequence(parser, () => /^<\\/textarea(\\s[^>]*)?>/i.test(parser.template.slice(parser.index)));\n        parser.read(/^<\\/textarea(\\s[^>]*)?>/i);\n        element.end = parser.index;\n    }\n    else if (name === 'script' || name === 'style') {\n        // special case\n        const start = parser.index;\n        const data = parser.read_until(new RegExp(`</${name}>`));\n        const end = parser.index;\n        element.children.push({ start, end, type: 'Text', data });\n        parser.eat(`</${name}>`, true);\n        element.end = parser.index;\n    }\n    else {\n        parser.stack.push(element);\n    }\n}\nfunction read_tag_name(parser) {\n    const start = parser.index;\n    if (parser.read(SELF)) {\n        // check we're inside a block, otherwise this\n        // will cause infinite recursion\n        let i = parser.stack.length;\n        let legal = false;\n        while (i--) {\n            const fragment = parser.stack[i];\n            if (fragment.type === 'IfBlock' || fragment.type === 'EachBlock' || fragment.type === 'InlineComponent') {\n                legal = true;\n                break;\n            }\n        }\n        if (!legal) {\n            parser.error(parser_errors.invalid_self_placement, start);\n        }\n        return 'svelte:self';\n    }\n    if (parser.read(COMPONENT))\n        return 'svelte:component';\n    if (parser.read(SLOT))\n        return 'svelte:fragment';\n    const name = parser.read_until(/(\\s|\\/|>)/);\n    if (meta_tags.has(name))\n        return name;\n    if (name.startsWith('svelte:')) {\n        const match = fuzzymatch(name.slice(7), valid_meta_tags);\n        parser.error(parser_errors.invalid_tag_name_svelte_element(valid_meta_tags, match), start);\n    }\n    if (!valid_tag_name.test(name)) {\n        parser.error(parser_errors.invalid_tag_name, start);\n    }\n    return name;\n}\nfunction read_attribute(parser, unique_names) {\n    const start = parser.index;\n    function check_unique(name) {\n        if (unique_names.has(name)) {\n            parser.error(parser_errors.duplicate_attribute, start);\n        }\n        unique_names.add(name);\n    }\n    if (parser.eat('{')) {\n        parser.allow_whitespace();\n        if (parser.eat('...')) {\n            const expression = read_expression(parser);\n            parser.allow_whitespace();\n            parser.eat('}', true);\n            return {\n                start,\n                end: parser.index,\n                type: 'Spread',\n                expression\n            };\n        }\n        else {\n            const value_start = parser.index;\n            const name = parser.read_identifier();\n            parser.allow_whitespace();\n            parser.eat('}', true);\n            if (name === null) {\n                parser.error(parser_errors.empty_attribute_shorthand, start);\n            }\n            check_unique(name);\n            return {\n                start,\n                end: parser.index,\n                type: 'Attribute',\n                name,\n                value: [{\n                        start: value_start,\n                        end: value_start + name.length,\n                        type: 'AttributeShorthand',\n                        expression: {\n                            start: value_start,\n                            end: value_start + name.length,\n                            type: 'Identifier',\n                            name\n                        }\n                    }]\n            };\n        }\n    }\n    // eslint-disable-next-line no-useless-escape\n    const name = parser.read_until(/[\\s=\\/>\"']/);\n    if (!name)\n        return null;\n    let end = parser.index;\n    parser.allow_whitespace();\n    const colon_index = name.indexOf(':');\n    const type = colon_index !== -1 && get_directive_type(name.slice(0, colon_index));\n    let value = true;\n    if (parser.eat('=')) {\n        parser.allow_whitespace();\n        value = read_attribute_value(parser);\n        end = parser.index;\n    }\n    else if (parser.match_regex(/[\"']/)) {\n        parser.error(parser_errors.unexpected_token('='), parser.index);\n    }\n    if (type) {\n        const [directive_name, ...modifiers] = name.slice(colon_index + 1).split('|');\n        if (directive_name === '') {\n            parser.error(parser_errors.empty_directive_name(type), start + colon_index + 1);\n        }\n        if (type === 'Binding' && directive_name !== 'this') {\n            check_unique(directive_name);\n        }\n        else if (type !== 'EventHandler' && type !== 'Action') {\n            check_unique(name);\n        }\n        if (type === 'Ref') {\n            parser.error(parser_errors.invalid_ref_directive(directive_name), start);\n        }\n        if (type === 'StyleDirective') {\n            return {\n                start,\n                end,\n                type,\n                name: directive_name,\n                value\n            };\n        }\n        const first_value = value[0];\n        let expression = null;\n        if (first_value) {\n            const attribute_contains_text = value.length > 1 || first_value.type === 'Text';\n            if (attribute_contains_text) {\n                parser.error(parser_errors.invalid_directive_value, first_value.start);\n            }\n            else {\n                expression = first_value.expression;\n            }\n        }\n        const directive = {\n            start,\n            end,\n            type,\n            name: directive_name,\n            modifiers,\n            expression\n        };\n        if (type === 'Transition') {\n            const direction = name.slice(0, colon_index);\n            directive.intro = direction === 'in' || direction === 'transition';\n            directive.outro = direction === 'out' || direction === 'transition';\n        }\n        // Directive name is expression, e.g. <p class:isRed />\n        if (!directive.expression && (type === 'Binding' || type === 'Class')) {\n            directive.expression = {\n                start: directive.start + colon_index + 1,\n                end: directive.end,\n                type: 'Identifier',\n                name: directive.name\n            };\n        }\n        return directive;\n    }\n    check_unique(name);\n    return {\n        start,\n        end,\n        type: 'Attribute',\n        name,\n        value\n    };\n}\nfunction get_directive_type(name) {\n    if (name === 'use')\n        return 'Action';\n    if (name === 'animate')\n        return 'Animation';\n    if (name === 'bind')\n        return 'Binding';\n    if (name === 'class')\n        return 'Class';\n    if (name === 'style')\n        return 'StyleDirective';\n    if (name === 'on')\n        return 'EventHandler';\n    if (name === 'let')\n        return 'Let';\n    if (name === 'ref')\n        return 'Ref';\n    if (name === 'in' || name === 'out' || name === 'transition')\n        return 'Transition';\n}\nfunction read_attribute_value(parser) {\n    const quote_mark = parser.eat(\"'\") ? \"'\" : parser.eat('\"') ? '\"' : null;\n    if (quote_mark && parser.eat(quote_mark)) {\n        return [{\n                start: parser.index - 1,\n                end: parser.index - 1,\n                type: 'Text',\n                raw: '',\n                data: ''\n            }];\n    }\n    const regex = (quote_mark === \"'\" ? /'/ :\n        quote_mark === '\"' ? /\"/ :\n            /(\\/>|[\\s\"'=<>`])/);\n    let value;\n    try {\n        value = read_sequence(parser, () => !!parser.match_regex(regex));\n    }\n    catch (error) {\n        if (error.code === 'parse-error') {\n            // if the attribute value didn't close + self-closing tag\n            // eg: `<Component test={{a:1} />`\n            // acorn may throw a `Unterminated regular expression` because of `/>`\n            if (parser.template.slice(error.pos - 1, error.pos + 1) === '/>') {\n                parser.index = error.pos;\n                parser.error(parser_errors.unclosed_attribute_value(quote_mark || '}'));\n            }\n        }\n        throw error;\n    }\n    if (value.length === 0 && !quote_mark) {\n        parser.error(parser_errors.missing_attribute_value);\n    }\n    if (quote_mark)\n        parser.index += 1;\n    return value;\n}\nfunction read_sequence(parser, done) {\n    let current_chunk = {\n        start: parser.index,\n        end: null,\n        type: 'Text',\n        raw: '',\n        data: null\n    };\n    const chunks = [];\n    function flush(end) {\n        if (current_chunk.raw) {\n            current_chunk.data = decode_character_references(current_chunk.raw);\n            current_chunk.end = end;\n            chunks.push(current_chunk);\n        }\n    }\n    while (parser.index < parser.template.length) {\n        const index = parser.index;\n        if (done()) {\n            flush(parser.index);\n            return chunks;\n        }\n        else if (parser.eat('{')) {\n            flush(parser.index - 1);\n            parser.allow_whitespace();\n            const expression = read_expression(parser);\n            parser.allow_whitespace();\n            parser.eat('}', true);\n            chunks.push({\n                start: index,\n                end: parser.index,\n                type: 'MustacheTag',\n                expression\n            });\n            current_chunk = {\n                start: parser.index,\n                end: null,\n                type: 'Text',\n                raw: '',\n                data: null\n            };\n        }\n        else {\n            current_chunk.raw += parser.template[parser.index++];\n        }\n    }\n    parser.error(parser_errors.unexpected_eof);\n}\n\nconst SQUARE_BRACKET_OPEN = '['.charCodeAt(0);\nconst SQUARE_BRACKET_CLOSE = ']'.charCodeAt(0);\nconst CURLY_BRACKET_OPEN = '{'.charCodeAt(0);\nconst CURLY_BRACKET_CLOSE = '}'.charCodeAt(0);\nfunction is_bracket_open(code) {\n    return code === SQUARE_BRACKET_OPEN || code === CURLY_BRACKET_OPEN;\n}\nfunction is_bracket_close(code) {\n    return code === SQUARE_BRACKET_CLOSE || code === CURLY_BRACKET_CLOSE;\n}\nfunction is_bracket_pair(open, close) {\n    return ((open === SQUARE_BRACKET_OPEN && close === SQUARE_BRACKET_CLOSE) ||\n        (open === CURLY_BRACKET_OPEN && close === CURLY_BRACKET_CLOSE));\n}\nfunction get_bracket_close(open) {\n    if (open === SQUARE_BRACKET_OPEN) {\n        return SQUARE_BRACKET_CLOSE;\n    }\n    if (open === CURLY_BRACKET_OPEN) {\n        return CURLY_BRACKET_CLOSE;\n    }\n}\n\nfunction read_context(parser) {\n    const start = parser.index;\n    let i = parser.index;\n    const code = full_char_code_at(parser.template, i);\n    if (isIdentifierStart(code, true)) {\n        return {\n            type: 'Identifier',\n            name: parser.read_identifier(),\n            start,\n            end: parser.index\n        };\n    }\n    if (!is_bracket_open(code)) {\n        parser.error(parser_errors.unexpected_token_destructure);\n    }\n    const bracket_stack = [code];\n    i += code <= 0xffff ? 1 : 2;\n    while (i < parser.template.length) {\n        const code = full_char_code_at(parser.template, i);\n        if (is_bracket_open(code)) {\n            bracket_stack.push(code);\n        }\n        else if (is_bracket_close(code)) {\n            if (!is_bracket_pair(bracket_stack[bracket_stack.length - 1], code)) {\n                parser.error(parser_errors.unexpected_token(String.fromCharCode(get_bracket_close(bracket_stack[bracket_stack.length - 1]))));\n            }\n            bracket_stack.pop();\n            if (bracket_stack.length === 0) {\n                i += code <= 0xffff ? 1 : 2;\n                break;\n            }\n        }\n        i += code <= 0xffff ? 1 : 2;\n    }\n    parser.index = i;\n    const pattern_string = parser.template.slice(start, i);\n    try {\n        // the length of the `space_with_newline` has to be start - 1\n        // because we added a `(` in front of the pattern_string,\n        // which shifted the entire string to right by 1\n        // so we offset it by removing 1 character in the `space_with_newline`\n        // to achieve that, we remove the 1st space encountered,\n        // so it will not affect the `column` of the node\n        let space_with_newline = parser.template.slice(0, start).replace(/[^\\n]/g, ' ');\n        const first_space = space_with_newline.indexOf(' ');\n        space_with_newline = space_with_newline.slice(0, first_space) + space_with_newline.slice(first_space + 1);\n        return parse_expression_at(`${space_with_newline}(${pattern_string} = 1)`, start - 1).left;\n    }\n    catch (error) {\n        parser.acorn_error(error);\n    }\n}\n\nfunction trim_start(str) {\n    return str.replace(start_whitespace, '');\n}\nfunction trim_end(str) {\n    return str.replace(end_whitespace, '');\n}\n\nfunction to_string(node) {\n    switch (node.type) {\n        case 'IfBlock':\n            return '{#if} block';\n        case 'ThenBlock':\n            return '{:then} block';\n        case 'ElseBlock':\n            return '{:else} block';\n        case 'PendingBlock':\n        case 'AwaitBlock':\n            return '{#await} block';\n        case 'CatchBlock':\n            return '{:catch} block';\n        case 'EachBlock':\n            return '{#each} block';\n        case 'RawMustacheTag':\n            return '{@html} block';\n        case 'DebugTag':\n            return '{@debug} block';\n        case 'ConstTag':\n            return '{@const} tag';\n        case 'Element':\n        case 'InlineComponent':\n        case 'Slot':\n        case 'Title':\n            return `<${node.name}> tag`;\n        default:\n            return node.type;\n    }\n}\n\nfunction trim_whitespace(block, trim_before, trim_after) {\n    if (!block.children || block.children.length === 0)\n        return; // AwaitBlock\n    const first_child = block.children[0];\n    const last_child = block.children[block.children.length - 1];\n    if (first_child.type === 'Text' && trim_before) {\n        first_child.data = trim_start(first_child.data);\n        if (!first_child.data)\n            block.children.shift();\n    }\n    if (last_child.type === 'Text' && trim_after) {\n        last_child.data = trim_end(last_child.data);\n        if (!last_child.data)\n            block.children.pop();\n    }\n    if (block.else) {\n        trim_whitespace(block.else, trim_before, trim_after);\n    }\n    if (first_child.elseif) {\n        trim_whitespace(first_child, trim_before, trim_after);\n    }\n}\nfunction mustache(parser) {\n    const start = parser.index;\n    parser.index += 1;\n    parser.allow_whitespace();\n    // {/if}, {/each}, {/await} or {/key}\n    if (parser.eat('/')) {\n        let block = parser.current();\n        let expected;\n        if (closing_tag_omitted(block.name)) {\n            block.end = start;\n            parser.stack.pop();\n            block = parser.current();\n        }\n        if (block.type === 'ElseBlock' || block.type === 'PendingBlock' || block.type === 'ThenBlock' || block.type === 'CatchBlock') {\n            block.end = start;\n            parser.stack.pop();\n            block = parser.current();\n            expected = 'await';\n        }\n        if (block.type === 'IfBlock') {\n            expected = 'if';\n        }\n        else if (block.type === 'EachBlock') {\n            expected = 'each';\n        }\n        else if (block.type === 'AwaitBlock') {\n            expected = 'await';\n        }\n        else if (block.type === 'KeyBlock') {\n            expected = 'key';\n        }\n        else {\n            parser.error(parser_errors.unexpected_block_close);\n        }\n        parser.eat(expected, true);\n        parser.allow_whitespace();\n        parser.eat('}', true);\n        while (block.elseif) {\n            block.end = parser.index;\n            parser.stack.pop();\n            block = parser.current();\n            if (block.else) {\n                block.else.end = start;\n            }\n        }\n        // strip leading/trailing whitespace as necessary\n        const char_before = parser.template[block.start - 1];\n        const char_after = parser.template[parser.index];\n        const trim_before = !char_before || whitespace.test(char_before);\n        const trim_after = !char_after || whitespace.test(char_after);\n        trim_whitespace(block, trim_before, trim_after);\n        block.end = parser.index;\n        parser.stack.pop();\n    }\n    else if (parser.eat(':else')) {\n        if (parser.eat('if')) {\n            parser.error(parser_errors.invalid_elseif);\n        }\n        parser.allow_whitespace();\n        // :else if\n        if (parser.eat('if')) {\n            const block = parser.current();\n            if (block.type !== 'IfBlock') {\n                parser.error(parser.stack.some(block => block.type === 'IfBlock')\n                    ? parser_errors.invalid_elseif_placement_unclosed_block(to_string(block))\n                    : parser_errors.invalid_elseif_placement_outside_if);\n            }\n            parser.require_whitespace();\n            const expression = read_expression(parser);\n            parser.allow_whitespace();\n            parser.eat('}', true);\n            block.else = {\n                start: parser.index,\n                end: null,\n                type: 'ElseBlock',\n                children: [\n                    {\n                        start: parser.index,\n                        end: null,\n                        type: 'IfBlock',\n                        elseif: true,\n                        expression,\n                        children: []\n                    }\n                ]\n            };\n            parser.stack.push(block.else.children[0]);\n        }\n        else {\n            // :else\n            const block = parser.current();\n            if (block.type !== 'IfBlock' && block.type !== 'EachBlock') {\n                parser.error(parser.stack.some(block => block.type === 'IfBlock' || block.type === 'EachBlock')\n                    ? parser_errors.invalid_else_placement_unclosed_block(to_string(block))\n                    : parser_errors.invalid_else_placement_outside_if);\n            }\n            parser.allow_whitespace();\n            parser.eat('}', true);\n            block.else = {\n                start: parser.index,\n                end: null,\n                type: 'ElseBlock',\n                children: []\n            };\n            parser.stack.push(block.else);\n        }\n    }\n    else if (parser.match(':then') || parser.match(':catch')) {\n        const block = parser.current();\n        const is_then = parser.eat(':then') || !parser.eat(':catch');\n        if (is_then) {\n            if (block.type !== 'PendingBlock') {\n                parser.error(parser.stack.some(block => block.type === 'PendingBlock')\n                    ? parser_errors.invalid_then_placement_unclosed_block(to_string(block))\n                    : parser_errors.invalid_then_placement_without_await);\n            }\n        }\n        else {\n            if (block.type !== 'ThenBlock' && block.type !== 'PendingBlock') {\n                parser.error(parser.stack.some(block => block.type === 'ThenBlock' || block.type === 'PendingBlock')\n                    ? parser_errors.invalid_catch_placement_unclosed_block(to_string(block))\n                    : parser_errors.invalid_catch_placement_without_await);\n            }\n        }\n        block.end = start;\n        parser.stack.pop();\n        const await_block = parser.current();\n        if (!parser.eat('}')) {\n            parser.require_whitespace();\n            await_block[is_then ? 'value' : 'error'] = read_context(parser);\n            parser.allow_whitespace();\n            parser.eat('}', true);\n        }\n        const new_block = {\n            start,\n            end: null,\n            type: is_then ? 'ThenBlock' : 'CatchBlock',\n            children: [],\n            skip: false\n        };\n        await_block[is_then ? 'then' : 'catch'] = new_block;\n        parser.stack.push(new_block);\n    }\n    else if (parser.eat('#')) {\n        // {#if foo}, {#each foo} or {#await foo}\n        let type;\n        if (parser.eat('if')) {\n            type = 'IfBlock';\n        }\n        else if (parser.eat('each')) {\n            type = 'EachBlock';\n        }\n        else if (parser.eat('await')) {\n            type = 'AwaitBlock';\n        }\n        else if (parser.eat('key')) {\n            type = 'KeyBlock';\n        }\n        else {\n            parser.error(parser_errors.expected_block_type);\n        }\n        parser.require_whitespace();\n        const expression = read_expression(parser);\n        const block = type === 'AwaitBlock' ?\n            {\n                start,\n                end: null,\n                type,\n                expression,\n                value: null,\n                error: null,\n                pending: {\n                    start: null,\n                    end: null,\n                    type: 'PendingBlock',\n                    children: [],\n                    skip: true\n                },\n                then: {\n                    start: null,\n                    end: null,\n                    type: 'ThenBlock',\n                    children: [],\n                    skip: true\n                },\n                catch: {\n                    start: null,\n                    end: null,\n                    type: 'CatchBlock',\n                    children: [],\n                    skip: true\n                }\n            } :\n            {\n                start,\n                end: null,\n                type,\n                expression,\n                children: []\n            };\n        parser.allow_whitespace();\n        // {#each} blocks must declare a context – {#each list as item}\n        if (type === 'EachBlock') {\n            parser.eat('as', true);\n            parser.require_whitespace();\n            block.context = read_context(parser);\n            parser.allow_whitespace();\n            if (parser.eat(',')) {\n                parser.allow_whitespace();\n                block.index = parser.read_identifier();\n                if (!block.index)\n                    parser.error(parser_errors.expected_name);\n                parser.allow_whitespace();\n            }\n            if (parser.eat('(')) {\n                parser.allow_whitespace();\n                block.key = read_expression(parser);\n                parser.allow_whitespace();\n                parser.eat(')', true);\n                parser.allow_whitespace();\n            }\n        }\n        const await_block_shorthand = type === 'AwaitBlock' && parser.eat('then');\n        if (await_block_shorthand) {\n            if (parser.match_regex(/\\s*}/)) {\n                parser.allow_whitespace();\n            }\n            else {\n                parser.require_whitespace();\n                block.value = read_context(parser);\n                parser.allow_whitespace();\n            }\n        }\n        const await_block_catch_shorthand = !await_block_shorthand && type === 'AwaitBlock' && parser.eat('catch');\n        if (await_block_catch_shorthand) {\n            if (parser.match_regex(/\\s*}/)) {\n                parser.allow_whitespace();\n            }\n            else {\n                parser.require_whitespace();\n                block.error = read_context(parser);\n                parser.allow_whitespace();\n            }\n        }\n        parser.eat('}', true);\n        parser.current().children.push(block);\n        parser.stack.push(block);\n        if (type === 'AwaitBlock') {\n            let child_block;\n            if (await_block_shorthand) {\n                block.then.skip = false;\n                child_block = block.then;\n            }\n            else if (await_block_catch_shorthand) {\n                block.catch.skip = false;\n                child_block = block.catch;\n            }\n            else {\n                block.pending.skip = false;\n                child_block = block.pending;\n            }\n            child_block.start = parser.index;\n            parser.stack.push(child_block);\n        }\n    }\n    else if (parser.eat('@html')) {\n        // {@html content} tag\n        parser.require_whitespace();\n        const expression = read_expression(parser);\n        parser.allow_whitespace();\n        parser.eat('}', true);\n        parser.current().children.push({\n            start,\n            end: parser.index,\n            type: 'RawMustacheTag',\n            expression\n        });\n    }\n    else if (parser.eat('@debug')) {\n        let identifiers;\n        // Implies {@debug} which indicates \"debug all\"\n        if (parser.read(/\\s*}/)) {\n            identifiers = [];\n        }\n        else {\n            const expression = read_expression(parser);\n            identifiers = expression.type === 'SequenceExpression'\n                ? expression.expressions\n                : [expression];\n            identifiers.forEach(node => {\n                if (node.type !== 'Identifier') {\n                    parser.error(parser_errors.invalid_debug_args, node.start);\n                }\n            });\n            parser.allow_whitespace();\n            parser.eat('}', true);\n        }\n        parser.current().children.push({\n            start,\n            end: parser.index,\n            type: 'DebugTag',\n            identifiers\n        });\n    }\n    else if (parser.eat('@const')) {\n        // {@const a = b}\n        parser.require_whitespace();\n        const expression = read_expression(parser);\n        if (!(expression.type === 'AssignmentExpression' && expression.operator === '=')) {\n            parser.error({\n                code: 'invalid-const-args',\n                message: '{@const ...} must be an assignment.'\n            }, start);\n        }\n        parser.allow_whitespace();\n        parser.eat('}', true);\n        parser.current().children.push({\n            start,\n            end: parser.index,\n            type: 'ConstTag',\n            expression\n        });\n    }\n    else {\n        const expression = read_expression(parser);\n        parser.allow_whitespace();\n        parser.eat('}', true);\n        parser.current().children.push({\n            start,\n            end: parser.index,\n            type: 'MustacheTag',\n            expression\n        });\n    }\n}\n\nfunction text(parser) {\n    const start = parser.index;\n    let data = '';\n    while (parser.index < parser.template.length &&\n        !parser.match('<') &&\n        !parser.match('{')) {\n        data += parser.template[parser.index++];\n    }\n    const node = {\n        start,\n        end: parser.index,\n        type: 'Text',\n        raw: data,\n        data: decode_character_references(data)\n    };\n    parser.current().children.push(node);\n}\n\nfunction fragment(parser) {\n    if (parser.match('<')) {\n        return tag;\n    }\n    if (parser.match('{')) {\n        return mustache;\n    }\n    return text;\n}\n\nfunction getLocator(source, options) {\n    if (options === void 0) { options = {}; }\n    var offsetLine = options.offsetLine || 0;\n    var offsetColumn = options.offsetColumn || 0;\n    var originalLines = source.split('\\n');\n    var start = 0;\n    var lineRanges = originalLines.map(function (line, i) {\n        var end = start + line.length + 1;\n        var range = { start: start, end: end, line: i };\n        start = end;\n        return range;\n    });\n    var i = 0;\n    function rangeContains(range, index) {\n        return range.start <= index && index < range.end;\n    }\n    function getLocation(range, index) {\n        return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };\n    }\n    function locate(search, startIndex) {\n        if (typeof search === 'string') {\n            search = source.indexOf(search, startIndex || 0);\n        }\n        var range = lineRanges[i];\n        var d = search >= range.end ? 1 : -1;\n        while (range) {\n            if (rangeContains(range, search))\n                return getLocation(range, search);\n            i += d;\n            range = lineRanges[i];\n        }\n    }\n    return locate;\n}\nfunction locate(source, search, options) {\n    if (typeof options === 'number') {\n        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');\n    }\n    return getLocator(source, options)(search, options && options.startIndex);\n}\n\nfunction tabs_to_spaces(str) {\n    return str.replace(/^\\t+/, match => match.split('\\t').join('  '));\n}\nfunction get_code_frame(source, line, column) {\n    const lines = source.split('\\n');\n    const frame_start = Math.max(0, line - 2);\n    const frame_end = Math.min(line + 3, lines.length);\n    const digits = String(frame_end + 1).length;\n    return lines\n        .slice(frame_start, frame_end)\n        .map((str, i) => {\n        const isErrorLine = frame_start + i === line;\n        const line_num = String(i + frame_start + 1).padStart(digits, ' ');\n        if (isErrorLine) {\n            const indicator = ' '.repeat(digits + 2 + tabs_to_spaces(str.slice(0, column)).length) + '^';\n            return `${line_num}: ${tabs_to_spaces(str)}\\n${indicator}`;\n        }\n        return `${line_num}: ${tabs_to_spaces(str)}`;\n    })\n        .join('\\n');\n}\n\nclass CompileError extends Error {\n    toString() {\n        return `${this.message} (${this.start.line}:${this.start.column})\\n${this.frame}`;\n    }\n}\nfunction error(message, props) {\n    const error = new CompileError(message);\n    error.name = props.name;\n    const start = locate(props.source, props.start, { offsetLine: 1 });\n    const end = locate(props.source, props.end || props.start, { offsetLine: 1 });\n    error.code = props.code;\n    error.start = start;\n    error.end = end;\n    error.pos = props.start;\n    error.filename = props.filename;\n    error.frame = get_code_frame(props.source, start.line - 1, start.column);\n    throw error;\n}\n\nclass Parser$1 {\n    constructor(template, options) {\n        this.index = 0;\n        this.stack = [];\n        this.css = [];\n        this.js = [];\n        this.meta_tags = {};\n        if (typeof template !== 'string') {\n            throw new TypeError('Template must be a string');\n        }\n        this.template = template.replace(/\\s+$/, '');\n        this.filename = options.filename;\n        this.customElement = options.customElement;\n        this.html = {\n            start: null,\n            end: null,\n            type: 'Fragment',\n            children: []\n        };\n        this.stack.push(this.html);\n        let state = fragment;\n        while (this.index < this.template.length) {\n            state = state(this) || fragment;\n        }\n        if (this.stack.length > 1) {\n            const current = this.current();\n            const type = current.type === 'Element' ? `<${current.name}>` : 'Block';\n            const slug = current.type === 'Element' ? 'element' : 'block';\n            this.error({\n                code: `unclosed-${slug}`,\n                message: `${type} was left open`\n            }, current.start);\n        }\n        if (state !== fragment) {\n            this.error({\n                code: 'unexpected-eof',\n                message: 'Unexpected end of input'\n            });\n        }\n        if (this.html.children.length) {\n            let start = this.html.children[0].start;\n            while (whitespace.test(template[start]))\n                start += 1;\n            let end = this.html.children[this.html.children.length - 1].end;\n            while (whitespace.test(template[end - 1]))\n                end -= 1;\n            this.html.start = start;\n            this.html.end = end;\n        }\n        else {\n            this.html.start = this.html.end = null;\n        }\n    }\n    current() {\n        return this.stack[this.stack.length - 1];\n    }\n    acorn_error(err) {\n        this.error({\n            code: 'parse-error',\n            message: err.message.replace(/ \\(\\d+:\\d+\\)$/, '')\n        }, err.pos);\n    }\n    error({ code, message }, index = this.index) {\n        error(message, {\n            name: 'ParseError',\n            code,\n            source: this.template,\n            start: index,\n            filename: this.filename\n        });\n    }\n    eat(str, required, error) {\n        if (this.match(str)) {\n            this.index += str.length;\n            return true;\n        }\n        if (required) {\n            this.error(error ||\n                (this.index === this.template.length\n                    ? parser_errors.unexpected_eof_token(str)\n                    : parser_errors.unexpected_token(str)));\n        }\n        return false;\n    }\n    match(str) {\n        return this.template.slice(this.index, this.index + str.length) === str;\n    }\n    match_regex(pattern) {\n        const match = pattern.exec(this.template.slice(this.index));\n        if (!match || match.index !== 0)\n            return null;\n        return match[0];\n    }\n    allow_whitespace() {\n        while (this.index < this.template.length &&\n            whitespace.test(this.template[this.index])) {\n            this.index++;\n        }\n    }\n    read(pattern) {\n        const result = this.match_regex(pattern);\n        if (result)\n            this.index += result.length;\n        return result;\n    }\n    read_identifier(allow_reserved = false) {\n        const start = this.index;\n        let i = this.index;\n        const code = full_char_code_at(this.template, i);\n        if (!isIdentifierStart(code, true))\n            return null;\n        i += code <= 0xffff ? 1 : 2;\n        while (i < this.template.length) {\n            const code = full_char_code_at(this.template, i);\n            if (!isIdentifierChar(code, true))\n                break;\n            i += code <= 0xffff ? 1 : 2;\n        }\n        const identifier = this.template.slice(this.index, this.index = i);\n        if (!allow_reserved && reserved.has(identifier)) {\n            this.error({\n                code: 'unexpected-reserved-word',\n                message: `'${identifier}' is a reserved word in JavaScript and cannot be used here`\n            }, start);\n        }\n        return identifier;\n    }\n    read_until(pattern, error_message) {\n        if (this.index >= this.template.length) {\n            this.error(error_message || {\n                code: 'unexpected-eof',\n                message: 'Unexpected end of input'\n            });\n        }\n        const start = this.index;\n        const match = pattern.exec(this.template.slice(start));\n        if (match) {\n            this.index = start + match.index;\n            return this.template.slice(start, this.index);\n        }\n        this.index = this.template.length;\n        return this.template.slice(start);\n    }\n    require_whitespace() {\n        if (!whitespace.test(this.template[this.index])) {\n            this.error({\n                code: 'missing-whitespace',\n                message: 'Expected whitespace'\n            });\n        }\n        this.allow_whitespace();\n    }\n}\nfunction parse$3(template, options = {}) {\n    const parser = new Parser$1(template, options);\n    // TODO we may want to allow multiple <style> tags —\n    // one scoped, one global. for now, only allow one\n    if (parser.css.length > 1) {\n        parser.error(parser_errors.duplicate_style, parser.css[1].start);\n    }\n    const instance_scripts = parser.js.filter(script => script.context === 'default');\n    const module_scripts = parser.js.filter(script => script.context === 'module');\n    if (instance_scripts.length > 1) {\n        parser.error(parser_errors.invalid_script_instance, instance_scripts[1].start);\n    }\n    if (module_scripts.length > 1) {\n        parser.error(parser_errors.invalid_script_module, module_scripts[1].start);\n    }\n    return {\n        html: parser.html,\n        css: parser.css[0],\n        instance: instance_scripts[0],\n        module: module_scripts[0]\n    };\n}\n\nfunction is_head(node) {\n    return node && node.type === 'MemberExpression' && node.object.name === '@_document' && node.property.name === 'head';\n}\n\nclass Block$1 {\n    constructor(options) {\n        this.dependencies = new Set();\n        this.binding_group_initialised = new Set();\n        this.event_listeners = [];\n        this.variables = new Map();\n        this.has_update_method = false;\n        this.parent = options.parent;\n        this.renderer = options.renderer;\n        this.name = options.name;\n        this.type = options.type;\n        this.comment = options.comment;\n        this.wrappers = [];\n        // for keyed each blocks\n        this.key = options.key;\n        this.first = null;\n        this.bindings = options.bindings;\n        this.chunks = {\n            declarations: [],\n            init: [],\n            create: [],\n            claim: [],\n            hydrate: [],\n            mount: [],\n            measure: [],\n            fix: [],\n            animate: [],\n            intro: [],\n            update: [],\n            outro: [],\n            destroy: []\n        };\n        this.has_animation = false;\n        this.has_intro_method = false; // a block could have an intro method but not intro transitions, e.g. if a sibling block has intros\n        this.has_outro_method = false;\n        this.outros = 0;\n        this.get_unique_name = this.renderer.component.get_unique_name_maker();\n        this.aliases = new Map();\n        if (this.key)\n            this.aliases.set('key', this.get_unique_name('key'));\n    }\n    assign_variable_names() {\n        const seen = new Set();\n        const dupes = new Set();\n        let i = this.wrappers.length;\n        while (i--) {\n            const wrapper = this.wrappers[i];\n            if (!wrapper.var)\n                continue;\n            if (seen.has(wrapper.var.name)) {\n                dupes.add(wrapper.var.name);\n            }\n            seen.add(wrapper.var.name);\n        }\n        const counts = new Map();\n        i = this.wrappers.length;\n        while (i--) {\n            const wrapper = this.wrappers[i];\n            if (!wrapper.var)\n                continue;\n            let suffix = '';\n            if (dupes.has(wrapper.var.name)) {\n                const i = counts.get(wrapper.var.name) || 0;\n                counts.set(wrapper.var.name, i + 1);\n                suffix = i;\n            }\n            wrapper.var.name = this.get_unique_name(wrapper.var.name + suffix).name;\n        }\n    }\n    add_dependencies(dependencies) {\n        dependencies.forEach(dependency => {\n            this.dependencies.add(dependency);\n        });\n        this.has_update_method = true;\n        if (this.parent) {\n            this.parent.add_dependencies(dependencies);\n        }\n    }\n    add_element(id, render_statement, claim_statement, parent_node, no_detach) {\n        this.add_variable(id);\n        this.chunks.create.push(b `${id} = ${render_statement};`);\n        if (this.renderer.options.hydratable) {\n            this.chunks.claim.push(b `${id} = ${claim_statement || render_statement};`);\n        }\n        if (parent_node) {\n            this.chunks.mount.push(b `@append(${parent_node}, ${id});`);\n            if (is_head(parent_node) && !no_detach)\n                this.chunks.destroy.push(b `@detach(${id});`);\n        }\n        else {\n            this.chunks.mount.push(b `@insert(#target, ${id}, #anchor);`);\n            if (!no_detach)\n                this.chunks.destroy.push(b `if (detaching) @detach(${id});`);\n        }\n    }\n    add_intro(local) {\n        this.has_intros = this.has_intro_method = true;\n        if (!local && this.parent)\n            this.parent.add_intro();\n    }\n    add_outro(local) {\n        this.has_outros = this.has_outro_method = true;\n        this.outros += 1;\n        if (!local && this.parent)\n            this.parent.add_outro();\n    }\n    add_animation() {\n        this.has_animation = true;\n    }\n    add_variable(id, init) {\n        if (this.variables.has(id.name)) {\n            throw new Error(`Variable '${id.name}' already initialised with a different value`);\n        }\n        this.variables.set(id.name, { id, init });\n    }\n    alias(name) {\n        if (!this.aliases.has(name)) {\n            this.aliases.set(name, this.get_unique_name(name));\n        }\n        return this.aliases.get(name);\n    }\n    child(options) {\n        return new Block$1(Object.assign({}, this, { key: null }, options, { parent: this }));\n    }\n    get_contents(key) {\n        const { dev } = this.renderer.options;\n        if (this.has_outros) {\n            this.add_variable({ type: 'Identifier', name: '#current' });\n            if (this.chunks.intro.length > 0) {\n                this.chunks.intro.push(b `#current = true;`);\n                this.chunks.mount.push(b `#current = true;`);\n            }\n            if (this.chunks.outro.length > 0) {\n                this.chunks.outro.push(b `#current = false;`);\n            }\n        }\n        if (this.autofocus) {\n            if (this.autofocus.condition_expression) {\n                this.chunks.mount.push(b `if (${this.autofocus.condition_expression}) ${this.autofocus.element_var}.focus();`);\n            }\n            else {\n                this.chunks.mount.push(b `${this.autofocus.element_var}.focus();`);\n            }\n        }\n        this.render_listeners();\n        const properties = {};\n        const noop = x `@noop`;\n        properties.key = key;\n        if (this.first) {\n            properties.first = x `null`;\n            this.chunks.hydrate.push(b `this.first = ${this.first};`);\n        }\n        if (this.chunks.create.length === 0 && this.chunks.hydrate.length === 0) {\n            properties.create = noop;\n        }\n        else {\n            const hydrate = this.chunks.hydrate.length > 0 && (this.renderer.options.hydratable\n                ? b `this.h();`\n                : this.chunks.hydrate);\n            properties.create = x `function #create() {\n\t\t\t\t${this.chunks.create}\n\t\t\t\t${hydrate}\n\t\t\t}`;\n        }\n        if (this.renderer.options.hydratable || this.chunks.claim.length > 0) {\n            if (this.chunks.claim.length === 0 && this.chunks.hydrate.length === 0) {\n                properties.claim = noop;\n            }\n            else {\n                properties.claim = x `function #claim(#nodes) {\n\t\t\t\t\t${this.chunks.claim}\n\t\t\t\t\t${this.renderer.options.hydratable && this.chunks.hydrate.length > 0 && b `this.h();`}\n\t\t\t\t}`;\n            }\n        }\n        if (this.renderer.options.hydratable && this.chunks.hydrate.length > 0) {\n            properties.hydrate = x `function #hydrate() {\n\t\t\t\t${this.chunks.hydrate}\n\t\t\t}`;\n        }\n        if (this.chunks.mount.length === 0) {\n            properties.mount = noop;\n        }\n        else if (this.event_listeners.length === 0) {\n            properties.mount = x `function #mount(#target, #anchor) {\n\t\t\t\t${this.chunks.mount}\n\t\t\t}`;\n        }\n        else {\n            properties.mount = x `function #mount(#target, #anchor) {\n\t\t\t\t${this.chunks.mount}\n\t\t\t}`;\n        }\n        if (this.has_update_method || this.maintain_context) {\n            if (this.chunks.update.length === 0 && !this.maintain_context) {\n                properties.update = noop;\n            }\n            else {\n                const ctx = this.maintain_context ? x `#new_ctx` : x `#ctx`;\n                let dirty = { type: 'Identifier', name: '#dirty' };\n                if (!this.renderer.context_overflow && !this.parent) {\n                    dirty = { type: 'ArrayPattern', elements: [dirty] };\n                }\n                properties.update = x `function #update(${ctx}, ${dirty}) {\n\t\t\t\t\t${this.maintain_context && b `#ctx = ${ctx};`}\n\t\t\t\t\t${this.chunks.update}\n\t\t\t\t}`;\n            }\n        }\n        if (this.has_animation) {\n            properties.measure = x `function #measure() {\n\t\t\t\t${this.chunks.measure}\n\t\t\t}`;\n            properties.fix = x `function #fix() {\n\t\t\t\t${this.chunks.fix}\n\t\t\t}`;\n            properties.animate = x `function #animate() {\n\t\t\t\t${this.chunks.animate}\n\t\t\t}`;\n        }\n        if (this.has_intro_method || this.has_outro_method) {\n            if (this.chunks.intro.length === 0) {\n                properties.intro = noop;\n            }\n            else {\n                properties.intro = x `function #intro(#local) {\n\t\t\t\t\t${this.has_outros && b `if (#current) return;`}\n\t\t\t\t\t${this.chunks.intro}\n\t\t\t\t}`;\n            }\n            if (this.chunks.outro.length === 0) {\n                properties.outro = noop;\n            }\n            else {\n                properties.outro = x `function #outro(#local) {\n\t\t\t\t\t${this.chunks.outro}\n\t\t\t\t}`;\n            }\n        }\n        if (this.chunks.destroy.length === 0) {\n            properties.destroy = noop;\n        }\n        else {\n            properties.destroy = x `function #destroy(detaching) {\n\t\t\t\t${this.chunks.destroy}\n\t\t\t}`;\n        }\n        if (!this.renderer.component.compile_options.dev) {\n            // allow shorthand names\n            for (const name in properties) {\n                const property = properties[name];\n                if (property)\n                    property.id = null;\n            }\n        }\n        const return_value = x `{\n\t\t\tkey: ${properties.key},\n\t\t\tfirst: ${properties.first},\n\t\t\tc: ${properties.create},\n\t\t\tl: ${properties.claim},\n\t\t\th: ${properties.hydrate},\n\t\t\tm: ${properties.mount},\n\t\t\tp: ${properties.update},\n\t\t\tr: ${properties.measure},\n\t\t\tf: ${properties.fix},\n\t\t\ta: ${properties.animate},\n\t\t\ti: ${properties.intro},\n\t\t\to: ${properties.outro},\n\t\t\td: ${properties.destroy}\n\t\t}`;\n        const block = dev && this.get_unique_name('block');\n        const body = b `\n\t\t\t${this.chunks.declarations}\n\n\t\t\t${Array.from(this.variables.values()).map(({ id, init }) => {\n            return init\n                ? b `let ${id} = ${init}`\n                : b `let ${id}`;\n        })}\n\n\t\t\t${this.chunks.init}\n\n\t\t\t${dev\n            ? b `\n\t\t\t\t\tconst ${block} = ${return_value};\n\t\t\t\t\t@dispatch_dev(\"SvelteRegisterBlock\", {\n\t\t\t\t\t\tblock: ${block},\n\t\t\t\t\t\tid: ${this.name || 'create_fragment'}.name,\n\t\t\t\t\t\ttype: \"${this.type}\",\n\t\t\t\t\t\tsource: \"${this.comment ? this.comment.replace(/\"/g, '\\\\\"') : ''}\",\n\t\t\t\t\t\tctx: #ctx\n\t\t\t\t\t});\n\t\t\t\t\treturn ${block};`\n            : b `\n\t\t\t\t\treturn ${return_value};`}\n\t\t`;\n        return body;\n    }\n    has_content() {\n        return !!this.first ||\n            this.event_listeners.length > 0 ||\n            this.chunks.intro.length > 0 ||\n            this.chunks.outro.length > 0 ||\n            this.chunks.create.length > 0 ||\n            this.chunks.hydrate.length > 0 ||\n            this.chunks.claim.length > 0 ||\n            this.chunks.mount.length > 0 ||\n            this.chunks.update.length > 0 ||\n            this.chunks.destroy.length > 0 ||\n            this.has_animation;\n    }\n    render() {\n        const key = this.key && this.get_unique_name('key');\n        const args = [x `#ctx`];\n        if (key)\n            args.unshift(key);\n        const fn = b `function ${this.name}(${args}) {\n\t\t\t${this.get_contents(key)}\n\t\t}`;\n        return this.comment\n            ? b `\n\t\t\t\t// ${this.comment}\n\t\t\t\t${fn}`\n            : fn;\n    }\n    render_listeners(chunk = '') {\n        if (this.event_listeners.length > 0) {\n            this.add_variable({ type: 'Identifier', name: '#mounted' });\n            this.chunks.destroy.push(b `#mounted = false`);\n            const dispose = {\n                type: 'Identifier',\n                name: `#dispose${chunk}`\n            };\n            this.add_variable(dispose);\n            if (this.event_listeners.length === 1) {\n                this.chunks.mount.push(b `\n\t\t\t\t\t\tif (!#mounted) {\n\t\t\t\t\t\t\t${dispose} = ${this.event_listeners[0]};\n\t\t\t\t\t\t\t#mounted = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t`);\n                this.chunks.destroy.push(b `${dispose}();`);\n            }\n            else {\n                this.chunks.mount.push(b `\n\t\t\t\t\tif (!#mounted) {\n\t\t\t\t\t\t${dispose} = [\n\t\t\t\t\t\t\t${this.event_listeners}\n\t\t\t\t\t\t];\n\t\t\t\t\t\t#mounted = true;\n\t\t\t\t\t}\n\t\t\t\t`);\n                this.chunks.destroy.push(b `@run_all(${dispose});`);\n            }\n        }\n    }\n}\n\nclass Wrapper {\n    constructor(renderer, block, parent, node) {\n        this.node = node;\n        // make these non-enumerable so that they can be logged sensibly\n        // (TODO in dev only?)\n        Object.defineProperties(this, {\n            renderer: {\n                value: renderer\n            },\n            parent: {\n                value: parent\n            }\n        });\n        this.can_use_innerhtml = !renderer.options.hydratable;\n        this.is_static_content = !renderer.options.hydratable;\n        block.wrappers.push(this);\n    }\n    cannot_use_innerhtml() {\n        this.can_use_innerhtml = false;\n        if (this.parent)\n            this.parent.cannot_use_innerhtml();\n    }\n    not_static_content() {\n        this.is_static_content = false;\n        if (this.parent)\n            this.parent.not_static_content();\n    }\n    get_or_create_anchor(block, parent_node, parent_nodes) {\n        // TODO use this in EachBlock and IfBlock — tricky because\n        // children need to be created first\n        const needs_anchor = this.next ? !this.next.is_dom_node() : !parent_node || !this.parent.is_dom_node();\n        const anchor = needs_anchor\n            ? block.get_unique_name(`${this.var.name}_anchor`)\n            : (this.next && this.next.var) || { type: 'Identifier', name: 'null' };\n        if (needs_anchor) {\n            block.add_element(anchor, x `@empty()`, parent_nodes && x `@empty()`, parent_node);\n        }\n        return anchor;\n    }\n    get_update_mount_node(anchor) {\n        return ((this.parent && this.parent.is_dom_node())\n            ? this.parent.var\n            : x `${anchor}.parentNode`);\n    }\n    is_dom_node() {\n        return (this.node.type === 'Element' ||\n            this.node.type === 'Text' ||\n            this.node.type === 'MustacheTag');\n    }\n    render(_block, _parent_node, _parent_nodes) {\n        throw Error('Wrapper class is not renderable');\n    }\n}\n\nfunction create_debugging_comment(node, component) {\n    const { locate, source } = component;\n    let c = node.start;\n    if (node.type === 'ElseBlock') {\n        while (source[c - 1] !== '{')\n            c -= 1;\n        while (source[c - 1] === '{')\n            c -= 1;\n    }\n    let d;\n    if (node.type === 'InlineComponent' || node.type === 'Element' || node.type === 'SlotTemplate') {\n        if (node.children.length) {\n            d = node.children[0].start;\n            while (source[d - 1] !== '>')\n                d -= 1;\n        }\n        else {\n            d = node.start;\n            while (source[d] !== '>')\n                d += 1;\n            d += 1;\n        }\n    }\n    else if (node.type === 'Text' || node.type === 'Comment') {\n        d = node.end;\n    }\n    else {\n        // @ts-ignore\n        d = node.expression ? node.expression.node.end : c;\n        while (source[d] !== '}' && d <= source.length)\n            d += 1;\n        while (source[d] === '}')\n            d += 1;\n    }\n    const start = locate(c);\n    const loc = `(${start.line}:${start.column})`;\n    return `${loc} ${source.slice(c, d)}`.replace(/\\s/g, ' ');\n}\n\nclass Node$1 {\n    constructor(component, parent, _scope, info) {\n        this.start = info.start;\n        this.end = info.end;\n        this.type = info.type;\n        // this makes properties non-enumerable, which makes logging\n        // bearable. might have a performance cost. TODO remove in prod?\n        Object.defineProperties(this, {\n            component: {\n                value: component\n            },\n            parent: {\n                value: parent\n            }\n        });\n    }\n    cannot_use_innerhtml() {\n        if (this.can_use_innerhtml !== false) {\n            this.can_use_innerhtml = false;\n            if (this.parent)\n                this.parent.cannot_use_innerhtml();\n        }\n    }\n    find_nearest(selector) {\n        if (selector.test(this.type))\n            return this;\n        if (this.parent)\n            return this.parent.find_nearest(selector);\n    }\n    get_static_attribute_value(name) {\n        const attribute = this.attributes && this.attributes.find((attr) => attr.type === 'Attribute' && attr.name.toLowerCase() === name);\n        if (!attribute)\n            return null;\n        if (attribute.is_true)\n            return true;\n        if (attribute.chunks.length === 0)\n            return '';\n        if (attribute.chunks.length === 1 && attribute.chunks[0].type === 'Text') {\n            return attribute.chunks[0].data;\n        }\n        return null;\n    }\n    has_ancestor(type) {\n        return this.parent ?\n            this.parent.type === type || this.parent.has_ancestor(type) :\n            false;\n    }\n}\n\n// All compiler warnings should be listed and accessed from here\n/**\n * @internal\n */\nvar compiler_warnings = {\n    custom_element_no_tag: {\n        code: 'custom-element-no-tag',\n        message: 'No custom element \\'tag\\' option was specified. To automatically register a custom element, specify a name with a hyphen in it, e.g. <svelte:options tag=\"my-thing\"/>. To hide this warning, use <svelte:options tag={null}/>'\n    },\n    unused_export_let: (component, property) => ({\n        code: 'unused-export-let',\n        message: `${component} has unused export property '${property}'. If it is for external reference only, please consider using \\`export const ${property}\\``\n    }),\n    module_script_reactive_declaration: {\n        code: 'module-script-reactive-declaration',\n        message: '$: has no effect in a module script'\n    },\n    non_top_level_reactive_declaration: {\n        code: 'non-top-level-reactive-declaration',\n        message: '$: has no effect outside of the top-level'\n    },\n    module_script_variable_reactive_declaration: (names) => ({\n        code: 'module-script-reactive-declaration',\n        message: `${names.map(name => `\"${name}\"`).join(', ')} ${names.length > 1 ? 'are' : 'is'} declared in a module script and will not be reactive`\n    }),\n    missing_declaration: (name, has_script) => ({\n        code: 'missing-declaration',\n        message: `'${name}' is not defined` + (has_script ? '' : `. Consider adding a <script> block with 'export let ${name}' to declare a prop`)\n    }),\n    missing_custom_element_compile_options: {\n        code: 'missing-custom-element-compile-options',\n        message: \"The 'tag' option is used when generating a custom element. Did you forget the 'customElement: true' compile option?\"\n    },\n    css_unused_selector: (selector) => ({\n        code: 'css-unused-selector',\n        message: `Unused CSS selector \"${selector}\"`\n    }),\n    empty_block: {\n        code: 'empty-block',\n        message: 'Empty block'\n    },\n    reactive_component: (name) => ({\n        code: 'reactive-component',\n        message: `<${name}/> will not be reactive if ${name} changes. Use <svelte:component this={${name}}/> if you want this reactivity.`\n    }),\n    component_name_lowercase: (name) => ({\n        code: 'component-name-lowercase',\n        message: `<${name}> will be treated as an HTML element unless it begins with a capital letter`\n    }),\n    avoid_is: {\n        code: 'avoid-is',\n        message: 'The \\'is\\' attribute is not supported cross-browser and should be avoided'\n    },\n    invalid_html_attribute: (name, suggestion) => ({\n        code: 'invalid-html-attribute',\n        message: `'${name}' is not a valid HTML attribute. Did you mean '${suggestion}'?`\n    }),\n    a11y_aria_attributes: (name) => ({\n        code: 'a11y-aria-attributes',\n        message: `A11y: <${name}> should not have aria-* attributes`\n    }),\n    a11y_unknown_aria_attribute: (attribute, suggestion) => ({\n        code: 'a11y-unknown-aria-attribute',\n        message: `A11y: Unknown aria attribute 'aria-${attribute}'` + (suggestion ? ` (did you mean '${suggestion}'?)` : '')\n    }),\n    a11y_hidden: (name) => ({\n        code: 'a11y-hidden',\n        message: `A11y: <${name}> element should not be hidden`\n    }),\n    a11y_misplaced_role: (name) => ({\n        code: 'a11y-misplaced-role',\n        message: `A11y: <${name}> should not have role attribute`\n    }),\n    a11y_unknown_role: (role, suggestion) => ({\n        code: 'a11y-unknown-role',\n        message: `A11y: Unknown role '${role}'` + (suggestion ? ` (did you mean '${suggestion}'?)` : '')\n    }),\n    a11y_no_redundant_roles: (role) => ({\n        code: 'a11y-no-redundant-roles',\n        message: `A11y: Redundant role '${role}'`\n    }),\n    a11y_accesskey: {\n        code: 'a11y-accesskey',\n        message: 'A11y: Avoid using accesskey'\n    },\n    a11y_autofocus: {\n        code: 'a11y-autofocus',\n        message: 'A11y: Avoid using autofocus'\n    },\n    a11y_misplaced_scope: {\n        code: 'a11y-misplaced-scope',\n        message: 'A11y: The scope attribute should only be used with <th> elements'\n    },\n    a11y_positive_tabindex: {\n        code: 'a11y-positive-tabindex',\n        message: 'A11y: avoid tabindex values above zero'\n    },\n    a11y_invalid_attribute: (href_attribute, href_value) => ({\n        code: 'a11y-invalid-attribute',\n        message: `A11y: '${href_value}' is not a valid ${href_attribute} attribute`\n    }),\n    a11y_missing_attribute: (name, article, sequence) => ({\n        code: 'a11y-missing-attribute',\n        message: `A11y: <${name}> element should have ${article} ${sequence} attribute`\n    }),\n    a11y_img_redundant_alt: {\n        code: 'a11y-img-redundant-alt',\n        message: 'A11y: Screenreaders already announce <img> elements as an image.'\n    },\n    a11y_label_has_associated_control: {\n        code: 'a11y-label-has-associated-control',\n        message: 'A11y: A form label must be associated with a control.'\n    },\n    a11y_media_has_caption: {\n        code: 'a11y-media-has-caption',\n        message: 'A11y: <video> elements must have a <track kind=\"captions\">'\n    },\n    a11y_distracting_elements: (name) => ({\n        code: 'a11y-distracting-elements',\n        message: `A11y: Avoid <${name}> elements`\n    }),\n    a11y_structure_immediate: {\n        code: 'a11y-structure',\n        message: 'A11y: <figcaption> must be an immediate child of <figure>'\n    },\n    a11y_structure_first_or_last: {\n        code: 'a11y-structure',\n        message: 'A11y: <figcaption> must be first or last child of <figure>'\n    },\n    a11y_mouse_events_have_key_events: (event, accompanied_by) => ({\n        code: 'a11y-mouse-events-have-key-events',\n        message: `A11y: on:${event} must be accompanied by on:${accompanied_by}`\n    }),\n    a11y_missing_content: (name) => ({\n        code: 'a11y-missing-content',\n        message: `A11y: <${name}> element should have child content`\n    }),\n    redundant_event_modifier_for_touch: {\n        code: 'redundant-event-modifier',\n        message: 'Touch event handlers that don\\'t use the \\'event\\' object are passive by default'\n    },\n    redundant_event_modifier_passive: {\n        code: 'redundant-event-modifier',\n        message: 'The passive modifier only works with wheel and touch events'\n    }\n};\n\nclass AbstractBlock extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n    }\n    warn_if_empty_block() {\n        if (!this.children || this.children.length > 1)\n            return;\n        const child = this.children[0];\n        if (!child || (child.type === 'Text' && !/[^ \\r\\n\\f\\v\\t]/.test(child.data))) {\n            this.component.warn(this, compiler_warnings.empty_block);\n        }\n    }\n}\n\nfunction flatten_reference(node) {\n    const nodes = [];\n    const parts = [];\n    while (node.type === 'MemberExpression') {\n        nodes.unshift(node.property);\n        if (!node.computed) {\n            parts.unshift(node.property.name);\n        }\n        else {\n            const computed_property = to_string$1(node.property);\n            if (computed_property) {\n                parts.unshift(`[${computed_property}]`);\n            }\n        }\n        node = node.object;\n    }\n    const name = node.type === 'Identifier'\n        ? node.name\n        : node.type === 'ThisExpression' ? 'this' : null;\n    nodes.unshift(node);\n    parts.unshift(name);\n    return { name, nodes, parts };\n}\nfunction to_string$1(node) {\n    switch (node.type) {\n        case 'Literal':\n            return String(node.value);\n        case 'Identifier':\n            return node.name;\n    }\n}\n\nfunction create_scopes(expression) {\n    return analyze(expression);\n}\n\nfunction get_object(node) {\n    while (node.type === 'MemberExpression')\n        node = node.object;\n    return node;\n}\n\nconst reserved_keywords = new Set(['$$props', '$$restProps', '$$slots']);\nfunction is_reserved_keyword(name) {\n    return reserved_keywords.has(name);\n}\n\nfunction is_dynamic(variable) {\n    if (variable) {\n        if (variable.mutated || variable.reassigned)\n            return true; // dynamic internal state\n        if (!variable.module && variable.writable && variable.export_name)\n            return true; // writable props\n        if (is_reserved_keyword(variable.name))\n            return true;\n    }\n    return false;\n}\n\nfunction nodes_match(a, b) {\n    if (!!a !== !!b)\n        return false;\n    if (Array.isArray(a) !== Array.isArray(b))\n        return false;\n    if (a && typeof a === 'object') {\n        if (Array.isArray(a)) {\n            if (a.length !== b.length)\n                return false;\n            return a.every((child, i) => nodes_match(child, b[i]));\n        }\n        const a_keys = Object.keys(a).sort();\n        const b_keys = Object.keys(b).sort();\n        if (a_keys.length !== b_keys.length)\n            return false;\n        let i = a_keys.length;\n        while (i--) {\n            const key = a_keys[i];\n            if (b_keys[i] !== key)\n                return false;\n            if (key === 'start' || key === 'end')\n                continue;\n            if (!nodes_match(a[key], b[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return a === b;\n}\n\nfunction invalidate(renderer, scope, node, names, main_execution_context = false) {\n    const { component } = renderer;\n    const [head, ...tail] = Array.from(names)\n        .filter(name => {\n        const owner = scope.find_owner(name);\n        return !owner || owner === component.instance_scope;\n    })\n        .map(name => component.var_lookup.get(name))\n        .filter(variable => {\n        return variable && (!variable.hoistable &&\n            !variable.global &&\n            !variable.module &&\n            (variable.referenced ||\n                variable.subscribable ||\n                variable.is_reactive_dependency ||\n                variable.export_name ||\n                variable.name[0] === '$'));\n    });\n    function get_invalidated(variable, node) {\n        if (main_execution_context && !variable.subscribable && variable.name[0] !== '$') {\n            return node;\n        }\n        return renderer_invalidate(renderer, variable.name, undefined, main_execution_context);\n    }\n    if (!head) {\n        return node;\n    }\n    component.has_reactive_assignments = true;\n    if (node.type === 'AssignmentExpression' && node.operator === '=' && nodes_match(node.left, node.right) && tail.length === 0) {\n        return get_invalidated(head, node);\n    }\n    const is_store_value = head.name[0] === '$' && head.name[1] !== '$';\n    const extra_args = tail.map(variable => get_invalidated(variable)).filter(Boolean);\n    if (is_store_value) {\n        return x `@set_store_value(${head.name.slice(1)}, ${node}, ${head.name}, ${extra_args})`;\n    }\n    let invalidate;\n    if (!main_execution_context) {\n        const pass_value = (extra_args.length > 0 ||\n            (node.type === 'AssignmentExpression' && node.left.type !== 'Identifier') ||\n            (node.type === 'UpdateExpression' && (!node.prefix || node.argument.type !== 'Identifier')));\n        if (pass_value) {\n            extra_args.unshift({\n                type: 'Identifier',\n                name: head.name\n            });\n        }\n        invalidate = x `$$invalidate(${renderer.context_lookup.get(head.name).index}, ${node}, ${extra_args})`;\n    }\n    else {\n        // skip `$$invalidate` if it is in the main execution context\n        invalidate = extra_args.length ? [node, ...extra_args] : node;\n    }\n    if (head.subscribable && head.reassigned) {\n        const subscribe = `$$subscribe_${head.name}`;\n        invalidate = x `${subscribe}(${invalidate})`;\n    }\n    return invalidate;\n}\nfunction renderer_invalidate(renderer, name, value, main_execution_context = false) {\n    const variable = renderer.component.var_lookup.get(name);\n    if (variable && (variable.subscribable && (variable.reassigned || variable.export_name))) {\n        if (main_execution_context) {\n            return x `${`$$subscribe_${name}`}(${value || name})`;\n        }\n        else {\n            const member = renderer.context_lookup.get(name);\n            return x `${`$$subscribe_${name}`}($$invalidate(${member.index}, ${value || name}))`;\n        }\n    }\n    if (name[0] === '$' && name[1] !== '$') {\n        return x `${name.slice(1)}.set(${value || name})`;\n    }\n    if (variable && (variable.module || (!variable.referenced &&\n        !variable.is_reactive_dependency &&\n        !variable.export_name &&\n        !name.startsWith('$$')))) {\n        return value || name;\n    }\n    if (value) {\n        if (main_execution_context) {\n            return x `${value}`;\n        }\n        else {\n            const member = renderer.context_lookup.get(name);\n            return x `$$invalidate(${member.index}, ${value})`;\n        }\n    }\n    if (main_execution_context)\n        return;\n    // if this is a reactive declaration, invalidate dependencies recursively\n    const deps = new Set([name]);\n    deps.forEach(name => {\n        const reactive_declarations = renderer.component.reactive_declarations.filter(x => x.assignees.has(name));\n        reactive_declarations.forEach(declaration => {\n            declaration.dependencies.forEach(name => {\n                deps.add(name);\n            });\n        });\n    });\n    // TODO ideally globals etc wouldn't be here in the first place\n    const filtered = Array.from(deps).filter(n => renderer.context_lookup.has(n));\n    if (!filtered.length)\n        return null;\n    return filtered\n        .map(n => x `$$invalidate(${renderer.context_lookup.get(n).index}, ${n})`)\n        .reduce((lhs, rhs) => x `${lhs}, ${rhs}`);\n}\n\nfunction replace_object(node, replacement) {\n    if (node.type === 'Identifier')\n        return replacement;\n    const ancestor = node;\n    let parent;\n    while (node.type === 'MemberExpression') {\n        parent = node;\n        node = node.object;\n    }\n    parent.object = replacement;\n    return ancestor;\n}\n\nfunction is_contextual(component, scope, name) {\n    if (is_reserved_keyword(name))\n        return true;\n    // if it's a name below root scope, it's contextual\n    if (!scope.is_top_level(name))\n        return true;\n    const variable = component.var_lookup.get(name);\n    // hoistables, module declarations, and imports are non-contextual\n    if (!variable || variable.hoistable)\n        return false;\n    // assume contextual\n    return true;\n}\n\n// adapted from klona v2.0.4 - https://github.com/lukeed/klona\n// (c) Luke Edwards, under MIT License\n// The sole modification is to skip function values in objects when cloning, so we don't break tests.\nfunction clone(val) {\n    let k, out, tmp;\n    if (Array.isArray(val)) {\n        out = Array(k = val.length);\n        while (k--)\n            out[k] = (tmp = val[k]) && typeof tmp === 'object' ? clone(tmp) : tmp;\n        return out;\n    }\n    if (Object.prototype.toString.call(val) === '[object Object]') {\n        out = {}; // null\n        for (k in val) {\n            if (k === '__proto__') {\n                Object.defineProperty(out, k, {\n                    value: clone(val[k]),\n                    configurable: true,\n                    enumerable: true,\n                    writable: true\n                });\n            }\n            else if (typeof val[k] !== 'function') { // MODIFICATION: skip functions\n                out[k] = (tmp = val[k]) && typeof tmp === 'object' ? clone(tmp) : tmp;\n            }\n        }\n        return out;\n    }\n    return val;\n}\n\n// All compiler errors should be listed and accessed from here\n/**\n * @internal\n */\nvar compiler_errors = {\n    invalid_binding_elements: (element, binding) => ({\n        code: 'invalid-binding',\n        message: `'${binding}' is not a valid binding on <${element}> elements`\n    }),\n    invalid_binding_element_with: (elements, binding) => ({\n        code: 'invalid-binding',\n        message: `'${binding}' binding can only be used with ${elements}`\n    }),\n    invalid_binding_on: (binding, element, post) => ({\n        code: 'invalid-binding',\n        message: `'${binding}' is not a valid binding on ${element}` + (post || '')\n    }),\n    invalid_binding_foreign: (binding) => ({\n        code: 'invalid-binding',\n        message: `'${binding}' is not a valid binding. Foreign elements only support bind:this`\n    }),\n    invalid_binding_no_checkbox: (binding, is_radio) => ({\n        code: 'invalid-binding',\n        message: `'${binding}' binding can only be used with <input type=\"checkbox\">` + (is_radio ? ' — for <input type=\"radio\">, use \\'group\\' binding' : '')\n    }),\n    invalid_binding: (binding) => ({\n        code: 'invalid-binding',\n        message: `'${binding}' is not a valid binding`\n    }),\n    invalid_binding_window: (parts) => ({\n        code: 'invalid-binding',\n        message: `Bindings on <svelte:window> must be to top-level properties, e.g. '${parts[parts.length - 1]}' rather than '${parts.join('.')}'`\n    }),\n    invalid_binding_let: {\n        code: 'invalid-binding',\n        message: 'Cannot bind to a variable declared with the let: directive'\n    },\n    invalid_binding_await: {\n        code: 'invalid-binding',\n        message: 'Cannot bind to a variable declared with {#await ... then} or {:catch} blocks'\n    },\n    invalid_binding_const: {\n        code: 'invalid-binding',\n        message: 'Cannot bind to a variable declared with {@const ...}'\n    },\n    invalid_binding_writibale: {\n        code: 'invalid-binding',\n        message: 'Cannot bind to a variable which is not writable'\n    },\n    binding_undeclared: (name) => ({\n        code: 'binding-undeclared',\n        message: `${name} is not declared`\n    }),\n    invalid_type: {\n        code: 'invalid-type',\n        message: '\\'type\\' attribute cannot be dynamic if input uses two-way binding'\n    },\n    missing_type: {\n        code: 'missing-type',\n        message: '\\'type\\' attribute must be specified'\n    },\n    dynamic_multiple_attribute: {\n        code: 'dynamic-multiple-attribute',\n        message: '\\'multiple\\' attribute cannot be dynamic if select uses two-way binding'\n    },\n    missing_contenteditable_attribute: {\n        code: 'missing-contenteditable-attribute',\n        message: '\\'contenteditable\\' attribute is required for textContent and innerHTML two-way bindings'\n    },\n    dynamic_contenteditable_attribute: {\n        code: 'dynamic-contenteditable-attribute',\n        message: '\\'contenteditable\\' attribute cannot be dynamic if element uses two-way binding'\n    },\n    invalid_event_modifier_combination: (modifier1, modifier2) => ({\n        code: 'invalid-event-modifier',\n        message: `The '${modifier1}' and '${modifier2}' modifiers cannot be used together`\n    }),\n    invalid_event_modifier_legacy: (modifier) => ({\n        code: 'invalid-event-modifier',\n        message: `The '${modifier}' modifier cannot be used in legacy mode`\n    }),\n    invalid_event_modifier: (valid) => ({\n        code: 'invalid-event-modifier',\n        message: `Valid event modifiers are ${valid}`\n    }),\n    invalid_event_modifier_component: {\n        code: 'invalid-event-modifier',\n        message: \"Event modifiers other than 'once' can only be used on DOM elements\"\n    },\n    textarea_duplicate_value: {\n        code: 'textarea-duplicate-value',\n        message: 'A <textarea> can have either a value attribute or (equivalently) child content, but not both'\n    },\n    illegal_attribute: (name) => ({\n        code: 'illegal-attribute',\n        message: `'${name}' is not a valid attribute name`\n    }),\n    invalid_slot_attribute: {\n        code: 'invalid-slot-attribute',\n        message: 'slot attribute cannot have a dynamic value'\n    },\n    duplicate_slot_attribute: (name) => ({\n        code: 'duplicate-slot-attribute',\n        message: `Duplicate '${name}' slot`\n    }),\n    invalid_slotted_content: {\n        code: 'invalid-slotted-content',\n        message: 'Element with a slot=\\'...\\' attribute must be a child of a component or a descendant of a custom element'\n    },\n    invalid_attribute_head: {\n        code: 'invalid-attribute',\n        message: '<svelte:head> should not have any attributes or directives'\n    },\n    invalid_action: {\n        code: 'invalid-action',\n        message: 'Actions can only be applied to DOM elements, not components'\n    },\n    invalid_class: {\n        code: 'invalid-class',\n        message: 'Classes can only be applied to DOM elements, not components'\n    },\n    invalid_transition: {\n        code: 'invalid-transition',\n        message: 'Transitions can only be applied to DOM elements, not components'\n    },\n    invalid_let: {\n        code: 'invalid-let',\n        message: 'let directive value must be an identifier or an object/array pattern'\n    },\n    invalid_slot_directive: {\n        code: 'invalid-slot-directive',\n        message: '<slot> cannot have directives'\n    },\n    dynamic_slot_name: {\n        code: 'dynamic-slot-name',\n        message: '<slot> name cannot be dynamic'\n    },\n    invalid_slot_name: {\n        code: 'invalid-slot-name',\n        message: 'default is a reserved word — it cannot be used as a slot name'\n    },\n    invalid_slot_attribute_value_missing: {\n        code: 'invalid-slot-attribute',\n        message: 'slot attribute value is missing'\n    },\n    invalid_slotted_content_fragment: {\n        code: 'invalid-slotted-content',\n        message: '<svelte:fragment> must be a child of a component'\n    },\n    illegal_attribute_title: {\n        code: 'illegal-attribute',\n        message: '<title> cannot have attributes'\n    },\n    illegal_structure_title: {\n        code: 'illegal-structure',\n        message: '<title> can only contain text and {tags}'\n    },\n    duplicate_transition: (directive, parent_directive) => {\n        function describe(_directive) {\n            return _directive === 'transition'\n                ? \"a 'transition'\"\n                : `an '${_directive}'`;\n        }\n        const message = directive === parent_directive\n            ? `An element can only have one '${directive}' directive`\n            : `An element cannot have both ${describe(parent_directive)} directive and ${describe(directive)} directive`;\n        return {\n            code: 'duplicate-transition',\n            message\n        };\n    },\n    contextual_store: {\n        code: 'contextual-store',\n        message: 'Stores must be declared at the top level of the component (this may change in a future version of Svelte)'\n    },\n    default_export: {\n        code: 'default-export',\n        message: 'A component cannot have a default export'\n    },\n    illegal_declaration: {\n        code: 'illegal-declaration',\n        message: 'The $ prefix is reserved, and cannot be used for variable and import names'\n    },\n    illegal_subscription: {\n        code: 'illegal-subscription',\n        message: 'Cannot reference store value inside <script context=\"module\">'\n    },\n    illegal_global: (name) => ({\n        code: 'illegal-global',\n        message: `${name} is an illegal variable name`\n    }),\n    illegal_variable_declaration: {\n        code: 'illegal-variable-declaration',\n        message: 'Cannot declare same variable name which is imported inside <script context=\"module\">'\n    },\n    cyclical_reactive_declaration: (cycle) => ({\n        code: 'cyclical-reactive-declaration',\n        message: `Cyclical dependency detected: ${cycle.join(' → ')}`\n    }),\n    invalid_tag_property: {\n        code: 'invalid-tag-property',\n        message: \"tag name must be two or more words joined by the '-' character\"\n    },\n    invalid_tag_attribute: {\n        code: 'invalid-tag-attribute',\n        message: \"'tag' must be a string literal\"\n    },\n    invalid_namespace_property: (namespace, suggestion) => ({\n        code: 'invalid-namespace-property',\n        message: `Invalid namespace '${namespace}'` + (suggestion ? ` (did you mean '${suggestion}'?)` : '')\n    }),\n    invalid_namespace_attribute: {\n        code: 'invalid-namespace-attribute',\n        message: \"The 'namespace' attribute must be a string literal representing a valid namespace\"\n    },\n    invalid_attribute_value: (name) => ({\n        code: `invalid-${name}-value`,\n        message: `${name} attribute must be true or false`\n    }),\n    invalid_options_attribute_unknown: {\n        code: 'invalid-options-attribute',\n        message: '<svelte:options> unknown attribute'\n    },\n    invalid_options_attribute: {\n        code: 'invalid-options-attribute',\n        message: \"<svelte:options> can only have static 'tag', 'namespace', 'accessors', 'immutable' and 'preserveWhitespace' attributes\"\n    },\n    css_invalid_global: {\n        code: 'css-invalid-global',\n        message: ':global(...) can be at the start or end of a selector sequence, but not in the middle'\n    },\n    css_invalid_global_selector: {\n        code: 'css-invalid-global-selector',\n        message: ':global(...) must contain a single selector'\n    },\n    duplicate_animation: {\n        code: 'duplicate-animation',\n        message: \"An element can only have one 'animate' directive\"\n    },\n    invalid_animation_immediate: {\n        code: 'invalid-animation',\n        message: 'An element that uses the animate directive must be the immediate child of a keyed each block'\n    },\n    invalid_animation_sole: {\n        code: 'invalid-animation',\n        message: 'An element that uses the animate directive must be the sole child of a keyed each block'\n    },\n    invalid_directive_value: {\n        code: 'invalid-directive-value',\n        message: 'Can only bind to an identifier (e.g. `foo`) or a member expression (e.g. `foo.bar` or `foo[baz]`)'\n    },\n    invalid_const_placement: {\n        code: 'invalid-const-placement',\n        message: '{@const} must be the immediate child of {#each}, {:then}, {:catch}, <svelte:fragment> or <Component>'\n    },\n    invalid_const_declaration: (name) => ({\n        code: 'invalid-const-declaration',\n        message: `'${name}' has already been declared`\n    }),\n    invalid_const_update: (name) => ({\n        code: 'invalid-const-update',\n        message: `'${name}' is declared using {@const ...} and is read-only`\n    }),\n    cyclical_const_tags: (cycle) => ({\n        code: 'cyclical-const-tags',\n        message: `Cyclical dependency detected: ${cycle.join(' → ')}`\n    }),\n    invalid_component_style_directive: {\n        code: 'invalid-component-style-directive',\n        message: 'Style directives cannot be used on components'\n    }\n};\n\nclass Expression {\n    constructor(component, owner, template_scope, info, lazy) {\n        this.type = 'Expression';\n        this.references = new Set();\n        this.dependencies = new Set();\n        this.contextual_dependencies = new Set();\n        this.declarations = [];\n        this.uses_context = false;\n        // TODO revert to direct property access in prod?\n        Object.defineProperties(this, {\n            component: {\n                value: component\n            }\n        });\n        this.node = info;\n        this.template_scope = template_scope;\n        this.owner = owner;\n        const { dependencies, contextual_dependencies, references } = this;\n        let { map, scope } = create_scopes(info);\n        this.scope = scope;\n        this.scope_map = map;\n        const expression = this;\n        let function_expression;\n        // discover dependencies, but don't change the code yet\n        walk(info, {\n            enter(node, parent, key) {\n                // don't manipulate shorthand props twice\n                if (key === 'key' && parent.shorthand)\n                    return;\n                // don't manipulate `import.meta`, `new.target`\n                if (node.type === 'MetaProperty')\n                    return this.skip();\n                if (map.has(node)) {\n                    scope = map.get(node);\n                }\n                if (!function_expression && /FunctionExpression/.test(node.type)) {\n                    function_expression = node;\n                }\n                if (is_reference(node, parent)) {\n                    const { name, nodes } = flatten_reference(node);\n                    references.add(name);\n                    if (scope.has(name))\n                        return;\n                    if (name[0] === '$') {\n                        const store_name = name.slice(1);\n                        if (template_scope.names.has(store_name) || scope.has(store_name)) {\n                            return component.error(node, compiler_errors.contextual_store);\n                        }\n                    }\n                    if (template_scope.is_let(name)) {\n                        if (!function_expression) { // TODO should this be `!lazy` ?\n                            contextual_dependencies.add(name);\n                            dependencies.add(name);\n                        }\n                    }\n                    else if (template_scope.names.has(name)) {\n                        expression.uses_context = true;\n                        contextual_dependencies.add(name);\n                        const owner = template_scope.get_owner(name);\n                        const is_index = owner.type === 'EachBlock' && owner.key && name === owner.index;\n                        if (!lazy || is_index) {\n                            template_scope.dependencies_for_name.get(name).forEach(name => dependencies.add(name));\n                        }\n                    }\n                    else {\n                        if (!lazy) {\n                            dependencies.add(name);\n                        }\n                        component.add_reference(node, name);\n                        component.warn_if_undefined(name, nodes[0], template_scope);\n                    }\n                    this.skip();\n                }\n                // track any assignments from template expressions as mutable\n                let names;\n                let deep = false;\n                if (function_expression) {\n                    if (node.type === 'AssignmentExpression') {\n                        deep = node.left.type === 'MemberExpression';\n                        names = extract_names(deep ? get_object(node.left) : node.left);\n                    }\n                    else if (node.type === 'UpdateExpression') {\n                        names = extract_names(get_object(node.argument));\n                    }\n                }\n                if (names) {\n                    names.forEach(name => {\n                        if (template_scope.names.has(name)) {\n                            if (template_scope.is_const(name)) {\n                                component.error(node, compiler_errors.invalid_const_update(name));\n                            }\n                            template_scope.dependencies_for_name.get(name).forEach(name => {\n                                const variable = component.var_lookup.get(name);\n                                if (variable)\n                                    variable[deep ? 'mutated' : 'reassigned'] = true;\n                            });\n                            const each_block = template_scope.get_owner(name);\n                            each_block.has_binding = true;\n                        }\n                        else {\n                            component.add_reference(node, name);\n                            const variable = component.var_lookup.get(name);\n                            if (variable)\n                                variable[deep ? 'mutated' : 'reassigned'] = true;\n                        }\n                    });\n                }\n            },\n            leave(node) {\n                if (map.has(node)) {\n                    scope = scope.parent;\n                }\n                if (node === function_expression) {\n                    function_expression = null;\n                }\n            }\n        });\n    }\n    dynamic_dependencies() {\n        return Array.from(this.dependencies).filter(name => {\n            if (this.template_scope.is_let(name))\n                return true;\n            if (is_reserved_keyword(name))\n                return true;\n            const variable = this.component.var_lookup.get(name);\n            return is_dynamic(variable);\n        });\n    }\n    // TODO move this into a render-dom wrapper?\n    manipulate(block, ctx) {\n        // TODO ideally we wouldn't end up calling this method\n        // multiple times\n        if (this.manipulated)\n            return this.manipulated;\n        const { component, declarations, scope_map: map, template_scope, owner } = this;\n        let scope = this.scope;\n        let function_expression;\n        let dependencies;\n        let contextual_dependencies;\n        const node = walk(this.node, {\n            enter(node, parent) {\n                if (node.type === 'Property' && node.shorthand) {\n                    node.value = clone(node.value);\n                    node.shorthand = false;\n                }\n                if (map.has(node)) {\n                    scope = map.get(node);\n                }\n                if (node.type === 'Identifier' && is_reference(node, parent)) {\n                    const { name } = flatten_reference(node);\n                    if (scope.has(name))\n                        return;\n                    if (function_expression) {\n                        if (template_scope.names.has(name)) {\n                            contextual_dependencies.add(name);\n                            template_scope.dependencies_for_name.get(name).forEach(dependency => {\n                                dependencies.add(dependency);\n                            });\n                        }\n                        else {\n                            dependencies.add(name);\n                            component.add_reference(node, name); // TODO is this redundant/misplaced?\n                        }\n                    }\n                    else if (is_contextual(component, template_scope, name)) {\n                        const reference = block.renderer.reference(node, ctx);\n                        this.replace(reference);\n                    }\n                    this.skip();\n                }\n                if (!function_expression) {\n                    if (node.type === 'AssignmentExpression') ;\n                    if (node.type === 'FunctionExpression' || node.type === 'ArrowFunctionExpression') {\n                        function_expression = node;\n                        dependencies = new Set();\n                        contextual_dependencies = new Set();\n                    }\n                }\n            },\n            leave(node, parent) {\n                if (map.has(node))\n                    scope = scope.parent;\n                if (node === function_expression) {\n                    const id = component.get_unique_name(sanitize(get_function_name(node, owner)));\n                    const declaration = b `const ${id} = ${node}`;\n                    if (owner.type === 'ConstTag') {\n                        walk(node, {\n                            enter(node) {\n                                if (node.type === 'Identifier') {\n                                    this.replace(block.renderer.reference(node, ctx));\n                                }\n                            }\n                        });\n                    }\n                    else if (dependencies.size === 0 && contextual_dependencies.size === 0) {\n                        // we can hoist this out of the component completely\n                        component.fully_hoisted.push(declaration);\n                        this.replace(id);\n                        component.add_var(node, {\n                            name: id.name,\n                            internal: true,\n                            hoistable: true,\n                            referenced: true\n                        });\n                    }\n                    else if (contextual_dependencies.size === 0) {\n                        // function can be hoisted inside the component init\n                        component.partly_hoisted.push(declaration);\n                        block.renderer.add_to_context(id.name);\n                        this.replace(block.renderer.reference(id));\n                    }\n                    else {\n                        // we need a combo block/init recipe\n                        const deps = Array.from(contextual_dependencies);\n                        const function_expression = node;\n                        const has_args = function_expression.params.length > 0;\n                        function_expression.params = [\n                            ...deps.map(name => ({ type: 'Identifier', name })),\n                            ...function_expression.params\n                        ];\n                        const context_args = deps.map(name => block.renderer.reference(name));\n                        component.partly_hoisted.push(declaration);\n                        block.renderer.add_to_context(id.name);\n                        const callee = block.renderer.reference(id);\n                        this.replace(id);\n                        const func_declaration = has_args\n                            ? b `function ${id}(...args) {\n\t\t\t\t\t\t\t\treturn ${callee}(${context_args}, ...args);\n\t\t\t\t\t\t\t}`\n                            : b `function ${id}() {\n\t\t\t\t\t\t\t\treturn ${callee}(${context_args});\n\t\t\t\t\t\t\t}`;\n                        if (owner.type === 'Attribute' && owner.parent.name === 'slot') {\n                            const dep_scopes = new Set(deps.map(name => template_scope.get_owner(name)));\n                            // find the nearest scopes\n                            let node = owner.parent;\n                            while (node && !dep_scopes.has(node)) {\n                                node = node.parent;\n                            }\n                            const func_expression = func_declaration[0];\n                            if (node.type === 'InlineComponent') {\n                                // <Comp let:data />\n                                this.replace(func_expression);\n                            }\n                            else {\n                                // {#each}, {#await}\n                                const func_id = component.get_unique_name(id.name + '_func');\n                                block.renderer.add_to_context(func_id.name, true);\n                                // rename #ctx -> child_ctx;\n                                walk(func_expression, {\n                                    enter(node) {\n                                        if (node.type === 'Identifier' && node.name === '#ctx') {\n                                            node.name = 'child_ctx';\n                                        }\n                                    }\n                                });\n                                // add to get_xxx_context\n                                // child_ctx[x] = function () { ... }\n                                template_scope.get_owner(deps[0]).contexts.push({\n                                    key: func_id,\n                                    modifier: () => func_expression,\n                                    default_modifier: node => node\n                                });\n                                this.replace(block.renderer.reference(func_id));\n                            }\n                        }\n                        else {\n                            declarations.push(func_declaration);\n                        }\n                    }\n                    function_expression = null;\n                    dependencies = null;\n                    contextual_dependencies = null;\n                    if (parent && parent.type === 'Property') {\n                        parent.method = false;\n                    }\n                }\n                if (node.type === 'AssignmentExpression' || node.type === 'UpdateExpression') {\n                    const assignee = node.type === 'AssignmentExpression' ? node.left : node.argument;\n                    const object_name = get_object(assignee).name;\n                    if (scope.has(object_name))\n                        return;\n                    // normally (`a = 1`, `b.c = 2`), there'll be a single name\n                    // (a or b). In destructuring cases (`[d, e] = [e, d]`) there\n                    // may be more, in which case we need to tack the extra ones\n                    // onto the initial function call\n                    const names = new Set(extract_names(assignee));\n                    const traced = new Set();\n                    names.forEach(name => {\n                        const dependencies = template_scope.dependencies_for_name.get(name);\n                        if (dependencies) {\n                            dependencies.forEach(name => traced.add(name));\n                        }\n                        else {\n                            traced.add(name);\n                        }\n                    });\n                    const context = block.bindings.get(object_name);\n                    if (context) {\n                        // for `{#each array as item}`\n                        // replace `item = 1` to `each_array[each_index] = 1`, this allow us to mutate the array\n                        // rather than mutating the local `item` variable\n                        const { snippet, object, property } = context;\n                        const replaced = replace_object(assignee, snippet);\n                        if (node.type === 'AssignmentExpression') {\n                            node.left = replaced;\n                        }\n                        else {\n                            node.argument = replaced;\n                        }\n                        contextual_dependencies.add(object.name);\n                        contextual_dependencies.add(property.name);\n                    }\n                    this.replace(invalidate(block.renderer, scope, node, traced));\n                }\n            }\n        });\n        if (declarations.length > 0) {\n            block.maintain_context = true;\n            declarations.forEach(declaration => {\n                block.chunks.init.push(declaration);\n            });\n        }\n        return (this.manipulated = node);\n    }\n}\nfunction get_function_name(_node, parent) {\n    if (parent.type === 'EventHandler') {\n        return `${parent.name}_handler`;\n    }\n    if (parent.type === 'Action') {\n        return `${parent.name}_function`;\n    }\n    return 'func';\n}\n\nfunction unpack_destructuring({ contexts, node, modifier = (node) => node, default_modifier = (node) => node, scope, component }) {\n    if (!node)\n        return;\n    if (node.type === 'Identifier') {\n        contexts.push({\n            key: node,\n            modifier,\n            default_modifier\n        });\n    }\n    else if (node.type === 'RestElement') {\n        contexts.push({\n            key: node.argument,\n            modifier,\n            default_modifier\n        });\n    }\n    else if (node.type === 'ArrayPattern') {\n        node.elements.forEach((element, i) => {\n            if (element && element.type === 'RestElement') {\n                unpack_destructuring({\n                    contexts,\n                    node: element,\n                    modifier: (node) => x `${modifier(node)}.slice(${i})`,\n                    default_modifier,\n                    scope,\n                    component\n                });\n            }\n            else if (element && element.type === 'AssignmentPattern') {\n                const n = contexts.length;\n                mark_referenced(element.right, scope, component);\n                unpack_destructuring({\n                    contexts,\n                    node: element.left,\n                    modifier: (node) => x `${modifier(node)}[${i}]`,\n                    default_modifier: (node, to_ctx) => x `${node} !== undefined ? ${node} : ${update_reference(contexts, n, element.right, to_ctx)}`,\n                    scope,\n                    component\n                });\n            }\n            else {\n                unpack_destructuring({\n                    contexts,\n                    node: element,\n                    modifier: (node) => x `${modifier(node)}[${i}]`,\n                    default_modifier,\n                    scope,\n                    component\n                });\n            }\n        });\n    }\n    else if (node.type === 'ObjectPattern') {\n        const used_properties = [];\n        node.properties.forEach((property) => {\n            if (property.type === 'RestElement') {\n                unpack_destructuring({\n                    contexts,\n                    node: property.argument,\n                    modifier: (node) => x `@object_without_properties(${modifier(node)}, [${used_properties}])`,\n                    default_modifier,\n                    scope,\n                    component\n                });\n            }\n            else {\n                const key = property.key;\n                const value = property.value;\n                used_properties.push(x `\"${key.name}\"`);\n                if (value.type === 'AssignmentPattern') {\n                    const n = contexts.length;\n                    mark_referenced(value.right, scope, component);\n                    unpack_destructuring({\n                        contexts,\n                        node: value.left,\n                        modifier: (node) => x `${modifier(node)}.${key.name}`,\n                        default_modifier: (node, to_ctx) => x `${node} !== undefined ? ${node} : ${update_reference(contexts, n, value.right, to_ctx)}`,\n                        scope,\n                        component\n                    });\n                }\n                else {\n                    unpack_destructuring({\n                        contexts,\n                        node: value,\n                        modifier: (node) => x `${modifier(node)}.${key.name}`,\n                        default_modifier,\n                        scope,\n                        component\n                    });\n                }\n            }\n        });\n    }\n}\nfunction update_reference(contexts, n, expression, to_ctx) {\n    const find_from_context = (node) => {\n        for (let i = n; i < contexts.length; i++) {\n            const { key } = contexts[i];\n            if (node.name === key.name) {\n                throw new Error(`Cannot access '${node.name}' before initialization`);\n            }\n        }\n        return to_ctx(node.name);\n    };\n    if (expression.type === 'Identifier') {\n        return find_from_context(expression);\n    }\n    // NOTE: avoid unnecessary deep clone?\n    expression = clone(expression);\n    walk(expression, {\n        enter(node, parent) {\n            if (is_reference(node, parent)) {\n                this.replace(find_from_context(node));\n                this.skip();\n            }\n        }\n    });\n    return expression;\n}\nfunction mark_referenced(node, scope, component) {\n    walk(node, {\n        enter(node, parent) {\n            if (is_reference(node, parent)) {\n                const { name } = flatten_reference(node);\n                if (!scope.is_let(name) && !scope.names.has(name)) {\n                    component.add_reference(node, name);\n                }\n            }\n        }\n    });\n}\n\nconst allowed_parents = new Set(['EachBlock', 'CatchBlock', 'ThenBlock', 'InlineComponent', 'SlotTemplate']);\nclass ConstTag extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.contexts = [];\n        this.assignees = new Set();\n        this.dependencies = new Set();\n        if (!allowed_parents.has(parent.type)) {\n            component.error(info, compiler_errors.invalid_const_placement);\n        }\n        this.node = info;\n        this.scope = scope;\n        const { assignees, dependencies } = this;\n        extract_identifiers(info.expression.left).forEach(({ name }) => {\n            assignees.add(name);\n            const owner = this.scope.get_owner(name);\n            if (owner === parent) {\n                component.error(info, compiler_errors.invalid_const_declaration(name));\n            }\n        });\n        walk(info.expression.right, {\n            enter(node, parent) {\n                if (is_reference(node, parent)) {\n                    const identifier = get_object(node);\n                    const { name } = identifier;\n                    dependencies.add(name);\n                }\n            }\n        });\n    }\n    parse_expression() {\n        unpack_destructuring({\n            contexts: this.contexts,\n            node: this.node.expression.left,\n            scope: this.scope,\n            component: this.component\n        });\n        this.expression = new Expression(this.component, this, this.scope, this.node.expression.right);\n        this.contexts.forEach(context => {\n            const owner = this.scope.get_owner(context.key.name);\n            if (owner && owner.type === 'ConstTag' && owner.parent === this.parent) {\n                this.component.error(this.node, compiler_errors.invalid_const_declaration(context.key.name));\n            }\n            this.scope.add(context.key.name, this.expression.dependencies, this);\n        });\n    }\n}\n\nclass PendingBlock extends AbstractBlock {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.children = map_children(component, parent, scope, info.children);\n        if (!info.skip) {\n            this.warn_if_empty_block();\n        }\n    }\n}\n\nclass CatchBlock extends AbstractBlock {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.scope = scope.child();\n        if (parent.catch_node) {\n            parent.catch_contexts.forEach(context => {\n                this.scope.add(context.key.name, parent.expression.dependencies, this);\n            });\n        }\n        ([this.const_tags, this.children] = get_const_tags(info.children, component, this, parent));\n        if (!info.skip) {\n            this.warn_if_empty_block();\n        }\n    }\n}\n\nclass AwaitBlock extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.expression = new Expression(component, this, scope, info.expression);\n        this.then_node = info.value;\n        this.catch_node = info.error;\n        if (this.then_node) {\n            this.then_contexts = [];\n            unpack_destructuring({ contexts: this.then_contexts, node: info.value, scope, component });\n        }\n        if (this.catch_node) {\n            this.catch_contexts = [];\n            unpack_destructuring({ contexts: this.catch_contexts, node: info.error, scope, component });\n        }\n        this.pending = new PendingBlock(component, this, scope, info.pending);\n        this.then = new ThenBlock(component, this, scope, info.then);\n        this.catch = new CatchBlock(component, this, scope, info.catch);\n    }\n}\n\nclass EventHandler extends Node$1 {\n    constructor(component, parent, template_scope, info) {\n        super(component, parent, template_scope, info);\n        this.uses_context = false;\n        this.can_make_passive = false;\n        this.name = info.name;\n        this.modifiers = new Set(info.modifiers);\n        if (info.expression) {\n            this.expression = new Expression(component, this, template_scope, info.expression);\n            this.uses_context = this.expression.uses_context;\n            if (/FunctionExpression/.test(info.expression.type) && info.expression.params.length === 0) {\n                // TODO make this detection more accurate — if `event.preventDefault` isn't called, and\n                // `event` is passed to another function, we can make it passive\n                this.can_make_passive = true;\n            }\n            else if (info.expression.type === 'Identifier') {\n                let node = component.node_for_declaration.get(info.expression.name);\n                if (node) {\n                    if (node.type === 'VariableDeclaration') {\n                        // for `const handleClick = () => {...}`, we want the [arrow] function expression node\n                        const declarator = node.declarations.find(d => d.id.name === info.expression.name);\n                        node = declarator && declarator.init;\n                    }\n                    if (node && (node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration' || node.type === 'ArrowFunctionExpression') && node.params.length === 0) {\n                        this.can_make_passive = true;\n                    }\n                }\n            }\n        }\n        else {\n            this.handler_name = component.get_unique_name(`${sanitize(this.name)}_handler`);\n        }\n    }\n    get reassigned() {\n        if (!this.expression) {\n            return false;\n        }\n        const node = this.expression.node;\n        if (/FunctionExpression/.test(node.type)) {\n            return false;\n        }\n        return this.expression.dynamic_dependencies().length > 0;\n    }\n}\n\nclass Action extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        const object = info.name.split('.')[0];\n        component.warn_if_undefined(object, info, scope);\n        this.name = info.name;\n        component.add_reference(this, object);\n        this.expression = info.expression\n            ? new Expression(component, this, scope, info.expression)\n            : null;\n        this.template_scope = scope;\n        this.uses_context = this.expression && this.expression.uses_context;\n    }\n}\n\nclass Body extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.handlers = [];\n        this.actions = [];\n        info.attributes.forEach((node) => {\n            if (node.type === 'EventHandler') {\n                this.handlers.push(new EventHandler(component, this, scope, node));\n            }\n            else if (node.type === 'Action') {\n                this.actions.push(new Action(component, this, scope, node));\n            }\n        });\n    }\n}\n\nclass Comment$1 extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.data = info.data;\n        this.ignores = info.ignores;\n    }\n}\n\nclass ElseBlock extends AbstractBlock {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.children = map_children(component, this, scope, info.children);\n        this.warn_if_empty_block();\n    }\n}\n\nclass EachBlock extends AbstractBlock {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.has_binding = false;\n        this.has_index_binding = false;\n        this.expression = new Expression(component, this, scope, info.expression);\n        this.context = info.context.name || 'each'; // TODO this is used to facilitate binding; currently fails with destructuring\n        this.context_node = info.context;\n        this.index = info.index;\n        this.scope = scope.child();\n        this.contexts = [];\n        unpack_destructuring({ contexts: this.contexts, node: info.context, scope, component });\n        this.contexts.forEach(context => {\n            this.scope.add(context.key.name, this.expression.dependencies, this);\n        });\n        if (this.index) {\n            // index can only change if this is a keyed each block\n            const dependencies = info.key ? this.expression.dependencies : new Set([]);\n            this.scope.add(this.index, dependencies, this);\n        }\n        this.key = info.key\n            ? new Expression(component, this, this.scope, info.key)\n            : null;\n        this.has_animation = false;\n        ([this.const_tags, this.children] = get_const_tags(info.children, component, this, this));\n        if (this.has_animation) {\n            this.children = this.children.filter(child => !isEmptyNode(child));\n            if (this.children.length !== 1) {\n                const child = this.children.find(child => !!child.animation);\n                component.error(child.animation, compiler_errors.invalid_animation_sole);\n                return;\n            }\n        }\n        this.warn_if_empty_block();\n        this.else = info.else\n            ? new ElseBlock(component, this, this.scope, info.else)\n            : null;\n    }\n}\nfunction isEmptyNode(node) {\n    return node.type === 'Text' && node.data.trim() === '';\n}\n\nfunction string_literal(data) {\n    return {\n        type: 'Literal',\n        value: data\n    };\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape_html(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_template(str) {\n    return str.replace(/(\\${|`|\\\\)/g, '\\\\$1');\n}\n\nfunction add_to_set(a, b) {\n    // @ts-ignore\n    b.forEach(item => {\n        a.add(item);\n    });\n}\n\nclass Attribute extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.scope = scope;\n        if (info.type === 'Spread') {\n            this.name = null;\n            this.is_spread = true;\n            this.is_true = false;\n            this.expression = new Expression(component, this, scope, info.expression);\n            this.dependencies = this.expression.dependencies;\n            this.chunks = null;\n            this.is_static = false;\n        }\n        else {\n            this.name = info.name;\n            this.is_true = info.value === true;\n            this.is_static = true;\n            this.dependencies = new Set();\n            this.chunks = this.is_true\n                ? []\n                : info.value.map(node => {\n                    if (node.type === 'Text')\n                        return node;\n                    this.is_static = false;\n                    const expression = new Expression(component, this, scope, node.expression);\n                    add_to_set(this.dependencies, expression.dependencies);\n                    return expression;\n                });\n        }\n    }\n    get_dependencies() {\n        if (this.is_spread)\n            return this.expression.dynamic_dependencies();\n        const dependencies = new Set();\n        this.chunks.forEach(chunk => {\n            if (chunk.type === 'Expression') {\n                add_to_set(dependencies, chunk.dynamic_dependencies());\n            }\n        });\n        return Array.from(dependencies);\n    }\n    get_value(block) {\n        if (this.is_true)\n            return x `true`;\n        if (this.chunks.length === 0)\n            return x `\"\"`;\n        if (this.chunks.length === 1) {\n            return this.chunks[0].type === 'Text'\n                ? string_literal(this.chunks[0].data)\n                : this.chunks[0].manipulate(block);\n        }\n        let expression = this.chunks\n            .map(chunk => chunk.type === 'Text' ? string_literal(chunk.data) : chunk.manipulate(block))\n            .reduce((lhs, rhs) => x `${lhs} + ${rhs}`);\n        if (this.chunks[0].type !== 'Text') {\n            expression = x `\"\" + ${expression}`;\n        }\n        return expression;\n    }\n    get_static_value() {\n        if (!this.is_static)\n            return null;\n        return this.is_true\n            ? true\n            : this.chunks[0]\n                // method should be called only when `is_static = true`\n                ? this.chunks[0].data\n                : '';\n    }\n    should_cache() {\n        return this.is_static\n            ? false\n            : this.chunks.length === 1\n                // @ts-ignore todo: probably error\n                ? this.chunks[0].node.type !== 'Identifier' || this.scope.names.has(this.chunks[0].node.name)\n                : true;\n    }\n}\n\n// TODO this should live in a specific binding\nconst read_only_media_attributes = new Set([\n    'duration',\n    'buffered',\n    'seekable',\n    'played',\n    'seeking',\n    'ended',\n    'videoHeight',\n    'videoWidth'\n]);\nclass Binding extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        if (info.expression.type !== 'Identifier' && info.expression.type !== 'MemberExpression') {\n            component.error(info, compiler_errors.invalid_directive_value);\n            return;\n        }\n        this.name = info.name;\n        this.expression = new Expression(component, this, scope, info.expression);\n        this.raw_expression = clone(info.expression);\n        const { name } = get_object(this.expression.node);\n        this.is_contextual = Array.from(this.expression.references).some(name => scope.names.has(name));\n        // make sure we track this as a mutable ref\n        if (scope.is_let(name)) {\n            component.error(this, compiler_errors.invalid_binding_let);\n            return;\n        }\n        else if (scope.names.has(name)) {\n            if (scope.is_await(name)) {\n                component.error(this, compiler_errors.invalid_binding_await);\n                return;\n            }\n            if (scope.is_const(name)) {\n                component.error(this, compiler_errors.invalid_binding_const);\n            }\n            scope.dependencies_for_name.get(name).forEach(name => {\n                const variable = component.var_lookup.get(name);\n                if (variable) {\n                    variable.mutated = true;\n                }\n            });\n        }\n        else {\n            const variable = component.var_lookup.get(name);\n            if (!variable || variable.global) {\n                component.error(this.expression.node, compiler_errors.binding_undeclared(name));\n                return;\n            }\n            variable[this.expression.node.type === 'MemberExpression' ? 'mutated' : 'reassigned'] = true;\n            if (info.expression.type === 'Identifier' && !variable.writable) {\n                component.error(this.expression.node, compiler_errors.invalid_binding_writibale);\n                return;\n            }\n        }\n        const type = parent.get_static_attribute_value('type');\n        this.is_readonly =\n            dimensions.test(this.name) ||\n                (isElement(parent) &&\n                    ((parent.is_media_node() && read_only_media_attributes.has(this.name)) ||\n                        (parent.name === 'input' && type === 'file')) /* TODO others? */);\n    }\n    is_readonly_media_attribute() {\n        return read_only_media_attributes.has(this.name);\n    }\n}\nfunction isElement(node) {\n    return !!node.is_media_node;\n}\n\nclass Transition extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        component.warn_if_undefined(info.name, info, scope);\n        this.name = info.name;\n        component.add_reference(this, info.name.split('.')[0]);\n        this.directive = info.intro && info.outro ? 'transition' : info.intro ? 'in' : 'out';\n        this.is_local = info.modifiers.includes('local');\n        if ((info.intro && parent.intro) || (info.outro && parent.outro)) {\n            const parent_transition = (parent.intro || parent.outro);\n            component.error(info, compiler_errors.duplicate_transition(this.directive, parent_transition.directive));\n            return;\n        }\n        this.expression = info.expression\n            ? new Expression(component, this, scope, info.expression)\n            : null;\n    }\n}\n\nclass Animation extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        component.warn_if_undefined(info.name, info, scope);\n        this.name = info.name;\n        component.add_reference(this, info.name.split('.')[0]);\n        if (parent.animation) {\n            component.error(this, compiler_errors.duplicate_animation);\n            return;\n        }\n        const block = parent.parent;\n        if (!block || block.type !== 'EachBlock' || !block.key) {\n            // TODO can we relax the 'immediate child' rule?\n            component.error(this, compiler_errors.invalid_animation_immediate);\n            return;\n        }\n        block.has_animation = true;\n        this.expression = info.expression\n            ? new Expression(component, this, scope, info.expression, true)\n            : null;\n    }\n}\n\nclass Class extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.name = info.name;\n        this.expression = info.expression\n            ? new Expression(component, this, scope, info.expression)\n            : null;\n    }\n}\n\n/**\n * Transforms a list of Text and MustacheTags into a TemplateLiteral expression.\n * Start/End positions on the elements of the expression are not set.\n */\nfunction nodes_to_template_literal(value) {\n    const literal = {\n        type: 'TemplateLiteral',\n        expressions: [],\n        quasis: []\n    };\n    let quasi = {\n        type: 'TemplateElement',\n        value: { raw: '', cooked: null },\n        tail: false\n    };\n    value.forEach((node) => {\n        if (node.type === 'Text') {\n            quasi.value.raw += node.raw;\n        }\n        else if (node.type === 'MustacheTag') {\n            literal.quasis.push(quasi);\n            literal.expressions.push(node.expression);\n            quasi = {\n                type: 'TemplateElement',\n                value: { raw: '', cooked: null },\n                tail: false\n            };\n        }\n    });\n    quasi.tail = true;\n    literal.quasis.push(quasi);\n    return literal;\n}\n\nclass StyleDirective extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.name = info.name;\n        // Convert the value array to an expression so it's easier to handle\n        // the StyleDirective going forward.\n        if (info.value === true || (info.value.length === 1 && info.value[0].type === 'MustacheTag')) {\n            const identifier = info.value === true\n                ? {\n                    type: 'Identifier',\n                    start: info.end - info.name.length,\n                    end: info.end,\n                    name: info.name\n                }\n                : info.value[0].expression;\n            this.expression = new Expression(component, this, scope, identifier);\n            this.should_cache = false;\n        }\n        else {\n            const raw_expression = nodes_to_template_literal(info.value);\n            this.expression = new Expression(component, this, scope, raw_expression);\n            this.should_cache = raw_expression.expressions.length > 0;\n        }\n    }\n}\n\n// Whitespace inside one of these elements will not result in\n// a whitespace node being created in any circumstances. (This\n// list is almost certainly very incomplete)\nconst elements_without_text = new Set([\n    'audio',\n    'datalist',\n    'dl',\n    'optgroup',\n    'select',\n    'video'\n]);\nclass Text extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.data = info.data;\n        this.synthetic = info.synthetic || false;\n    }\n    should_skip() {\n        if (/\\S/.test(this.data))\n            return false;\n        const parent_element = this.find_nearest(/(?:Element|InlineComponent|SlotTemplate|Head)/);\n        if (!parent_element)\n            return false;\n        if (parent_element.type === 'Head')\n            return true;\n        if (parent_element.type === 'InlineComponent')\n            return parent_element.children.length === 1 && this === parent_element.children[0];\n        // svg namespace exclusions\n        if (/svg$/.test(parent_element.namespace)) {\n            if (this.prev && this.prev.type === 'Element' && this.prev.name === 'tspan')\n                return false;\n        }\n        return parent_element.namespace || elements_without_text.has(parent_element.name);\n    }\n    keep_space() {\n        if (this.component.component_options.preserveWhitespace)\n            return true;\n        return this.within_pre();\n    }\n    within_pre() {\n        let node = this.parent;\n        while (node) {\n            if (node.type === 'Element' && node.name === 'pre') {\n                return true;\n            }\n            node = node.parent;\n        }\n        return false;\n    }\n}\n\n// The `foreign` namespace covers all DOM implementations that aren't HTML5.\n// It opts out of HTML5-specific a11y checks and case-insensitive attribute names.\nconst foreign = 'https://svelte.dev/docs#template-syntax-svelte-options';\nconst html = 'http://www.w3.org/1999/xhtml';\nconst mathml = 'http://www.w3.org/1998/Math/MathML';\nconst svg = 'http://www.w3.org/2000/svg';\nconst xlink = 'http://www.w3.org/1999/xlink';\nconst xml = 'http://www.w3.org/XML/1998/namespace';\nconst xmlns = 'http://www.w3.org/2000/xmlns';\nconst valid_namespaces = [\n    'foreign',\n    'html',\n    'mathml',\n    'svg',\n    'xlink',\n    'xml',\n    'xmlns',\n    foreign,\n    html,\n    mathml,\n    svg,\n    xlink,\n    xml,\n    xmlns\n];\nconst namespaces = { foreign, html, mathml, svg, xlink, xml, xmlns };\n\nconst applicable = new Set(['Identifier', 'ObjectExpression', 'ArrayExpression', 'Property']);\nclass Let extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.names = [];\n        this.name = { type: 'Identifier', name: info.name };\n        const { names } = this;\n        if (info.expression) {\n            this.value = info.expression;\n            walk(info.expression, {\n                enter(node) {\n                    if (!applicable.has(node.type)) {\n                        return component.error(node, compiler_errors.invalid_let);\n                    }\n                    if (node.type === 'Identifier') {\n                        names.push(node.name);\n                    }\n                    // slightly unfortunate hack\n                    if (node.type === 'ArrayExpression') {\n                        node.type = 'ArrayPattern';\n                    }\n                    if (node.type === 'ObjectExpression') {\n                        node.type = 'ObjectPattern';\n                    }\n                }\n            });\n        }\n        else {\n            names.push(this.name.name);\n        }\n    }\n}\n\nconst svg$1 = /^(?:altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform|circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting|feSpotLight|feTile|feTurbulence|filter|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern|image|line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata|missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor|stop|svg|switch|symbol|text|textPath|tref|tspan|unknown|use|view|vkern)$/;\nconst aria_attributes = 'activedescendant atomic autocomplete busy checked colcount colindex colspan controls current describedby details disabled dropeffect errormessage expanded flowto grabbed haspopup hidden invalid keyshortcuts label labelledby level live modal multiline multiselectable orientation owns placeholder posinset pressed readonly relevant required roledescription rowcount rowindex rowspan selected setsize sort valuemax valuemin valuenow valuetext'.split(' ');\nconst aria_attribute_set = new Set(aria_attributes);\nconst aria_roles = 'alert alertdialog application article banner blockquote button caption cell checkbox code columnheader combobox complementary contentinfo definition deletion dialog directory document emphasis feed figure form generic graphics-document graphics-object graphics-symbol grid gridcell group heading img link list listbox listitem log main marquee math meter menu menubar menuitem menuitemcheckbox menuitemradio navigation none note option paragraph presentation progressbar radio radiogroup region row rowgroup rowheader scrollbar search searchbox separator slider spinbutton status strong subscript superscript switch tab table tablist tabpanel term textbox time timer toolbar tooltip tree treegrid treeitem'.split(' ');\nconst aria_role_set = new Set(aria_roles);\nconst a11y_required_attributes = {\n    a: ['href'],\n    area: ['alt', 'aria-label', 'aria-labelledby'],\n    // html-has-lang\n    html: ['lang'],\n    // iframe-has-title\n    iframe: ['title'],\n    img: ['alt'],\n    object: ['title', 'aria-label', 'aria-labelledby']\n};\nconst a11y_distracting_elements = new Set([\n    'blink',\n    'marquee'\n]);\nconst a11y_required_content = new Set([\n    // anchor-has-content\n    'a',\n    // heading-has-content\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6'\n]);\nconst a11y_labelable = new Set([\n    'button',\n    'input',\n    'keygen',\n    'meter',\n    'output',\n    'progress',\n    'select',\n    'textarea'\n]);\nconst a11y_nested_implicit_semantics = new Map([\n    ['header', 'banner'],\n    ['footer', 'contentinfo']\n]);\nconst a11y_implicit_semantics = new Map([\n    ['a', 'link'],\n    ['aside', 'complementary'],\n    ['body', 'document'],\n    ['datalist', 'listbox'],\n    ['dd', 'definition'],\n    ['dfn', 'term'],\n    ['details', 'group'],\n    ['dt', 'term'],\n    ['fieldset', 'group'],\n    ['form', 'form'],\n    ['h1', 'heading'],\n    ['h2', 'heading'],\n    ['h3', 'heading'],\n    ['h4', 'heading'],\n    ['h5', 'heading'],\n    ['h6', 'heading'],\n    ['hr', 'separator'],\n    ['li', 'listitem'],\n    ['menu', 'list'],\n    ['nav', 'navigation'],\n    ['ol', 'list'],\n    ['optgroup', 'group'],\n    ['output', 'status'],\n    ['progress', 'progressbar'],\n    ['section', 'region'],\n    ['summary', 'button'],\n    ['tbody', 'rowgroup'],\n    ['textarea', 'textbox'],\n    ['tfoot', 'rowgroup'],\n    ['thead', 'rowgroup'],\n    ['tr', 'row'],\n    ['ul', 'list']\n]);\nconst invisible_elements = new Set(['meta', 'html', 'script', 'style']);\nconst valid_modifiers = new Set([\n    'preventDefault',\n    'stopPropagation',\n    'capture',\n    'once',\n    'passive',\n    'nonpassive',\n    'self',\n    'trusted'\n]);\nconst passive_events = new Set([\n    'wheel',\n    'touchstart',\n    'touchmove',\n    'touchend',\n    'touchcancel'\n]);\nconst react_attributes = new Map([\n    ['className', 'class'],\n    ['htmlFor', 'for']\n]);\nconst attributes_to_compact_whitespace = ['class', 'style'];\nfunction is_parent(parent, elements) {\n    let check = false;\n    while (parent) {\n        const parent_name = parent.name;\n        if (elements.includes(parent_name)) {\n            check = true;\n            break;\n        }\n        if (parent.type === 'Element') {\n            break;\n        }\n        parent = parent.parent;\n    }\n    return check;\n}\nfunction get_namespace(parent, element, explicit_namespace) {\n    const parent_element = parent.find_nearest(/^Element/);\n    if (!parent_element) {\n        return explicit_namespace || (svg$1.test(element.name)\n            ? namespaces.svg\n            : null);\n    }\n    if (parent_element.namespace !== namespaces.foreign) {\n        if (svg$1.test(element.name.toLowerCase()))\n            return namespaces.svg;\n        if (parent_element.name.toLowerCase() === 'foreignobject')\n            return null;\n    }\n    return parent_element.namespace;\n}\nclass Element extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.attributes = [];\n        this.actions = [];\n        this.bindings = [];\n        this.classes = [];\n        this.styles = [];\n        this.handlers = [];\n        this.lets = [];\n        this.intro = null;\n        this.outro = null;\n        this.animation = null;\n        this.name = info.name;\n        this.namespace = get_namespace(parent, this, component.namespace);\n        if (this.namespace !== namespaces.foreign) {\n            if (this.name === 'textarea') {\n                if (info.children.length > 0) {\n                    const value_attribute = info.attributes.find(node => node.name === 'value');\n                    if (value_attribute) {\n                        component.error(value_attribute, compiler_errors.textarea_duplicate_value);\n                        return;\n                    }\n                    // this is an egregious hack, but it's the easiest way to get <textarea>\n                    // children treated the same way as a value attribute\n                    info.attributes.push({\n                        type: 'Attribute',\n                        name: 'value',\n                        value: info.children\n                    });\n                    info.children = [];\n                }\n            }\n            if (this.name === 'option') {\n                // Special case — treat these the same way:\n                //   <option>{foo}</option>\n                //   <option value={foo}>{foo}</option>\n                const value_attribute = info.attributes.find(attribute => attribute.name === 'value');\n                if (!value_attribute) {\n                    info.attributes.push({\n                        type: 'Attribute',\n                        name: 'value',\n                        value: info.children,\n                        synthetic: true\n                    });\n                }\n            }\n        }\n        const has_let = info.attributes.some(node => node.type === 'Let');\n        if (has_let) {\n            scope = scope.child();\n        }\n        // Binding relies on Attribute, defer its evaluation\n        const order = ['Binding']; // everything else is -1\n        info.attributes.sort((a, b) => order.indexOf(a.type) - order.indexOf(b.type));\n        info.attributes.forEach(node => {\n            switch (node.type) {\n                case 'Action':\n                    this.actions.push(new Action(component, this, scope, node));\n                    break;\n                case 'Attribute':\n                case 'Spread':\n                    // special case\n                    if (node.name === 'xmlns')\n                        this.namespace = node.value[0].data;\n                    this.attributes.push(new Attribute(component, this, scope, node));\n                    break;\n                case 'Binding':\n                    this.bindings.push(new Binding(component, this, scope, node));\n                    break;\n                case 'Class':\n                    this.classes.push(new Class(component, this, scope, node));\n                    break;\n                case 'StyleDirective':\n                    this.styles.push(new StyleDirective(component, this, scope, node));\n                    break;\n                case 'EventHandler':\n                    this.handlers.push(new EventHandler(component, this, scope, node));\n                    break;\n                case 'Let': {\n                    const l = new Let(component, this, scope, node);\n                    this.lets.push(l);\n                    const dependencies = new Set([l.name.name]);\n                    l.names.forEach(name => {\n                        scope.add(name, dependencies, this);\n                    });\n                    break;\n                }\n                case 'Transition':\n                    {\n                        const transition = new Transition(component, this, scope, node);\n                        if (node.intro)\n                            this.intro = transition;\n                        if (node.outro)\n                            this.outro = transition;\n                        break;\n                    }\n                case 'Animation':\n                    this.animation = new Animation(component, this, scope, node);\n                    break;\n                default:\n                    throw new Error(`Not implemented: ${node.type}`);\n            }\n        });\n        this.scope = scope;\n        this.children = map_children(component, this, this.scope, info.children);\n        this.validate();\n        this.optimise();\n        component.apply_stylesheet(this);\n    }\n    validate() {\n        if (this.component.var_lookup.has(this.name) && this.component.var_lookup.get(this.name).imported) {\n            this.component.warn(this, compiler_warnings.component_name_lowercase(this.name));\n        }\n        this.validate_attributes();\n        this.validate_event_handlers();\n        if (this.namespace === namespaces.foreign) {\n            this.validate_bindings_foreign();\n        }\n        else {\n            this.validate_attributes_a11y();\n            this.validate_special_cases();\n            this.validate_bindings();\n            this.validate_content();\n        }\n    }\n    validate_attributes() {\n        const { component, parent } = this;\n        this.attributes.forEach(attribute => {\n            if (attribute.is_spread)\n                return;\n            const name = attribute.name.toLowerCase();\n            // Errors\n            if (/(^[0-9-.])|[\\^$@%&#?!|()[\\]{}^*+~;]/.test(name)) {\n                return component.error(attribute, compiler_errors.illegal_attribute(name));\n            }\n            if (name === 'slot') {\n                if (!attribute.is_static) {\n                    return component.error(attribute, compiler_errors.invalid_slot_attribute);\n                }\n                if (component.slot_outlets.has(name)) {\n                    return component.error(attribute, compiler_errors.duplicate_slot_attribute(name));\n                    // this code was unreachable. Still needed?\n                    // component.slot_outlets.add(name);\n                }\n                if (!(parent.type === 'SlotTemplate' || within_custom_element(parent))) {\n                    return component.error(attribute, compiler_errors.invalid_slotted_content);\n                }\n            }\n            // Warnings\n            if (this.namespace !== namespaces.foreign) {\n                if (name === 'is') {\n                    component.warn(attribute, compiler_warnings.avoid_is);\n                }\n                if (react_attributes.has(attribute.name)) {\n                    component.warn(attribute, compiler_warnings.invalid_html_attribute(attribute.name, react_attributes.get(attribute.name)));\n                }\n            }\n        });\n    }\n    validate_attributes_a11y() {\n        const { component } = this;\n        this.attributes.forEach(attribute => {\n            if (attribute.is_spread)\n                return;\n            const name = attribute.name.toLowerCase();\n            // aria-props\n            if (name.startsWith('aria-')) {\n                if (invisible_elements.has(this.name)) {\n                    // aria-unsupported-elements\n                    component.warn(attribute, compiler_warnings.a11y_aria_attributes(this.name));\n                }\n                const type = name.slice(5);\n                if (!aria_attribute_set.has(type)) {\n                    const match = fuzzymatch(type, aria_attributes);\n                    component.warn(attribute, compiler_warnings.a11y_unknown_aria_attribute(type, match));\n                }\n                if (name === 'aria-hidden' && /^h[1-6]$/.test(this.name)) {\n                    component.warn(attribute, compiler_warnings.a11y_hidden(this.name));\n                }\n            }\n            // aria-role\n            if (name === 'role') {\n                if (invisible_elements.has(this.name)) {\n                    // aria-unsupported-elements\n                    component.warn(attribute, compiler_warnings.a11y_misplaced_role(this.name));\n                }\n                const value = attribute.get_static_value();\n                // @ts-ignore\n                if (value && !aria_role_set.has(value)) {\n                    // @ts-ignore\n                    const match = fuzzymatch(value, aria_roles);\n                    component.warn(attribute, compiler_warnings.a11y_unknown_role(value, match));\n                }\n                // no-redundant-roles\n                const has_redundant_role = value === a11y_implicit_semantics.get(this.name);\n                if (this.name === value || has_redundant_role) {\n                    component.warn(attribute, compiler_warnings.a11y_no_redundant_roles(value));\n                }\n                // Footers and headers are special cases, and should not have redundant roles unless they are the children of sections or articles.\n                const is_parent_section_or_article = is_parent(this.parent, ['section', 'article']);\n                if (!is_parent_section_or_article) {\n                    const has_nested_redundant_role = value === a11y_nested_implicit_semantics.get(this.name);\n                    if (has_nested_redundant_role) {\n                        component.warn(attribute, compiler_warnings.a11y_no_redundant_roles(value));\n                    }\n                }\n            }\n            // no-access-key\n            if (name === 'accesskey') {\n                component.warn(attribute, compiler_warnings.a11y_accesskey);\n            }\n            // no-autofocus\n            if (name === 'autofocus') {\n                component.warn(attribute, compiler_warnings.a11y_autofocus);\n            }\n            // scope\n            if (name === 'scope' && this.name !== 'th') {\n                component.warn(attribute, compiler_warnings.a11y_misplaced_scope);\n            }\n            // tabindex-no-positive\n            if (name === 'tabindex') {\n                const value = attribute.get_static_value();\n                // @ts-ignore todo is tabindex=true correct case?\n                if (!isNaN(value) && +value > 0) {\n                    component.warn(attribute, compiler_warnings.a11y_positive_tabindex);\n                }\n            }\n        });\n    }\n    validate_special_cases() {\n        const { component, attributes, handlers } = this;\n        const attribute_map = new Map();\n        const handlers_map = new Map();\n        attributes.forEach(attribute => (attribute_map.set(attribute.name, attribute)));\n        handlers.forEach(handler => (handlers_map.set(handler.name, handler)));\n        if (this.name === 'a') {\n            const href_attribute = attribute_map.get('href') || attribute_map.get('xlink:href');\n            const id_attribute = attribute_map.get('id');\n            const name_attribute = attribute_map.get('name');\n            if (href_attribute) {\n                const href_value = href_attribute.get_static_value();\n                if (href_value === '' || href_value === '#' || /^\\W*javascript:/i.test(href_value)) {\n                    component.warn(href_attribute, compiler_warnings.a11y_invalid_attribute(href_attribute.name, href_value));\n                }\n            }\n            else {\n                const id_attribute_valid = id_attribute && id_attribute.get_static_value() !== '';\n                const name_attribute_valid = name_attribute && name_attribute.get_static_value() !== '';\n                if (!id_attribute_valid && !name_attribute_valid) {\n                    component.warn(this, compiler_warnings.a11y_missing_attribute('a', 'an', 'href'));\n                }\n            }\n        }\n        else {\n            const required_attributes = a11y_required_attributes[this.name];\n            if (required_attributes) {\n                const has_attribute = required_attributes.some(name => attribute_map.has(name));\n                if (!has_attribute) {\n                    should_have_attribute(this, required_attributes);\n                }\n            }\n        }\n        if (this.name === 'input') {\n            const type = attribute_map.get('type');\n            if (type && type.get_static_value() === 'image') {\n                const required_attributes = ['alt', 'aria-label', 'aria-labelledby'];\n                const has_attribute = required_attributes.some(name => attribute_map.has(name));\n                if (!has_attribute) {\n                    should_have_attribute(this, required_attributes, 'input type=\"image\"');\n                }\n            }\n        }\n        if (this.name === 'img') {\n            const alt_attribute = attribute_map.get('alt');\n            const aria_hidden_attribute = attribute_map.get('aria-hidden');\n            const aria_hidden_exist = aria_hidden_attribute && aria_hidden_attribute.get_static_value();\n            if (alt_attribute && !aria_hidden_exist) {\n                const alt_value = alt_attribute.get_static_value();\n                if (/\\b(image|picture|photo)\\b/i.test(alt_value)) {\n                    component.warn(this, compiler_warnings.a11y_img_redundant_alt);\n                }\n            }\n        }\n        if (this.name === 'label') {\n            const has_input_child = this.children.some(i => (i instanceof Element && a11y_labelable.has(i.name)));\n            if (!attribute_map.has('for') && !has_input_child) {\n                component.warn(this, compiler_warnings.a11y_label_has_associated_control);\n            }\n        }\n        if (this.name === 'video') {\n            if (attribute_map.has('muted')) {\n                return;\n            }\n            let has_caption;\n            const track = this.children.find((i) => i.name === 'track');\n            if (track) {\n                has_caption = track.attributes.find(a => a.name === 'kind' && a.get_static_value() === 'captions');\n            }\n            if (!has_caption) {\n                component.warn(this, compiler_warnings.a11y_media_has_caption);\n            }\n        }\n        if (a11y_distracting_elements.has(this.name)) {\n            // no-distracting-elements\n            component.warn(this, compiler_warnings.a11y_distracting_elements(this.name));\n        }\n        if (this.name === 'figcaption') {\n            let { parent } = this;\n            let is_figure_parent = false;\n            while (parent) {\n                if (parent.name === 'figure') {\n                    is_figure_parent = true;\n                    break;\n                }\n                if (parent.type === 'Element') {\n                    break;\n                }\n                parent = parent.parent;\n            }\n            if (!is_figure_parent) {\n                component.warn(this, compiler_warnings.a11y_structure_immediate);\n            }\n        }\n        if (this.name === 'figure') {\n            const children = this.children.filter(node => {\n                if (node.type === 'Comment')\n                    return false;\n                if (node.type === 'Text')\n                    return /\\S/.test(node.data);\n                return true;\n            });\n            const index = children.findIndex(child => child.name === 'figcaption');\n            if (index !== -1 && (index !== 0 && index !== children.length - 1)) {\n                component.warn(children[index], compiler_warnings.a11y_structure_first_or_last);\n            }\n        }\n        if (handlers_map.has('mouseover') && !handlers_map.has('focus')) {\n            component.warn(this, compiler_warnings.a11y_mouse_events_have_key_events('mouseover', 'focus'));\n        }\n        if (handlers_map.has('mouseout') && !handlers_map.has('blur')) {\n            component.warn(this, compiler_warnings.a11y_mouse_events_have_key_events('mouseout', 'blur'));\n        }\n    }\n    validate_bindings_foreign() {\n        this.bindings.forEach(binding => {\n            if (binding.name !== 'this') {\n                return this.component.error(binding, compiler_errors.invalid_binding_foreign(binding.name));\n            }\n        });\n    }\n    validate_bindings() {\n        const { component } = this;\n        const check_type_attribute = () => {\n            const attribute = this.attributes.find((attribute) => attribute.name === 'type');\n            if (!attribute)\n                return null;\n            if (!attribute.is_static) {\n                return component.error(attribute, compiler_errors.invalid_type);\n            }\n            const value = attribute.get_static_value();\n            if (value === true) {\n                return component.error(attribute, compiler_errors.missing_type);\n            }\n            return value;\n        };\n        this.bindings.forEach(binding => {\n            const { name } = binding;\n            if (name === 'value') {\n                if (this.name !== 'input' &&\n                    this.name !== 'textarea' &&\n                    this.name !== 'select') {\n                    return component.error(binding, compiler_errors.invalid_binding_elements(this.name, 'value'));\n                }\n                if (this.name === 'select') {\n                    const attribute = this.attributes.find((attribute) => attribute.name === 'multiple');\n                    if (attribute && !attribute.is_static) {\n                        return component.error(attribute, compiler_errors.dynamic_multiple_attribute);\n                    }\n                }\n                else {\n                    check_type_attribute();\n                }\n            }\n            else if (name === 'checked' || name === 'indeterminate') {\n                if (this.name !== 'input') {\n                    return component.error(binding, compiler_errors.invalid_binding_elements(this.name, name));\n                }\n                const type = check_type_attribute();\n                if (type !== 'checkbox') {\n                    return component.error(binding, compiler_errors.invalid_binding_no_checkbox(name, type === 'radio'));\n                }\n            }\n            else if (name === 'group') {\n                if (this.name !== 'input') {\n                    return component.error(binding, compiler_errors.invalid_binding_elements(this.name, 'group'));\n                }\n                const type = check_type_attribute();\n                if (type !== 'checkbox' && type !== 'radio') {\n                    return component.error(binding, compiler_errors.invalid_binding_element_with('<input type=\"checkbox\"> or <input type=\"radio\">', 'group'));\n                }\n            }\n            else if (name === 'files') {\n                if (this.name !== 'input') {\n                    return component.error(binding, compiler_errors.invalid_binding_elements(this.name, 'files'));\n                }\n                const type = check_type_attribute();\n                if (type !== 'file') {\n                    return component.error(binding, compiler_errors.invalid_binding_element_with('<input type=\"file\">', 'files'));\n                }\n            }\n            else if (name === 'open') {\n                if (this.name !== 'details') {\n                    return component.error(binding, compiler_errors.invalid_binding_element_with('<details>', name));\n                }\n            }\n            else if (name === 'currentTime' ||\n                name === 'duration' ||\n                name === 'paused' ||\n                name === 'buffered' ||\n                name === 'seekable' ||\n                name === 'played' ||\n                name === 'volume' ||\n                name === 'muted' ||\n                name === 'playbackRate' ||\n                name === 'seeking' ||\n                name === 'ended') {\n                if (this.name !== 'audio' && this.name !== 'video') {\n                    return component.error(binding, compiler_errors.invalid_binding_element_with('audio> or <video>', name));\n                }\n            }\n            else if (name === 'videoHeight' ||\n                name === 'videoWidth') {\n                if (this.name !== 'video') {\n                    return component.error(binding, compiler_errors.invalid_binding_element_with('<video>', name));\n                }\n            }\n            else if (dimensions.test(name)) {\n                if (this.name === 'svg' && (name === 'offsetWidth' || name === 'offsetHeight')) {\n                    return component.error(binding, compiler_errors.invalid_binding_on(binding.name, `<svg>. Use '${name.replace('offset', 'client')}' instead`));\n                }\n                else if (svg$1.test(this.name)) {\n                    return component.error(binding, compiler_errors.invalid_binding_on(binding.name, 'SVG elements'));\n                }\n                else if (is_void(this.name)) {\n                    return component.error(binding, compiler_errors.invalid_binding_on(binding.name, `void elements like <${this.name}>. Use a wrapper element instead`));\n                }\n            }\n            else if (name === 'textContent' ||\n                name === 'innerHTML') {\n                const contenteditable = this.attributes.find((attribute) => attribute.name === 'contenteditable');\n                if (!contenteditable) {\n                    return component.error(binding, compiler_errors.missing_contenteditable_attribute);\n                }\n                else if (contenteditable && !contenteditable.is_static) {\n                    return component.error(contenteditable, compiler_errors.dynamic_contenteditable_attribute);\n                }\n            }\n            else if (name !== 'this') {\n                return component.error(binding, compiler_errors.invalid_binding(binding.name));\n            }\n        });\n    }\n    validate_content() {\n        if (!a11y_required_content.has(this.name))\n            return;\n        if (this.bindings\n            .some((binding) => ['textContent', 'innerHTML'].includes(binding.name)))\n            return;\n        if (this.children.length === 0) {\n            this.component.warn(this, compiler_warnings.a11y_missing_content(this.name));\n        }\n    }\n    validate_event_handlers() {\n        const { component } = this;\n        this.handlers.forEach(handler => {\n            if (handler.modifiers.has('passive') && handler.modifiers.has('preventDefault')) {\n                return component.error(handler, compiler_errors.invalid_event_modifier_combination('passive', 'preventDefault'));\n            }\n            if (handler.modifiers.has('passive') && handler.modifiers.has('nonpassive')) {\n                return component.error(handler, compiler_errors.invalid_event_modifier_combination('passive', 'nonpassive'));\n            }\n            handler.modifiers.forEach(modifier => {\n                if (!valid_modifiers.has(modifier)) {\n                    return component.error(handler, compiler_errors.invalid_event_modifier(list(Array.from(valid_modifiers))));\n                }\n                if (modifier === 'passive') {\n                    if (passive_events.has(handler.name)) {\n                        if (handler.can_make_passive) {\n                            component.warn(handler, compiler_warnings.redundant_event_modifier_for_touch);\n                        }\n                    }\n                    else {\n                        component.warn(handler, compiler_warnings.redundant_event_modifier_passive);\n                    }\n                }\n                if (component.compile_options.legacy && (modifier === 'once' || modifier === 'passive')) {\n                    // TODO this could be supported, but it would need a few changes to\n                    // how event listeners work\n                    return component.error(handler, compiler_errors.invalid_event_modifier_legacy(modifier));\n                }\n            });\n            if (passive_events.has(handler.name) && handler.can_make_passive && !handler.modifiers.has('preventDefault') && !handler.modifiers.has('nonpassive')) {\n                // touch/wheel events should be passive by default\n                handler.modifiers.add('passive');\n            }\n        });\n    }\n    is_media_node() {\n        return this.name === 'audio' || this.name === 'video';\n    }\n    add_css_class() {\n        if (this.attributes.some(attr => attr.is_spread)) {\n            this.needs_manual_style_scoping = true;\n            return;\n        }\n        const { id } = this.component.stylesheet;\n        const class_attribute = this.attributes.find(a => a.name === 'class');\n        if (class_attribute && !class_attribute.is_true) {\n            if (class_attribute.chunks.length === 1 && class_attribute.chunks[0].type === 'Text') {\n                class_attribute.chunks[0].data += ` ${id}`;\n            }\n            else {\n                class_attribute.chunks.push(new Text(this.component, this, this.scope, {\n                    type: 'Text',\n                    data: ` ${id}`,\n                    synthetic: true\n                }));\n            }\n        }\n        else {\n            this.attributes.push(new Attribute(this.component, this, this.scope, {\n                type: 'Attribute',\n                name: 'class',\n                value: [{ type: 'Text', data: id, synthetic: true }]\n            }));\n        }\n    }\n    get slot_template_name() {\n        return this.attributes.find(attribute => attribute.name === 'slot').get_static_value();\n    }\n    optimise() {\n        attributes_to_compact_whitespace.forEach(attribute_name => {\n            const attribute = this.attributes.find(a => a.name === attribute_name);\n            if (attribute && !attribute.is_true) {\n                attribute.chunks.forEach((chunk, index) => {\n                    if (chunk.type === 'Text') {\n                        let data = chunk.data.replace(/[\\s\\n\\t]+/g, ' ');\n                        if (index === 0) {\n                            data = data.trimLeft();\n                        }\n                        else if (index === attribute.chunks.length - 1) {\n                            data = data.trimRight();\n                        }\n                        chunk.data = data;\n                    }\n                });\n            }\n        });\n    }\n}\nfunction should_have_attribute(node, attributes, name = node.name) {\n    const article = /^[aeiou]/.test(attributes[0]) ? 'an' : 'a';\n    const sequence = attributes.length > 1 ?\n        attributes.slice(0, -1).join(', ') + ` or ${attributes[attributes.length - 1]}` :\n        attributes[0];\n    node.component.warn(node, compiler_warnings.a11y_missing_attribute(name, article, sequence));\n}\nfunction within_custom_element(parent) {\n    while (parent) {\n        if (parent.type === 'InlineComponent')\n            return false;\n        if (parent.type === 'Element' && /-/.test(parent.name))\n            return true;\n        parent = parent.parent;\n    }\n    return false;\n}\n\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    str = str.replace(/\\r/g, '');\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return (hash >>> 0).toString(36);\n}\n\nclass Head extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        if (info.attributes.length) {\n            component.error(info.attributes[0], compiler_errors.invalid_attribute_head);\n            return;\n        }\n        this.children = map_children(component, parent, scope, info.children.filter(child => {\n            return (child.type !== 'Text' || /\\S/.test(child.data));\n        }));\n        if (this.children.length > 0) {\n            this.id = `svelte-${hash(this.component.source.slice(this.start, this.end))}`;\n        }\n    }\n}\n\nclass IfBlock extends AbstractBlock {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.expression = new Expression(component, this, scope, info.expression);\n        this.children = map_children(component, this, scope, info.children);\n        this.else = info.else\n            ? new ElseBlock(component, this, scope, info.else)\n            : null;\n        this.warn_if_empty_block();\n    }\n}\n\nclass InlineComponent extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.attributes = [];\n        this.bindings = [];\n        this.handlers = [];\n        this.lets = [];\n        this.css_custom_properties = [];\n        if (info.name !== 'svelte:component' && info.name !== 'svelte:self') {\n            const name = info.name.split('.')[0]; // accommodate namespaces\n            component.warn_if_undefined(name, info, scope);\n            component.add_reference(this, name);\n        }\n        this.name = info.name;\n        this.expression = this.name === 'svelte:component'\n            ? new Expression(component, this, scope, info.expression)\n            : null;\n        info.attributes.forEach(node => {\n            /* eslint-disable no-fallthrough */\n            switch (node.type) {\n                case 'Action':\n                    return component.error(node, compiler_errors.invalid_action);\n                case 'Attribute':\n                    if (node.name.startsWith('--')) {\n                        this.css_custom_properties.push(new Attribute(component, this, scope, node));\n                        break;\n                    }\n                // fallthrough\n                case 'Spread':\n                    this.attributes.push(new Attribute(component, this, scope, node));\n                    break;\n                case 'Binding':\n                    this.bindings.push(new Binding(component, this, scope, node));\n                    break;\n                case 'Class':\n                    return component.error(node, compiler_errors.invalid_class);\n                case 'EventHandler':\n                    this.handlers.push(new EventHandler(component, this, scope, node));\n                    break;\n                case 'Let':\n                    this.lets.push(new Let(component, this, scope, node));\n                    break;\n                case 'Transition':\n                    return component.error(node, compiler_errors.invalid_transition);\n                case 'StyleDirective':\n                    return component.error(node, compiler_errors.invalid_component_style_directive);\n                default:\n                    throw new Error(`Not implemented: ${node.type}`);\n            }\n            /* eslint-enable no-fallthrough */\n        });\n        if (this.lets.length > 0) {\n            this.scope = scope.child();\n            this.lets.forEach(l => {\n                const dependencies = new Set([l.name.name]);\n                l.names.forEach(name => {\n                    this.scope.add(name, dependencies, this);\n                });\n            });\n        }\n        else {\n            this.scope = scope;\n        }\n        this.handlers.forEach(handler => {\n            handler.modifiers.forEach(modifier => {\n                if (modifier !== 'once') {\n                    return component.error(handler, compiler_errors.invalid_event_modifier_component);\n                }\n            });\n        });\n        const children = [];\n        for (let i = info.children.length - 1; i >= 0; i--) {\n            const child = info.children[i];\n            if (child.type === 'SlotTemplate') {\n                children.push(child);\n                info.children.splice(i, 1);\n            }\n            else if ((child.type === 'Element' || child.type === 'InlineComponent' || child.type === 'Slot') && child.attributes.find(attribute => attribute.name === 'slot')) {\n                const slot_template = {\n                    start: child.start,\n                    end: child.end,\n                    type: 'SlotTemplate',\n                    name: 'svelte:fragment',\n                    attributes: [],\n                    children: [child]\n                };\n                // transfer attributes\n                for (let i = child.attributes.length - 1; i >= 0; i--) {\n                    const attribute = child.attributes[i];\n                    if (attribute.type === 'Let') {\n                        slot_template.attributes.push(attribute);\n                        child.attributes.splice(i, 1);\n                    }\n                    else if (attribute.type === 'Attribute' && attribute.name === 'slot') {\n                        slot_template.attributes.push(attribute);\n                    }\n                }\n                // transfer const\n                for (let i = child.children.length - 1; i >= 0; i--) {\n                    const child_child = child.children[i];\n                    if (child_child.type === 'ConstTag') {\n                        slot_template.children.push(child_child);\n                        child.children.splice(i, 1);\n                    }\n                }\n                children.push(slot_template);\n                info.children.splice(i, 1);\n            }\n        }\n        if (info.children.some(node => not_whitespace_text(node))) {\n            children.push({\n                start: info.start,\n                end: info.end,\n                type: 'SlotTemplate',\n                name: 'svelte:fragment',\n                attributes: [],\n                children: info.children\n            });\n        }\n        this.children = map_children(component, this, this.scope, children);\n    }\n    get slot_template_name() {\n        return this.attributes.find(attribute => attribute.name === 'slot').get_static_value();\n    }\n}\nfunction not_whitespace_text(node) {\n    return !(node.type === 'Text' && /^\\s+$/.test(node.data));\n}\n\nclass KeyBlock extends AbstractBlock {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.expression = new Expression(component, this, scope, info.expression);\n        this.children = map_children(component, this, scope, info.children);\n        this.warn_if_empty_block();\n    }\n}\n\nclass Tag extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.expression = new Expression(component, this, scope, info.expression);\n        this.should_cache = (info.expression.type !== 'Identifier' ||\n            (this.expression.dependencies.size && scope.names.has(info.expression.name)));\n    }\n}\n\nclass MustacheTag extends Tag {\n}\n\nclass Options extends Node$1 {\n}\n\nclass RawMustacheTag extends Tag {\n}\n\nclass DebugTag extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.expressions = info.identifiers.map((node) => {\n            return new Expression(component, parent, scope, node);\n        });\n    }\n}\n\nclass Slot extends Element {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.values = new Map();\n        info.attributes.forEach(attr => {\n            if (attr.type !== 'Attribute' && attr.type !== 'Spread') {\n                return component.error(attr, compiler_errors.invalid_slot_directive);\n            }\n            if (attr.name === 'name') {\n                if (attr.value.length !== 1 || attr.value[0].type !== 'Text') {\n                    return component.error(attr, compiler_errors.dynamic_slot_name);\n                }\n                this.slot_name = attr.value[0].data;\n                if (this.slot_name === 'default') {\n                    return component.error(attr, compiler_errors.invalid_slot_name);\n                }\n            }\n            this.values.set(attr.name, new Attribute(component, this, scope, attr));\n        });\n        if (!this.slot_name)\n            this.slot_name = 'default';\n        if (this.slot_name === 'default') {\n            // if this is the default slot, add our dependencies to any\n            // other slots (which inherit our slot values) that were\n            // previously encountered\n            component.slots.forEach((slot) => {\n                this.values.forEach((attribute, name) => {\n                    if (!slot.values.has(name)) {\n                        slot.values.set(name, attribute);\n                    }\n                });\n            });\n        }\n        else if (component.slots.has('default')) {\n            // otherwise, go the other way — inherit values from\n            // a previously encountered default slot\n            const default_slot = component.slots.get('default');\n            default_slot.values.forEach((attribute, name) => {\n                if (!this.values.has(name)) {\n                    this.values.set(name, attribute);\n                }\n            });\n        }\n        component.slots.set(this.slot_name, this);\n    }\n}\n\nclass SlotTemplate extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.lets = [];\n        this.slot_template_name = 'default';\n        this.validate_slot_template_placement();\n        const has_let = info.attributes.some((node) => node.type === 'Let');\n        if (has_let) {\n            scope = scope.child();\n        }\n        info.attributes.forEach((node) => {\n            switch (node.type) {\n                case 'Let': {\n                    const l = new Let(component, this, scope, node);\n                    this.lets.push(l);\n                    const dependencies = new Set([l.name.name]);\n                    l.names.forEach((name) => {\n                        scope.add(name, dependencies, this);\n                    });\n                    break;\n                }\n                case 'Attribute': {\n                    if (node.name === 'slot') {\n                        this.slot_attribute = new Attribute(component, this, scope, node);\n                        if (!this.slot_attribute.is_static) {\n                            return component.error(node, compiler_errors.invalid_slot_attribute);\n                        }\n                        const value = this.slot_attribute.get_static_value();\n                        if (typeof value === 'boolean') {\n                            return component.error(node, compiler_errors.invalid_slot_attribute_value_missing);\n                        }\n                        this.slot_template_name = value;\n                        break;\n                    }\n                    throw new Error(`Invalid attribute '${node.name}' in <svelte:fragment>`);\n                }\n                default:\n                    throw new Error(`Not implemented: ${node.type}`);\n            }\n        });\n        this.scope = scope;\n        ([this.const_tags, this.children] = get_const_tags(info.children, component, this, this));\n    }\n    validate_slot_template_placement() {\n        if (this.parent.type !== 'InlineComponent') {\n            return this.component.error(this, compiler_errors.invalid_slotted_content_fragment);\n        }\n    }\n}\n\nclass Title extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.children = map_children(component, parent, scope, info.children);\n        if (info.attributes.length > 0) {\n            component.error(info.attributes[0], compiler_errors.illegal_attribute_title);\n            return;\n        }\n        info.children.forEach(child => {\n            if (child.type !== 'Text' && child.type !== 'MustacheTag') {\n                return component.error(child, compiler_errors.illegal_structure_title);\n            }\n        });\n        this.should_cache = info.children.length === 1\n            ? (info.children[0].type !== 'Identifier' ||\n                scope.names.has(info.children[0].name))\n            : true;\n    }\n}\n\nconst valid_bindings = [\n    'innerWidth',\n    'innerHeight',\n    'outerWidth',\n    'outerHeight',\n    'scrollX',\n    'scrollY',\n    'online'\n];\nclass Window extends Node$1 {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.handlers = [];\n        this.bindings = [];\n        this.actions = [];\n        info.attributes.forEach(node => {\n            if (node.type === 'EventHandler') {\n                this.handlers.push(new EventHandler(component, this, scope, node));\n            }\n            else if (node.type === 'Binding') {\n                if (node.expression.type !== 'Identifier') {\n                    const { parts } = flatten_reference(node.expression);\n                    // TODO is this constraint necessary?\n                    return component.error(node.expression, compiler_errors.invalid_binding_window(parts));\n                }\n                if (!~valid_bindings.indexOf(node.name)) {\n                    const match = (node.name === 'width' ? 'innerWidth' :\n                        node.name === 'height' ? 'innerHeight' :\n                            fuzzymatch(node.name, valid_bindings));\n                    if (match) {\n                        return component.error(node, compiler_errors.invalid_binding_on(node.name, '<svelte:window>', ` (did you mean '${match}'?)`));\n                    }\n                    else {\n                        return component.error(node, compiler_errors.invalid_binding_on(node.name, '<svelte:window>', ` — valid bindings are ${list(valid_bindings)}`));\n                    }\n                }\n                this.bindings.push(new Binding(component, this, scope, node));\n            }\n            else if (node.type === 'Action') {\n                this.actions.push(new Action(component, this, scope, node));\n            }\n        });\n    }\n}\n\n/**\n * Pushes all `items` into `array` using `push`, therefore mutating the array.\n * We do this for memory and perf reasons, and because `array.push(...items)` would\n * run into a \"max call stack size exceeded\" error with too many items (~65k).\n * @param array\n * @param items\n */\nfunction push_array$1(array, items) {\n    for (let i = 0; i < items.length; i++) {\n        array.push(items[i]);\n    }\n}\n\nfunction get_constructor(type) {\n    switch (type) {\n        case 'AwaitBlock': return AwaitBlock;\n        case 'Body': return Body;\n        case 'Comment': return Comment$1;\n        case 'ConstTag': return ConstTag;\n        case 'EachBlock': return EachBlock;\n        case 'Element': return Element;\n        case 'Head': return Head;\n        case 'IfBlock': return IfBlock;\n        case 'InlineComponent': return InlineComponent;\n        case 'KeyBlock': return KeyBlock;\n        case 'MustacheTag': return MustacheTag;\n        case 'Options': return Options;\n        case 'RawMustacheTag': return RawMustacheTag;\n        case 'DebugTag': return DebugTag;\n        case 'Slot': return Slot;\n        case 'SlotTemplate': return SlotTemplate;\n        case 'Text': return Text;\n        case 'Title': return Title;\n        case 'Window': return Window;\n        default: throw new Error(`Not implemented: ${type}`);\n    }\n}\nfunction map_children(component, parent, scope, children) {\n    let last = null;\n    let ignores = [];\n    return children.map(child => {\n        const constructor = get_constructor(child.type);\n        const use_ignores = child.type !== 'Text' && child.type !== 'Comment' && ignores.length;\n        if (use_ignores)\n            component.push_ignores(ignores);\n        const node = new constructor(component, parent, scope, child);\n        if (use_ignores)\n            component.pop_ignores(), ignores = [];\n        if (node.type === 'Comment' && node.ignores.length) {\n            push_array$1(ignores, node.ignores);\n        }\n        if (last)\n            last.next = node;\n        node.prev = last;\n        last = node;\n        return node;\n    });\n}\n\nfunction check_graph_for_cycles(edges) {\n    const graph = edges.reduce((g, edge) => {\n        const [u, v] = edge;\n        if (!g.has(u))\n            g.set(u, []);\n        if (!g.has(v))\n            g.set(v, []);\n        g.get(u).push(v);\n        return g;\n    }, new Map());\n    const visited = new Set();\n    const on_stack = new Set();\n    const cycles = [];\n    function visit(v) {\n        visited.add(v);\n        on_stack.add(v);\n        graph.get(v).forEach(w => {\n            if (!visited.has(w)) {\n                visit(w);\n            }\n            else if (on_stack.has(w)) {\n                cycles.push([...on_stack, w]);\n            }\n        });\n        on_stack.delete(v);\n    }\n    graph.forEach((_, v) => {\n        if (!visited.has(v)) {\n            visit(v);\n        }\n    });\n    return cycles[0];\n}\n\nfunction get_const_tags(children, component, node, parent) {\n    const const_tags = [];\n    const others = [];\n    for (const child of children) {\n        if (child.type === 'ConstTag') {\n            const_tags.push(child);\n        }\n        else {\n            others.push(child);\n        }\n    }\n    const consts_nodes = const_tags.map(tag => new ConstTag(component, node, node.scope, tag));\n    const sorted_consts_nodes = sort_consts_nodes(consts_nodes, component);\n    sorted_consts_nodes.forEach(node => node.parse_expression());\n    const children_nodes = map_children(component, parent, node.scope, others);\n    return [sorted_consts_nodes, children_nodes];\n}\nfunction sort_consts_nodes(consts_nodes, component) {\n    const sorted_consts_nodes = [];\n    const unsorted_consts_nodes = consts_nodes.map(node => {\n        return {\n            assignees: node.assignees,\n            dependencies: node.dependencies,\n            node\n        };\n    });\n    const lookup = new Map();\n    unsorted_consts_nodes.forEach(node => {\n        node.assignees.forEach(name => {\n            if (!lookup.has(name)) {\n                lookup.set(name, []);\n            }\n            lookup.get(name).push(node);\n        });\n    });\n    const cycle = check_graph_for_cycles(unsorted_consts_nodes.reduce((acc, node) => {\n        node.assignees.forEach(v => {\n            node.dependencies.forEach(w => {\n                if (!node.assignees.has(w)) {\n                    acc.push([v, w]);\n                }\n            });\n        });\n        return acc;\n    }, []));\n    if (cycle && cycle.length) {\n        const nodeList = lookup.get(cycle[0]);\n        const node = nodeList[0];\n        component.error(node.node, compiler_errors.cyclical_const_tags(cycle));\n    }\n    const add_node = (node) => {\n        if (sorted_consts_nodes.includes(node))\n            return;\n        node.dependencies.forEach(name => {\n            if (node.assignees.has(name))\n                return;\n            const earlier_nodes = lookup.get(name);\n            if (earlier_nodes) {\n                earlier_nodes.forEach(add_node);\n            }\n        });\n        sorted_consts_nodes.push(node);\n    };\n    unsorted_consts_nodes.forEach(add_node);\n    return sorted_consts_nodes.map(node => node.node);\n}\n\nclass ThenBlock extends AbstractBlock {\n    constructor(component, parent, scope, info) {\n        super(component, parent, scope, info);\n        this.scope = scope.child();\n        if (parent.then_node) {\n            parent.then_contexts.forEach(context => {\n                this.scope.add(context.key.name, parent.expression.dependencies, this);\n            });\n        }\n        ([this.const_tags, this.children] = get_const_tags(info.children, component, this, parent));\n        if (!info.skip) {\n            this.warn_if_empty_block();\n        }\n    }\n}\n\nfunction add_const_tags(block, const_tags, ctx) {\n    const const_tags_props = [];\n    const_tags.forEach((const_tag, i) => {\n        const name = `#constants_${i}`;\n        const_tags_props.push(b `const ${name} = ${const_tag.expression.manipulate(block, ctx)}`);\n        const_tag.contexts.forEach(context => {\n            const_tags_props.push(b `${ctx}[${block.renderer.context_lookup.get(context.key.name).index}] = ${context.default_modifier(context.modifier({ type: 'Identifier', name }), name => block.renderer.context_lookup.has(name) ? x `${ctx}[${block.renderer.context_lookup.get(name).index}]` : { type: 'Identifier', name })};`);\n        });\n    });\n    return const_tags_props;\n}\nfunction add_const_tags_context(renderer, const_tags) {\n    const_tags.forEach(const_tag => {\n        const_tag.contexts.forEach(context => {\n            renderer.add_to_context(context.key.name, true);\n        });\n    });\n}\n\nclass AwaitBlockBranch extends Wrapper {\n    constructor(status, renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.var = null;\n        this.status = status;\n        this.block = block.child({\n            comment: create_debugging_comment(node, this.renderer.component),\n            name: this.renderer.component.get_unique_name(`create_${status}_block`),\n            type: status\n        });\n        this.add_context(parent.node[status + '_node'], parent.node[status + '_contexts']);\n        this.fragment = new FragmentWrapper(renderer, this.block, this.node.children, parent, strip_whitespace, next_sibling);\n        this.is_dynamic = this.block.dependencies.size > 0;\n    }\n    add_context(node, contexts) {\n        if (!node)\n            return;\n        if (node.type === 'Identifier') {\n            this.value = node.name;\n            this.renderer.add_to_context(this.value, true);\n        }\n        else {\n            contexts.forEach(context => {\n                this.renderer.add_to_context(context.key.name, true);\n            });\n            this.value = this.block.parent.get_unique_name('value').name;\n            this.value_contexts = contexts;\n            this.renderer.add_to_context(this.value, true);\n            this.is_destructured = true;\n        }\n        this.value_index = this.renderer.context_lookup.get(this.value).index;\n        if (this.has_consts(this.node)) {\n            add_const_tags_context(this.renderer, this.node.const_tags);\n        }\n    }\n    has_consts(node) {\n        return node instanceof ThenBlock || node instanceof CatchBlock;\n    }\n    render(block, parent_node, parent_nodes) {\n        this.fragment.render(block, parent_node, parent_nodes);\n        if (this.is_destructured || (this.has_consts(this.node) && this.node.const_tags.length > 0)) {\n            this.render_get_context();\n        }\n    }\n    render_get_context() {\n        const props = this.is_destructured ? this.value_contexts.map(prop => b `#ctx[${this.block.renderer.context_lookup.get(prop.key.name).index}] = ${prop.default_modifier(prop.modifier(x `#ctx[${this.value_index}]`), name => this.renderer.reference(name))};`) : null;\n        const const_tags_props = this.has_consts(this.node) ? add_const_tags(this.block, this.node.const_tags, '#ctx') : null;\n        const get_context = this.block.renderer.component.get_unique_name(`get_${this.status}_context`);\n        this.block.renderer.blocks.push(b `\n\t\t\tfunction ${get_context}(#ctx) {\n\t\t\t\t${props}\n\t\t\t\t${const_tags_props}\n\t\t\t}\n\t\t`);\n        this.block.chunks.declarations.push(b `${get_context}(#ctx)`);\n        if (this.block.has_update_method) {\n            this.block.chunks.update.unshift(b `${get_context}(#ctx)`);\n        }\n    }\n}\nclass AwaitBlockWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.var = { type: 'Identifier', name: 'await_block' };\n        this.cannot_use_innerhtml();\n        this.not_static_content();\n        block.add_dependencies(this.node.expression.dependencies);\n        let is_dynamic = false;\n        let has_intros = false;\n        let has_outros = false;\n        ['pending', 'then', 'catch'].forEach((status) => {\n            const child = this.node[status];\n            const branch = new AwaitBlockBranch(status, renderer, block, this, child, strip_whitespace, next_sibling);\n            renderer.blocks.push(branch.block);\n            if (branch.is_dynamic) {\n                is_dynamic = true;\n                // TODO should blocks update their own parents?\n                block.add_dependencies(branch.block.dependencies);\n            }\n            if (branch.block.has_intros)\n                has_intros = true;\n            if (branch.block.has_outros)\n                has_outros = true;\n            this[status] = branch;\n        });\n        ['pending', 'then', 'catch'].forEach(status => {\n            this[status].block.has_update_method = is_dynamic;\n            this[status].block.has_intro_method = has_intros;\n            this[status].block.has_outro_method = has_outros;\n        });\n        if (has_outros) {\n            block.add_outro();\n        }\n    }\n    render(block, parent_node, parent_nodes) {\n        const anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);\n        const update_mount_node = this.get_update_mount_node(anchor);\n        const snippet = this.node.expression.manipulate(block);\n        const info = block.get_unique_name('info');\n        const promise = block.get_unique_name('promise');\n        block.add_variable(promise);\n        block.maintain_context = true;\n        const info_props = x `{\n\t\t\tctx: #ctx,\n\t\t\tcurrent: null,\n\t\t\ttoken: null,\n\t\t\thasCatch: ${this.catch.node.start !== null ? 'true' : 'false'},\n\t\t\tpending: ${this.pending.block.name},\n\t\t\tthen: ${this.then.block.name},\n\t\t\tcatch: ${this.catch.block.name},\n\t\t\tvalue: ${this.then.value_index},\n\t\t\terror: ${this.catch.value_index},\n\t\t\tblocks: ${this.pending.block.has_outro_method && x `[,,,]`}\n\t\t}`;\n        block.chunks.init.push(b `\n\t\t\tlet ${info} = ${info_props};\n\t\t`);\n        block.chunks.init.push(b `\n\t\t\t@handle_promise(${promise} = ${snippet}, ${info});\n\t\t`);\n        block.chunks.create.push(b `\n\t\t\t${info}.block.c();\n\t\t`);\n        if (parent_nodes && this.renderer.options.hydratable) {\n            block.chunks.claim.push(b `\n\t\t\t\t${info}.block.l(${parent_nodes});\n\t\t\t`);\n        }\n        const initial_mount_node = parent_node || '#target';\n        const anchor_node = parent_node ? 'null' : '#anchor';\n        const has_transitions = this.pending.block.has_intro_method || this.pending.block.has_outro_method;\n        block.chunks.mount.push(b `\n\t\t\t${info}.block.m(${initial_mount_node}, ${info}.anchor = ${anchor_node});\n\t\t\t${info}.mount = () => ${update_mount_node};\n\t\t\t${info}.anchor = ${anchor};\n\t\t`);\n        if (has_transitions) {\n            block.chunks.intro.push(b `@transition_in(${info}.block);`);\n        }\n        const dependencies = this.node.expression.dynamic_dependencies();\n        const update_await_block_branch = b `@update_await_block_branch(${info}, #ctx, #dirty)`;\n        if (dependencies.length > 0) {\n            const condition = x `\n\t\t\t\t${block.renderer.dirty(dependencies)} &&\n\t\t\t\t${promise} !== (${promise} = ${snippet}) &&\n\t\t\t\t@handle_promise(${promise}, ${info})`;\n            block.chunks.update.push(b `${info}.ctx = #ctx;`);\n            if (this.pending.block.has_update_method) {\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${condition}) {\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${update_await_block_branch}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.chunks.update.push(b `\n\t\t\t\t\t${condition}\n\t\t\t\t`);\n            }\n        }\n        else {\n            if (this.pending.block.has_update_method) {\n                block.chunks.update.push(b `\n\t\t\t\t\t${update_await_block_branch}\n\t\t\t\t`);\n            }\n        }\n        if (this.pending.block.has_outro_method) {\n            block.chunks.outro.push(b `\n\t\t\t\tfor (let #i = 0; #i < 3; #i += 1) {\n\t\t\t\t\tconst block = ${info}.blocks[#i];\n\t\t\t\t\t@transition_out(block);\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.chunks.destroy.push(b `\n\t\t\t${info}.block.d(${parent_node ? null : 'detaching'});\n\t\t\t${info}.token = null;\n\t\t\t${info} = null;\n\t\t`);\n        [this.pending, this.then, this.catch].forEach(branch => {\n            branch.render(branch.block, null, x `#nodes`);\n        });\n    }\n}\n\nconst TRUE = x `true`;\nconst FALSE = x `false`;\nclass EventHandlerWrapper {\n    constructor(node, parent) {\n        this.node = node;\n        this.parent = parent;\n        if (!node.expression) {\n            this.parent.renderer.add_to_context(node.handler_name.name);\n            this.parent.renderer.component.partly_hoisted.push(b `\n\t\t\t\tfunction ${node.handler_name.name}(event) {\n\t\t\t\t\t@bubble.call(this, $$self, event);\n\t\t\t\t}\n\t\t\t`);\n        }\n    }\n    get_snippet(block) {\n        const snippet = this.node.expression ? this.node.expression.manipulate(block) : block.renderer.reference(this.node.handler_name);\n        if (this.node.reassigned) {\n            block.maintain_context = true;\n            return x `function () { if (@is_function(${snippet})) ${snippet}.apply(this, arguments); }`;\n        }\n        return snippet;\n    }\n    render(block, target) {\n        let snippet = this.get_snippet(block);\n        if (this.node.modifiers.has('preventDefault'))\n            snippet = x `@prevent_default(${snippet})`;\n        if (this.node.modifiers.has('stopPropagation'))\n            snippet = x `@stop_propagation(${snippet})`;\n        if (this.node.modifiers.has('self'))\n            snippet = x `@self(${snippet})`;\n        if (this.node.modifiers.has('trusted'))\n            snippet = x `@trusted(${snippet})`;\n        const args = [];\n        const opts = ['nonpassive', 'passive', 'once', 'capture'].filter(mod => this.node.modifiers.has(mod));\n        if (opts.length) {\n            if (opts.length === 1 && opts[0] === 'capture') {\n                args.push(TRUE);\n            }\n            else {\n                args.push(x `{ ${opts.map(opt => opt === 'nonpassive'\n                    ? p `passive: false`\n                    : p `${opt}: true`)} }`);\n            }\n        }\n        else if (block.renderer.options.dev) {\n            args.push(FALSE);\n        }\n        if (block.renderer.options.dev) {\n            args.push(this.node.modifiers.has('preventDefault') ? TRUE : FALSE);\n            args.push(this.node.modifiers.has('stopPropagation') ? TRUE : FALSE);\n        }\n        block.event_listeners.push(x `@listen(${target}, \"${this.node.name}\", ${snippet}, ${args})`);\n    }\n}\n\nfunction add_event_handlers(block, target, handlers) {\n    handlers.forEach(handler => add_event_handler(block, target, handler));\n}\nfunction add_event_handler(block, target, handler) {\n    handler.render(block, target);\n}\n\nfunction add_actions(block, target, actions) {\n    actions.forEach(action => add_action(block, target, action));\n}\nfunction add_action(block, target, action) {\n    const { expression, template_scope } = action;\n    let snippet;\n    let dependencies;\n    if (expression) {\n        snippet = expression.manipulate(block);\n        dependencies = expression.dynamic_dependencies();\n    }\n    const id = block.get_unique_name(`${action.name.replace(/[^a-zA-Z0-9_$]/g, '_')}_action`);\n    block.add_variable(id);\n    const [obj, ...properties] = action.name.split('.');\n    const fn = is_contextual(action.component, template_scope, obj)\n        ? block.renderer.reference(obj)\n        : obj;\n    if (properties.length) {\n        const member_expression = properties.reduce((lhs, rhs) => x `${lhs}.${rhs}`, fn);\n        block.event_listeners.push(x `@action_destroyer(${id} = ${member_expression}(${target}, ${snippet}))`);\n    }\n    else {\n        block.event_listeners.push(x `@action_destroyer(${id} = ${fn}.call(null, ${target}, ${snippet}))`);\n    }\n    if (dependencies && dependencies.length > 0) {\n        let condition = x `${id} && @is_function(${id}.update)`;\n        if (dependencies.length > 0) {\n            condition = x `${condition} && ${block.renderer.dirty(dependencies)}`;\n        }\n        block.chunks.update.push(b `if (${condition}) ${id}.update.call(null, ${snippet});`);\n    }\n}\n\nclass BodyWrapper extends Wrapper {\n    constructor(renderer, block, parent, node) {\n        super(renderer, block, parent, node);\n        this.handlers = this.node.handlers.map(handler => new EventHandlerWrapper(handler, this));\n    }\n    render(block, _parent_node, _parent_nodes) {\n        add_event_handlers(block, x `@_document.body`, this.handlers);\n        add_actions(block, x `@_document.body`, this.node.actions);\n    }\n}\n\nclass DebugTagWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, _strip_whitespace, _next_sibling) {\n        super(renderer, block, parent, node);\n    }\n    render(block, _parent_node, _parent_nodes) {\n        const { renderer } = this;\n        const { component } = renderer;\n        if (!renderer.options.dev)\n            return;\n        const { var_lookup } = component;\n        const start = component.locate(this.node.start + 1);\n        const end = { line: start.line, column: start.column + 6 };\n        const loc = { start, end };\n        const debug = {\n            type: 'DebuggerStatement',\n            loc\n        };\n        if (this.node.expressions.length === 0) {\n            // Debug all\n            block.chunks.create.push(debug);\n            block.chunks.update.push(debug);\n        }\n        else {\n            const log = {\n                type: 'Identifier',\n                name: 'log',\n                loc\n            };\n            const dependencies = new Set();\n            this.node.expressions.forEach(expression => {\n                add_to_set(dependencies, expression.dependencies);\n            });\n            const contextual_identifiers = this.node.expressions\n                .filter(e => {\n                const variable = var_lookup.get(e.node.name);\n                return !(variable && variable.hoistable);\n            })\n                .map(e => e.node.name);\n            const logged_identifiers = this.node.expressions.map(e => p `${e.node.name}`);\n            const debug_statements = b `\n\t\t\t\t${contextual_identifiers.map(name => b `const ${name} = ${renderer.reference(name)};`)}\n\t\t\t\t@_console.${log}({ ${logged_identifiers} });\n\t\t\t\tdebugger;`;\n            if (dependencies.size) {\n                const condition = renderer.dirty(Array.from(dependencies));\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${condition}) {\n\t\t\t\t\t\t${debug_statements}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            block.chunks.create.push(b `{\n\t\t\t\t${debug_statements}\n\t\t\t}`);\n        }\n    }\n}\n\nclass ElseBlockWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.var = null;\n        this.block = block.child({\n            comment: create_debugging_comment(node, this.renderer.component),\n            name: this.renderer.component.get_unique_name('create_else_block'),\n            type: 'else'\n        });\n        this.fragment = new FragmentWrapper(renderer, this.block, this.node.children, parent, strip_whitespace, next_sibling);\n        this.is_dynamic = this.block.dependencies.size > 0;\n    }\n}\nclass EachBlockWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.updates = [];\n        this.var = { type: 'Identifier', name: 'each' };\n        this.cannot_use_innerhtml();\n        this.not_static_content();\n        const { dependencies } = node.expression;\n        block.add_dependencies(dependencies);\n        this.node.contexts.forEach(context => {\n            renderer.add_to_context(context.key.name, true);\n        });\n        add_const_tags_context(renderer, this.node.const_tags);\n        this.block = block.child({\n            comment: create_debugging_comment(this.node, this.renderer.component),\n            name: renderer.component.get_unique_name('create_each_block'),\n            type: 'each',\n            // @ts-ignore todo: probably error\n            key: node.key,\n            bindings: new Map(block.bindings)\n        });\n        // TODO this seems messy\n        this.block.has_animation = this.node.has_animation;\n        this.index_name = this.node.index\n            ? { type: 'Identifier', name: this.node.index }\n            : renderer.component.get_unique_name(`${this.node.context}_index`);\n        const fixed_length = node.expression.node.type === 'ArrayExpression' &&\n            node.expression.node.elements.every(element => element.type !== 'SpreadElement')\n            ? node.expression.node.elements.length\n            : null;\n        // hack the sourcemap, so that if data is missing the bug\n        // is easy to find\n        let c = this.node.start + 2;\n        while (renderer.component.source[c] !== 'e')\n            c += 1;\n        const start = renderer.component.locate(c);\n        const end = { line: start.line, column: start.column + 4 };\n        const length = {\n            type: 'Identifier',\n            name: 'length',\n            loc: { start, end }\n        };\n        const each_block_value = renderer.component.get_unique_name(`${this.var.name}_value`);\n        const iterations = block.get_unique_name(`${this.var.name}_blocks`);\n        renderer.add_to_context(each_block_value.name, true);\n        renderer.add_to_context(this.index_name.name, true);\n        this.vars = {\n            create_each_block: this.block.name,\n            each_block_value,\n            get_each_context: renderer.component.get_unique_name(`get_${this.var.name}_context`),\n            iterations,\n            // optimisation for array literal\n            fixed_length,\n            data_length: fixed_length === null ? x `${each_block_value}.${length}` : fixed_length,\n            view_length: fixed_length === null ? x `${iterations}.length` : fixed_length\n        };\n        const object = get_object(node.expression.node);\n        const store = object.type === 'Identifier' && object.name[0] === '$' ? object.name.slice(1) : null;\n        node.contexts.forEach(prop => {\n            this.block.bindings.set(prop.key.name, {\n                object: this.vars.each_block_value,\n                property: this.index_name,\n                modifier: prop.modifier,\n                snippet: prop.modifier(x `${this.vars.each_block_value}[${this.index_name}]`),\n                store\n            });\n        });\n        if (this.node.index) {\n            this.block.get_unique_name(this.node.index); // this prevents name collisions (#1254)\n        }\n        renderer.blocks.push(this.block);\n        this.fragment = new FragmentWrapper(renderer, this.block, node.children, this, strip_whitespace, next_sibling);\n        if (this.node.else) {\n            this.else = new ElseBlockWrapper(renderer, block, this, this.node.else, strip_whitespace, next_sibling);\n            renderer.blocks.push(this.else.block);\n            if (this.else.is_dynamic) {\n                this.block.add_dependencies(this.else.block.dependencies);\n            }\n        }\n        block.add_dependencies(this.block.dependencies);\n        if (this.block.has_outros || (this.else && this.else.block.has_outros)) {\n            block.add_outro();\n        }\n    }\n    render(block, parent_node, parent_nodes) {\n        if (this.fragment.nodes.length === 0)\n            return;\n        const { renderer } = this;\n        const { component } = renderer;\n        const needs_anchor = this.next\n            ? !this.next.is_dom_node() :\n            !parent_node || !this.parent.is_dom_node();\n        const snippet = this.node.expression.manipulate(block);\n        block.chunks.init.push(b `let ${this.vars.each_block_value} = ${snippet};`);\n        if (this.renderer.options.dev) {\n            block.chunks.init.push(b `@validate_each_argument(${this.vars.each_block_value});`);\n        }\n        const initial_anchor_node = { type: 'Identifier', name: parent_node ? 'null' : '#anchor' };\n        const initial_mount_node = parent_node || { type: 'Identifier', name: '#target' };\n        const update_anchor_node = needs_anchor\n            ? block.get_unique_name(`${this.var.name}_anchor`)\n            : (this.next && this.next.var) || { type: 'Identifier', name: 'null' };\n        const update_mount_node = this.get_update_mount_node(update_anchor_node);\n        const args = {\n            block,\n            parent_node,\n            parent_nodes,\n            snippet,\n            initial_anchor_node,\n            initial_mount_node,\n            update_anchor_node,\n            update_mount_node\n        };\n        const all_dependencies = new Set(this.block.dependencies); // TODO should be dynamic deps only\n        this.node.expression.dynamic_dependencies().forEach((dependency) => {\n            all_dependencies.add(dependency);\n        });\n        if (this.node.key) {\n            this.node.key.dynamic_dependencies().forEach((dependency) => {\n                all_dependencies.add(dependency);\n            });\n        }\n        this.dependencies = all_dependencies;\n        if (this.node.key) {\n            this.render_keyed(args);\n        }\n        else {\n            this.render_unkeyed(args);\n        }\n        if (this.block.has_intro_method || this.block.has_outro_method) {\n            block.chunks.intro.push(b `\n\t\t\t\tfor (let #i = 0; #i < ${this.vars.data_length}; #i += 1) {\n\t\t\t\t\t@transition_in(${this.vars.iterations}[#i]);\n\t\t\t\t}\n\t\t\t`);\n        }\n        if (needs_anchor) {\n            block.add_element(update_anchor_node, x `@empty()`, parent_nodes && x `@empty()`, parent_node);\n        }\n        if (this.else) {\n            const each_block_else = component.get_unique_name(`${this.var.name}_else`);\n            block.chunks.init.push(b `let ${each_block_else} = null;`);\n            // TODO neaten this up... will end up with an empty line in the block\n            block.chunks.init.push(b `\n\t\t\t\tif (!${this.vars.data_length}) {\n\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#ctx);\n\t\t\t\t}\n\t\t\t`);\n            block.chunks.create.push(b `\n\t\t\t\tif (${each_block_else}) {\n\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t}\n\t\t\t`);\n            if (this.renderer.options.hydratable) {\n                block.chunks.claim.push(b `\n\t\t\t\t\tif (${each_block_else}) {\n\t\t\t\t\t\t${each_block_else}.l(${parent_nodes});\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            block.chunks.mount.push(b `\n\t\t\t\tif (${each_block_else}) {\n\t\t\t\t\t${each_block_else}.m(${initial_mount_node}, ${initial_anchor_node});\n\t\t\t\t}\n\t\t\t`);\n            const has_transitions = !!(this.else.block.has_intro_method || this.else.block.has_outro_method);\n            const destroy_block_else = this.else.block.has_outro_method\n                ? b `\n\t\t\t\t\t@group_outros();\n\t\t\t\t\t@transition_out(${each_block_else}, 1, 1, () => {\n\t\t\t\t\t\t${each_block_else} = null;\n\t\t\t\t\t});\n\t\t\t\t\t@check_outros();`\n                : b `\n\t\t\t\t\t${each_block_else}.d(1);\n\t\t\t\t\t${each_block_else} = null;`;\n            if (this.else.block.has_update_method) {\n                this.updates.push(b `\n\t\t\t\t\tif (!${this.vars.data_length} && ${each_block_else}) {\n\t\t\t\t\t\t${each_block_else}.p(#ctx, #dirty);\n\t\t\t\t\t} else if (!${this.vars.data_length}) {\n\t\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#ctx);\n\t\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t\t\t${has_transitions && b `@transition_in(${each_block_else}, 1);`}\n\t\t\t\t\t\t${each_block_else}.m(${update_mount_node}, ${update_anchor_node});\n\t\t\t\t\t} else if (${each_block_else}) {\n\t\t\t\t\t\t${destroy_block_else};\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                this.updates.push(b `\n\t\t\t\t\tif (${this.vars.data_length}) {\n\t\t\t\t\t\tif (${each_block_else}) {\n\t\t\t\t\t\t\t${destroy_block_else};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!${each_block_else}) {\n\t\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#ctx);\n\t\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t\t\t${has_transitions && b `@transition_in(${each_block_else}, 1);`}\n\t\t\t\t\t\t${each_block_else}.m(${update_mount_node}, ${update_anchor_node});\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            block.chunks.destroy.push(b `\n\t\t\t\tif (${each_block_else}) ${each_block_else}.d(${parent_node ? '' : 'detaching'});\n\t\t\t`);\n        }\n        if (this.updates.length) {\n            block.chunks.update.push(b `\n\t\t\t\tif (${block.renderer.dirty(Array.from(all_dependencies))}) {\n\t\t\t\t\t${this.updates}\n\t\t\t\t}\n\t\t\t`);\n        }\n        this.fragment.render(this.block, null, x `#nodes`);\n        if (this.else) {\n            this.else.fragment.render(this.else.block, null, x `#nodes`);\n        }\n        this.context_props = this.node.contexts.map(prop => b `child_ctx[${renderer.context_lookup.get(prop.key.name).index}] = ${prop.default_modifier(prop.modifier(x `list[i]`), name => renderer.context_lookup.has(name) ? x `child_ctx[${renderer.context_lookup.get(name).index}]` : { type: 'Identifier', name })};`);\n        if (this.node.has_binding)\n            this.context_props.push(b `child_ctx[${renderer.context_lookup.get(this.vars.each_block_value.name).index}] = list;`);\n        if (this.node.has_binding || this.node.has_index_binding || this.node.index)\n            this.context_props.push(b `child_ctx[${renderer.context_lookup.get(this.index_name.name).index}] = i;`);\n        // TODO which is better — Object.create(array) or array.slice()?\n        renderer.blocks.push(b `\n\t\t\tfunction ${this.vars.get_each_context}(#ctx, list, i) {\n\t\t\t\tconst child_ctx = #ctx.slice();\n\t\t\t\t${this.context_props}\n\t\t\t\t${add_const_tags(this.block, this.node.const_tags, 'child_ctx')}\n\t\t\t\treturn child_ctx;\n\t\t\t}\n\t\t`);\n    }\n    render_keyed({ block, parent_node, parent_nodes, snippet, initial_anchor_node, initial_mount_node, update_anchor_node, update_mount_node }) {\n        const { create_each_block, iterations, data_length, view_length } = this.vars;\n        const get_key = block.get_unique_name('get_key');\n        const lookup = block.get_unique_name(`${this.var.name}_lookup`);\n        block.add_variable(iterations, x `[]`);\n        block.add_variable(lookup, x `new @_Map()`);\n        if (this.fragment.nodes[0].is_dom_node()) {\n            this.block.first = this.fragment.nodes[0].var;\n        }\n        else {\n            this.block.first = this.block.get_unique_name('first');\n            this.block.add_element(this.block.first, x `@empty()`, parent_nodes && x `@empty()`, null);\n        }\n        block.chunks.init.push(b `\n\t\t\tconst ${get_key} = #ctx => ${this.node.key.manipulate(block)};\n\n\t\t\t${this.renderer.options.dev && b `@validate_each_keys(#ctx, ${this.vars.each_block_value}, ${this.vars.get_each_context}, ${get_key});`}\n\t\t\tfor (let #i = 0; #i < ${data_length}; #i += 1) {\n\t\t\t\tlet child_ctx = ${this.vars.get_each_context}(#ctx, ${this.vars.each_block_value}, #i);\n\t\t\t\tlet key = ${get_key}(child_ctx);\n\t\t\t\t${lookup}.set(key, ${iterations}[#i] = ${create_each_block}(key, child_ctx));\n\t\t\t}\n\t\t`);\n        block.chunks.create.push(b `\n\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t${iterations}[#i].c();\n\t\t\t}\n\t\t`);\n        if (parent_nodes && this.renderer.options.hydratable) {\n            block.chunks.claim.push(b `\n\t\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t\t${iterations}[#i].l(${parent_nodes});\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.chunks.mount.push(b `\n\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t${iterations}[#i].m(${initial_mount_node}, ${initial_anchor_node});\n\t\t\t}\n\t\t`);\n        const dynamic = this.block.has_update_method;\n        const destroy = this.node.has_animation\n            ? (this.block.has_outros\n                ? '@fix_and_outro_and_destroy_block'\n                : '@fix_and_destroy_block')\n            : this.block.has_outros\n                ? '@outro_and_destroy_block'\n                : '@destroy_block';\n        if (this.dependencies.size) {\n            this.block.maintain_context = true;\n            this.updates.push(b `\n\t\t\t\t${this.vars.each_block_value} = ${snippet};\n\t\t\t\t${this.renderer.options.dev && b `@validate_each_argument(${this.vars.each_block_value});`}\n\n\t\t\t\t${this.block.has_outros && b `@group_outros();`}\n\t\t\t\t${this.node.has_animation && b `for (let #i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].r();`}\n\t\t\t\t${this.renderer.options.dev && b `@validate_each_keys(#ctx, ${this.vars.each_block_value}, ${this.vars.get_each_context}, ${get_key});`}\n\t\t\t\t${iterations} = @update_keyed_each(${iterations}, #dirty, ${get_key}, ${dynamic ? 1 : 0}, #ctx, ${this.vars.each_block_value}, ${lookup}, ${update_mount_node}, ${destroy}, ${create_each_block}, ${update_anchor_node}, ${this.vars.get_each_context});\n\t\t\t\t${this.node.has_animation && b `for (let #i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].a();`}\n\t\t\t\t${this.block.has_outros && b `@check_outros();`}\n\t\t\t`);\n        }\n        if (this.block.has_outros) {\n            block.chunks.outro.push(b `\n\t\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t\t@transition_out(${iterations}[#i]);\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.chunks.destroy.push(b `\n\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t${iterations}[#i].d(${parent_node ? null : 'detaching'});\n\t\t\t}\n\t\t`);\n    }\n    render_unkeyed({ block, parent_nodes, snippet, initial_anchor_node, initial_mount_node, update_anchor_node, update_mount_node }) {\n        const { create_each_block, iterations, fixed_length, data_length, view_length } = this.vars;\n        block.chunks.init.push(b `\n\t\t\tlet ${iterations} = [];\n\n\t\t\tfor (let #i = 0; #i < ${data_length}; #i += 1) {\n\t\t\t\t${iterations}[#i] = ${create_each_block}(${this.vars.get_each_context}(#ctx, ${this.vars.each_block_value}, #i));\n\t\t\t}\n\t\t`);\n        block.chunks.create.push(b `\n\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t${iterations}[#i].c();\n\t\t\t}\n\t\t`);\n        if (parent_nodes && this.renderer.options.hydratable) {\n            block.chunks.claim.push(b `\n\t\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t\t${iterations}[#i].l(${parent_nodes});\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.chunks.mount.push(b `\n\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t${iterations}[#i].m(${initial_mount_node}, ${initial_anchor_node});\n\t\t\t}\n\t\t`);\n        if (this.dependencies.size) {\n            const has_transitions = !!(this.block.has_intro_method || this.block.has_outro_method);\n            const for_loop_body = this.block.has_update_method\n                ? b `\n\t\t\t\t\tif (${iterations}[#i]) {\n\t\t\t\t\t\t${iterations}[#i].p(child_ctx, #dirty);\n\t\t\t\t\t\t${has_transitions && b `@transition_in(${this.vars.iterations}[#i], 1);`}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${iterations}[#i] = ${create_each_block}(child_ctx);\n\t\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t\t${has_transitions && b `@transition_in(${this.vars.iterations}[#i], 1);`}\n\t\t\t\t\t\t${iterations}[#i].m(${update_mount_node}, ${update_anchor_node});\n\t\t\t\t\t}\n\t\t\t\t`\n                : has_transitions\n                    ? b `\n\t\t\t\t\t\tif (${iterations}[#i]) {\n\t\t\t\t\t\t\t@transition_in(${this.vars.iterations}[#i], 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t${iterations}[#i] = ${create_each_block}(child_ctx);\n\t\t\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t\t\t@transition_in(${this.vars.iterations}[#i], 1);\n\t\t\t\t\t\t\t${iterations}[#i].m(${update_mount_node}, ${update_anchor_node});\n\t\t\t\t\t\t}\n\t\t\t\t\t`\n                    : b `\n\t\t\t\t\t\tif (!${iterations}[#i]) {\n\t\t\t\t\t\t\t${iterations}[#i] = ${create_each_block}(child_ctx);\n\t\t\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t\t\t${iterations}[#i].m(${update_mount_node}, ${update_anchor_node});\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n            const start = this.block.has_update_method ? 0 : '#old_length';\n            let remove_old_blocks;\n            if (this.block.has_outros) {\n                const out = block.get_unique_name('out');\n                block.chunks.init.push(b `\n\t\t\t\t\tconst ${out} = i => @transition_out(${iterations}[i], 1, 1, () => {\n\t\t\t\t\t\t${iterations}[i] = null;\n\t\t\t\t\t});\n\t\t\t\t`);\n                remove_old_blocks = b `\n\t\t\t\t\t@group_outros();\n\t\t\t\t\tfor (#i = ${data_length}; #i < ${view_length}; #i += 1) {\n\t\t\t\t\t\t${out}(#i);\n\t\t\t\t\t}\n\t\t\t\t\t@check_outros();\n\t\t\t\t`;\n            }\n            else {\n                remove_old_blocks = b `\n\t\t\t\t\tfor (${this.block.has_update_method ? null : x `#i = ${data_length}`}; #i < ${this.block.has_update_method ? view_length : '#old_length'}; #i += 1) {\n\t\t\t\t\t\t${iterations}[#i].d(1);\n\t\t\t\t\t}\n\t\t\t\t\t${!fixed_length && b `${view_length} = ${data_length};`}\n\t\t\t\t`;\n            }\n            // We declare `i` as block scoped here, as the `remove_old_blocks` code\n            // may rely on continuing where this iteration stopped.\n            const update = b `\n\t\t\t\t${!this.block.has_update_method && b `const #old_length = ${this.vars.each_block_value}.length;`}\n\t\t\t\t${this.vars.each_block_value} = ${snippet};\n\t\t\t\t${this.renderer.options.dev && b `@validate_each_argument(${this.vars.each_block_value});`}\n\n\t\t\t\tlet #i;\n\t\t\t\tfor (#i = ${start}; #i < ${data_length}; #i += 1) {\n\t\t\t\t\tconst child_ctx = ${this.vars.get_each_context}(#ctx, ${this.vars.each_block_value}, #i);\n\n\t\t\t\t\t${for_loop_body}\n\t\t\t\t}\n\n\t\t\t\t${remove_old_blocks}\n\t\t\t`;\n            this.updates.push(update);\n        }\n        if (this.block.has_outros) {\n            block.chunks.outro.push(b `\n\t\t\t\t${iterations} = ${iterations}.filter(@_Boolean);\n\t\t\t\tfor (let #i = 0; #i < ${view_length}; #i += 1) {\n\t\t\t\t\t@transition_out(${iterations}[#i]);\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.chunks.destroy.push(b `@destroy_each(${iterations}, detaching);`);\n    }\n}\n\nclass TextWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, data) {\n        super(renderer, block, parent, node);\n        this.skip = this.node.should_skip();\n        this.data = data;\n        this.var = (this.skip ? null : x `t`);\n    }\n    use_space() {\n        if (this.renderer.component.component_options.preserveWhitespace)\n            return false;\n        if (/[\\S\\u00A0]/.test(this.data))\n            return false;\n        return !this.node.within_pre();\n    }\n    render(block, parent_node, parent_nodes) {\n        if (this.skip)\n            return;\n        const use_space = this.use_space();\n        const string_literal = {\n            type: 'Literal',\n            value: this.data,\n            loc: {\n                start: this.renderer.locate(this.node.start),\n                end: this.renderer.locate(this.node.end)\n            }\n        };\n        block.add_element(this.var, use_space ? x `@space()` : x `@text(${string_literal})`, parent_nodes && (use_space ? x `@claim_space(${parent_nodes})` : x `@claim_text(${parent_nodes}, ${string_literal})`), parent_node);\n    }\n}\n\nconst svg_attributes = 'accent-height accumulate additive alignment-baseline allowReorder alphabetic amplitude arabic-form ascent attributeName attributeType autoReverse azimuth baseFrequency baseline-shift baseProfile bbox begin bias by calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy edgeMode elevation enable-background end exponent externalResourcesRequired fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits hanging height href horiz-adv-x horiz-origin-x id ideographic image-rendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lang lengthAdjust letter-spacing lighting-color limitingConeAngle local marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode name numOctaves offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload opacity operator order orient orientation origin overflow overline-position overline-thickness panose-1 paint-order pathLength patternContentUnits patternTransform patternUnits pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform type u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility width widths word-spacing writing-mode x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space y y1 y2 yChannelSelector z zoomAndPan'.split(' ');\nconst svg_attribute_lookup = new Map();\nsvg_attributes.forEach(name => {\n    svg_attribute_lookup.set(name.toLowerCase(), name);\n});\nfunction fix_attribute_casing(name) {\n    name = name.toLowerCase();\n    return svg_attribute_lookup.get(name) || name;\n}\n\nfunction handle_select_value_binding(attr, dependencies) {\n    const { parent } = attr;\n    if (parent.node.name === 'select') {\n        parent.select_binding_dependencies = dependencies;\n        dependencies.forEach((prop) => {\n            parent.renderer.component.indirect_dependencies.set(prop, new Set());\n        });\n    }\n}\n\nconst non_textlike_input_types = new Set([\n    'button',\n    'checkbox',\n    'color',\n    'date',\n    'datetime-local',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n]);\nclass BaseAttributeWrapper {\n    constructor(parent, block, node) {\n        this.node = node;\n        this.parent = parent;\n        if (node.dependencies.size > 0) {\n            parent.cannot_use_innerhtml();\n            parent.not_static_content();\n            block.add_dependencies(node.dependencies);\n        }\n    }\n    render(_block) { }\n}\nclass AttributeWrapper extends BaseAttributeWrapper {\n    constructor(parent, block, node) {\n        super(parent, block, node);\n        if (node.dependencies.size > 0) {\n            // special case — <option value={foo}> — see below\n            if (this.parent.node.name === 'option' && node.name === 'value') {\n                let select = this.parent;\n                while (select && (select.node.type !== 'Element' || select.node.name !== 'select')) {\n                    // @ts-ignore todo: doublecheck this, but looks to be correct\n                    select = select.parent;\n                }\n                if (select && select.select_binding_dependencies) {\n                    select.select_binding_dependencies.forEach(prop => {\n                        this.node.dependencies.forEach((dependency) => {\n                            this.parent.renderer.component.indirect_dependencies.get(prop).add(dependency);\n                        });\n                    });\n                }\n            }\n            if (node.name === 'value') {\n                handle_select_value_binding(this, node.dependencies);\n            }\n        }\n        if (this.parent.node.namespace == namespaces.foreign) {\n            // leave attribute case alone for elements in the \"foreign\" namespace\n            this.name = this.node.name;\n            this.metadata = this.get_metadata();\n            this.is_indirectly_bound_value = false;\n            this.property_name = null;\n            this.is_select_value_attribute = false;\n            this.is_input_value = false;\n        }\n        else {\n            this.name = fix_attribute_casing(this.node.name);\n            this.metadata = this.get_metadata();\n            this.is_indirectly_bound_value = is_indirectly_bound_value(this);\n            this.property_name = this.is_indirectly_bound_value\n                ? '__value'\n                : this.metadata && this.metadata.property_name;\n            this.is_select_value_attribute = this.name === 'value' && this.parent.node.name === 'select';\n            this.is_input_value = this.name === 'value' && this.parent.node.name === 'input';\n        }\n        // TODO retire this exception in favour of https://github.com/sveltejs/svelte/issues/3750\n        this.is_src = this.name === 'src' && (!this.parent.node.namespace || this.parent.node.namespace === namespaces.html);\n        this.should_cache = should_cache(this);\n    }\n    render(block) {\n        const element = this.parent;\n        const { name, property_name, should_cache, is_indirectly_bound_value } = this;\n        // xlink is a special case... we could maybe extend this to generic\n        // namespaced attributes but I'm not sure that's applicable in\n        // HTML5?\n        const method = /-/.test(element.node.name)\n            ? '@set_custom_element_data'\n            : name.slice(0, 6) === 'xlink:'\n                ? '@xlink_attr'\n                : '@attr';\n        const is_legacy_input_type = element.renderer.component.compile_options.legacy && name === 'type' && this.parent.node.name === 'input';\n        const dependencies = this.get_dependencies();\n        const value = this.get_value(block);\n        let updater;\n        const init = this.get_init(block, value);\n        if (is_legacy_input_type) {\n            block.chunks.hydrate.push(b `@set_input_type(${element.var}, ${init});`);\n            updater = b `@set_input_type(${element.var}, ${should_cache ? this.last : value});`;\n        }\n        else if (this.is_select_value_attribute) {\n            // annoying special case\n            const is_multiple_select = element.node.get_static_attribute_value('multiple');\n            if (is_multiple_select) {\n                updater = b `@select_options(${element.var}, ${value});`;\n            }\n            else {\n                updater = b `@select_option(${element.var}, ${value});`;\n            }\n            block.chunks.mount.push(b `\n\t\t\t\t${updater}\n\t\t\t`);\n        }\n        else if (this.is_src) {\n            block.chunks.hydrate.push(b `if (!@src_url_equal(${element.var}.src, ${init})) ${method}(${element.var}, \"${name}\", ${this.last});`);\n            updater = b `${method}(${element.var}, \"${name}\", ${should_cache ? this.last : value});`;\n        }\n        else if (property_name) {\n            block.chunks.hydrate.push(b `${element.var}.${property_name} = ${init};`);\n            updater = block.renderer.options.dev\n                ? b `@prop_dev(${element.var}, \"${property_name}\", ${should_cache ? this.last : value});`\n                : b `${element.var}.${property_name} = ${should_cache ? this.last : value};`;\n        }\n        else {\n            block.chunks.hydrate.push(b `${method}(${element.var}, \"${name}\", ${init});`);\n            updater = b `${method}(${element.var}, \"${name}\", ${should_cache ? this.last : value});`;\n        }\n        if (is_indirectly_bound_value) {\n            const update_value = b `${element.var}.value = ${element.var}.__value;`;\n            block.chunks.hydrate.push(update_value);\n            updater = b `\n\t\t\t\t${updater}\n\t\t\t\t${update_value};\n\t\t\t`;\n        }\n        if (dependencies.length > 0) {\n            const condition = this.get_dom_update_conditions(block, block.renderer.dirty(dependencies));\n            block.chunks.update.push(b `\n\t\t\t\tif (${condition}) {\n\t\t\t\t\t${updater}\n\t\t\t\t}`);\n        }\n        // special case – autofocus. has to be handled in a bit of a weird way\n        if (name === 'autofocus') {\n            block.autofocus = {\n                element_var: element.var,\n                condition_expression: this.node.is_true ? undefined : value\n            };\n        }\n    }\n    get_init(block, value) {\n        this.last = this.should_cache && block.get_unique_name(`${this.parent.var.name}_${this.name.replace(/[^a-zA-Z_$]/g, '_')}_value`);\n        if (this.should_cache)\n            block.add_variable(this.last);\n        return this.should_cache ? x `${this.last} = ${value}` : value;\n    }\n    get_dom_update_conditions(block, dependency_condition) {\n        const { property_name, should_cache, last } = this;\n        const element = this.parent;\n        const value = this.get_value(block);\n        let condition = dependency_condition;\n        if (should_cache) {\n            condition = this.is_src\n                ? x `${condition} && (!@src_url_equal(${element.var}.src, (${last} = ${value})))`\n                : x `${condition} && (${last} !== (${last} = ${value}))`;\n        }\n        if (this.is_input_value) {\n            const type = element.node.get_static_attribute_value('type');\n            if (type !== true && !non_textlike_input_types.has(type)) {\n                condition = x `${condition} && ${element.var}.${property_name} !== ${should_cache ? last : value}`;\n            }\n        }\n        if (block.has_outros) {\n            condition = x `!#current || ${condition}`;\n        }\n        return condition;\n    }\n    get_dependencies() {\n        const node_dependencies = this.node.get_dependencies();\n        const dependencies = new Set(node_dependencies);\n        node_dependencies.forEach((prop) => {\n            const indirect_dependencies = this.parent.renderer.component.indirect_dependencies.get(prop);\n            if (indirect_dependencies) {\n                indirect_dependencies.forEach(indirect_dependency => {\n                    dependencies.add(indirect_dependency);\n                });\n            }\n        });\n        return Array.from(dependencies);\n    }\n    get_metadata() {\n        if (this.parent.node.namespace)\n            return null;\n        const metadata = attribute_lookup[this.name];\n        if (metadata && metadata.applies_to && !metadata.applies_to.includes(this.parent.node.name))\n            return null;\n        return metadata;\n    }\n    get_value(block) {\n        if (this.node.is_true) {\n            if (this.metadata && boolean_attribute.has(this.metadata.property_name.toLowerCase())) {\n                return x `true`;\n            }\n            return x `\"\"`;\n        }\n        if (this.node.chunks.length === 0)\n            return x `\"\"`;\n        // TODO some of this code is repeated in Tag.ts — would be good to\n        // DRY it out if that's possible without introducing crazy indirection\n        if (this.node.chunks.length === 1) {\n            return this.node.chunks[0].type === 'Text'\n                ? string_literal(this.node.chunks[0].data)\n                : this.node.chunks[0].manipulate(block);\n        }\n        let value = this.node.name === 'class'\n            ? this.get_class_name_text(block)\n            : this.render_chunks(block).reduce((lhs, rhs) => x `${lhs} + ${rhs}`);\n        // '{foo} {bar}' — treat as string concatenation\n        if (this.node.chunks[0].type !== 'Text') {\n            value = x `\"\" + ${value}`;\n        }\n        return value;\n    }\n    get_class_name_text(block) {\n        const scoped_css = this.node.chunks.some((chunk) => chunk.synthetic);\n        const rendered = this.render_chunks(block);\n        if (scoped_css && rendered.length === 2) {\n            // we have a situation like class={possiblyUndefined}\n            rendered[0] = x `@null_to_empty(${rendered[0]})`;\n        }\n        return rendered.reduce((lhs, rhs) => x `${lhs} + ${rhs}`);\n    }\n    render_chunks(block) {\n        return this.node.chunks.map((chunk) => {\n            if (chunk.type === 'Text') {\n                return string_literal(chunk.data);\n            }\n            return chunk.manipulate(block);\n        });\n    }\n    stringify() {\n        if (this.node.is_true)\n            return '';\n        const value = this.node.chunks;\n        if (value.length === 0)\n            return '=\"\"';\n        return `=\"${value.map(chunk => {\n            return chunk.type === 'Text'\n                ? chunk.data.replace(/\"/g, '\\\\\"')\n                : `\\${${chunk.manipulate()}}`;\n        }).join('')}\"`;\n    }\n}\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst attribute_lookup = {\n    allowfullscreen: { property_name: 'allowFullscreen', applies_to: ['iframe'] },\n    allowpaymentrequest: { property_name: 'allowPaymentRequest', applies_to: ['iframe'] },\n    async: { applies_to: ['script'] },\n    autofocus: { applies_to: ['button', 'input', 'keygen', 'select', 'textarea'] },\n    autoplay: { applies_to: ['audio', 'video'] },\n    checked: { applies_to: ['input'] },\n    controls: { applies_to: ['audio', 'video'] },\n    default: { applies_to: ['track'] },\n    defer: { applies_to: ['script'] },\n    disabled: {\n        applies_to: [\n            'button',\n            'fieldset',\n            'input',\n            'keygen',\n            'optgroup',\n            'option',\n            'select',\n            'textarea'\n        ]\n    },\n    formnovalidate: { property_name: 'formNoValidate', applies_to: ['button', 'input'] },\n    hidden: {},\n    indeterminate: { applies_to: ['input'] },\n    ismap: { property_name: 'isMap', applies_to: ['img'] },\n    loop: { applies_to: ['audio', 'bgsound', 'video'] },\n    multiple: { applies_to: ['input', 'select'] },\n    muted: { applies_to: ['audio', 'video'] },\n    nomodule: { property_name: 'noModule', applies_to: ['script'] },\n    novalidate: { property_name: 'noValidate', applies_to: ['form'] },\n    open: { applies_to: ['details', 'dialog'] },\n    playsinline: { property_name: 'playsInline', applies_to: ['video'] },\n    readonly: { property_name: 'readOnly', applies_to: ['input', 'textarea'] },\n    required: { applies_to: ['input', 'select', 'textarea'] },\n    reversed: { applies_to: ['ol'] },\n    selected: { applies_to: ['option'] },\n    value: {\n        applies_to: [\n            'button',\n            'option',\n            'input',\n            'li',\n            'meter',\n            'progress',\n            'param',\n            'select',\n            'textarea'\n        ]\n    }\n};\nObject.keys(attribute_lookup).forEach(name => {\n    const metadata = attribute_lookup[name];\n    if (!metadata.property_name)\n        metadata.property_name = name;\n});\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attribute = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\nfunction should_cache(attribute) {\n    return attribute.is_src || attribute.node.should_cache();\n}\nfunction is_indirectly_bound_value(attribute) {\n    const element = attribute.parent;\n    return attribute.name === 'value' &&\n        (element.node.name === 'option' || // TODO check it's actually bound\n            (element.node.name === 'input' &&\n                element.node.bindings.some((binding) => /checked|group/.test(binding.name))));\n}\n\nclass StyleAttributeWrapper extends AttributeWrapper {\n    render(block) {\n        const style_props = optimize_style(this.node.chunks);\n        if (!style_props)\n            return super.render(block);\n        style_props.forEach((prop) => {\n            let value;\n            if (is_dynamic$1(prop.value)) {\n                const prop_dependencies = new Set();\n                value = prop.value\n                    .map(chunk => {\n                    if (chunk.type === 'Text') {\n                        return string_literal(chunk.data);\n                    }\n                    else {\n                        add_to_set(prop_dependencies, chunk.dynamic_dependencies());\n                        return chunk.manipulate(block);\n                    }\n                })\n                    .reduce((lhs, rhs) => x `${lhs} + ${rhs}`);\n                // TODO is this necessary? style.setProperty always treats value as string, no?\n                // if (prop.value.length === 1 || prop.value[0].type !== 'Text') {\n                // \tvalue = x`\"\" + ${value}`;\n                // }\n                if (prop_dependencies.size) {\n                    let condition = block.renderer.dirty(Array.from(prop_dependencies));\n                    if (block.has_outros) {\n                        condition = x `!#current || ${condition}`;\n                    }\n                    const update = b `\n\t\t\t\t\t\tif (${condition}) {\n\t\t\t\t\t\t\t@set_style(${this.parent.var}, \"${prop.key}\", ${value}, ${prop.important ? 1 : null});\n\t\t\t\t\t\t}`;\n                    block.chunks.update.push(update);\n                }\n            }\n            else {\n                value = string_literal(prop.value[0].data);\n            }\n            block.chunks.hydrate.push(b `@set_style(${this.parent.var}, \"${prop.key}\", ${value}, ${prop.important ? 1 : null});`);\n        });\n    }\n}\nfunction optimize_style(value) {\n    const props = [];\n    let chunks = value.slice();\n    while (chunks.length) {\n        const chunk = chunks[0];\n        if (chunk.type !== 'Text')\n            return null;\n        const key_match = /^\\s*([\\w-]+):\\s*/.exec(chunk.data);\n        if (!key_match)\n            return null;\n        const key = key_match[1];\n        const offset = key_match.index + key_match[0].length;\n        const remaining_data = chunk.data.slice(offset);\n        if (remaining_data) {\n            chunks[0] = {\n                start: chunk.start + offset,\n                end: chunk.end,\n                type: 'Text',\n                data: remaining_data\n            };\n        }\n        else {\n            chunks.shift();\n        }\n        const result = get_style_value(chunks);\n        props.push({ key, value: result.value, important: result.important });\n        chunks = result.chunks;\n    }\n    return props;\n}\nfunction get_style_value(chunks) {\n    const value = [];\n    let in_url = false;\n    let quote_mark = null;\n    let escaped = false;\n    let closed = false;\n    while (chunks.length && !closed) {\n        const chunk = chunks.shift();\n        if (chunk.type === 'Text') {\n            let c = 0;\n            while (c < chunk.data.length) {\n                const char = chunk.data[c];\n                if (escaped) {\n                    escaped = false;\n                }\n                else if (char === '\\\\') {\n                    escaped = true;\n                }\n                else if (char === quote_mark) {\n                    quote_mark = null;\n                }\n                else if (char === '\"' || char === \"'\") {\n                    quote_mark = char;\n                }\n                else if (char === ')' && in_url) {\n                    in_url = false;\n                }\n                else if (char === 'u' && chunk.data.slice(c, c + 4) === 'url(') {\n                    in_url = true;\n                }\n                else if (char === ';' && !in_url && !quote_mark) {\n                    closed = true;\n                    break;\n                }\n                c += 1;\n            }\n            if (c > 0) {\n                value.push({\n                    type: 'Text',\n                    start: chunk.start,\n                    end: chunk.start + c,\n                    data: chunk.data.slice(0, c)\n                });\n            }\n            while (/[;\\s]/.test(chunk.data[c]))\n                c += 1;\n            const remaining_data = chunk.data.slice(c);\n            if (remaining_data) {\n                chunks.unshift({\n                    start: chunk.start + c,\n                    end: chunk.end,\n                    type: 'Text',\n                    data: remaining_data\n                });\n                break;\n            }\n        }\n        else {\n            value.push(chunk);\n        }\n    }\n    let important = false;\n    const last_chunk = value[value.length - 1];\n    if (last_chunk && last_chunk.type === 'Text' && /\\s*!important\\s*$/.test(last_chunk.data)) {\n        important = true;\n        last_chunk.data = last_chunk.data.replace(/\\s*!important\\s*$/, '');\n        if (!last_chunk.data)\n            value.pop();\n    }\n    return {\n        chunks,\n        value,\n        important\n    };\n}\nfunction is_dynamic$1(value) {\n    return value.length > 1 || value[0].type !== 'Text';\n}\n\nclass SpreadAttributeWrapper extends BaseAttributeWrapper {\n}\n\nfunction mark_each_block_bindings(parent, binding) {\n    // we need to ensure that the each block creates a context including\n    // the list and the index, if they're not otherwise referenced\n    binding.expression.references.forEach(name => {\n        const each_block = parent.node.scope.get_owner(name);\n        if (each_block) {\n            each_block.has_binding = true;\n        }\n    });\n    if (binding.name === 'group') {\n        const add_index_binding = (name) => {\n            const each_block = parent.node.scope.get_owner(name);\n            if (each_block.type === 'EachBlock') {\n                each_block.has_index_binding = true;\n                for (const dep of each_block.expression.contextual_dependencies) {\n                    add_index_binding(dep);\n                }\n            }\n        };\n        // for `<input bind:group={} >`, we make sure that all the each blocks creates context with `index`\n        for (const name of binding.expression.contextual_dependencies) {\n            add_index_binding(name);\n        }\n    }\n}\n\nclass BindingWrapper {\n    constructor(block, node, parent) {\n        this.node = node;\n        this.parent = parent;\n        const { dependencies } = this.node.expression;\n        block.add_dependencies(dependencies);\n        // TODO does this also apply to e.g. `<input type='checkbox' bind:group='foo'>`?\n        handle_select_value_binding(this, dependencies);\n        if (node.is_contextual) {\n            mark_each_block_bindings(this.parent, this.node);\n        }\n        this.object = get_object(this.node.expression.node).name;\n        // view to model\n        this.handler = get_event_handler(this, parent.renderer, block, this.object, this.node.raw_expression);\n        this.snippet = this.node.expression.manipulate(block);\n        this.is_readonly = this.node.is_readonly;\n        this.needs_lock = this.node.name === 'currentTime'; // TODO others?\n    }\n    get_dependencies() {\n        const dependencies = new Set(this.node.expression.dependencies);\n        this.node.expression.dependencies.forEach((prop) => {\n            const indirect_dependencies = this.parent.renderer.component.indirect_dependencies.get(prop);\n            if (indirect_dependencies) {\n                indirect_dependencies.forEach(indirect_dependency => {\n                    dependencies.add(indirect_dependency);\n                });\n            }\n        });\n        return dependencies;\n    }\n    get_update_dependencies() {\n        const object = this.object;\n        const dependencies = new Set();\n        if (this.node.expression.template_scope.names.has(object)) {\n            this.node.expression.template_scope.dependencies_for_name\n                .get(object)\n                .forEach((name) => dependencies.add(name));\n        }\n        else {\n            dependencies.add(object);\n        }\n        const result = new Set(dependencies);\n        dependencies.forEach((dependency) => {\n            const indirect_dependencies = this.parent.renderer.component.indirect_dependencies.get(dependency);\n            if (indirect_dependencies) {\n                indirect_dependencies.forEach(indirect_dependency => {\n                    result.add(indirect_dependency);\n                });\n            }\n        });\n        return result;\n    }\n    is_readonly_media_attribute() {\n        return this.node.is_readonly_media_attribute();\n    }\n    render(block, lock) {\n        if (this.is_readonly)\n            return;\n        const { parent } = this;\n        const update_conditions = this.needs_lock ? [x `!${lock}`] : [];\n        const mount_conditions = [];\n        const dependency_array = Array.from(this.get_dependencies());\n        if (dependency_array.length > 0) {\n            update_conditions.push(block.renderer.dirty(dependency_array));\n        }\n        if (parent.node.name === 'input') {\n            const type = parent.node.get_static_attribute_value('type');\n            if (type === null ||\n                type === '' ||\n                type === 'text' ||\n                type === 'email' ||\n                type === 'password') {\n                update_conditions.push(x `${parent.var}.${this.node.name} !== ${this.snippet}`);\n            }\n            else if (type === 'number') {\n                update_conditions.push(x `@to_number(${parent.var}.${this.node.name}) !== ${this.snippet}`);\n            }\n        }\n        // model to view\n        let update_dom = get_dom_updater(parent, this);\n        let mount_dom = update_dom;\n        // special cases\n        switch (this.node.name) {\n            case 'group':\n                {\n                    const { binding_group, is_context, contexts, index, keypath } = get_binding_group(parent.renderer, this.node, block);\n                    block.renderer.add_to_context('$$binding_groups');\n                    if (is_context && !block.binding_group_initialised.has(keypath)) {\n                        if (contexts.length > 1) {\n                            let binding_group = x `${block.renderer.reference('$$binding_groups')}[${index}]`;\n                            for (const name of contexts.slice(0, -1)) {\n                                binding_group = x `${binding_group}[${block.renderer.reference(name)}]`;\n                                block.chunks.init.push(b `${binding_group} = ${binding_group} || [];`);\n                            }\n                        }\n                        block.chunks.init.push(b `${binding_group(true)} = [];`);\n                        block.binding_group_initialised.add(keypath);\n                    }\n                    block.chunks.hydrate.push(b `${binding_group(true)}.push(${parent.var});`);\n                    block.chunks.destroy.push(b `${binding_group(true)}.splice(${binding_group(true)}.indexOf(${parent.var}), 1);`);\n                    break;\n                }\n            case 'textContent':\n                update_conditions.push(x `${this.snippet} !== ${parent.var}.textContent`);\n                mount_conditions.push(x `${this.snippet} !== void 0`);\n                break;\n            case 'innerHTML':\n                update_conditions.push(x `${this.snippet} !== ${parent.var}.innerHTML`);\n                mount_conditions.push(x `${this.snippet} !== void 0`);\n                break;\n            case 'currentTime':\n                update_conditions.push(x `!@_isNaN(${this.snippet})`);\n                mount_dom = null;\n                break;\n            case 'playbackRate':\n            case 'volume':\n                update_conditions.push(x `!@_isNaN(${this.snippet})`);\n                mount_conditions.push(x `!@_isNaN(${this.snippet})`);\n                break;\n            case 'paused':\n                {\n                    // this is necessary to prevent audio restarting by itself\n                    const last = block.get_unique_name(`${parent.var.name}_is_paused`);\n                    block.add_variable(last, x `true`);\n                    update_conditions.push(x `${last} !== (${last} = ${this.snippet})`);\n                    update_dom = b `${parent.var}[${last} ? \"pause\" : \"play\"]();`;\n                    mount_dom = null;\n                    break;\n                }\n            case 'value':\n                if (parent.node.get_static_attribute_value('type') === 'file') {\n                    update_dom = null;\n                    mount_dom = null;\n                }\n        }\n        if (update_dom) {\n            if (update_conditions.length > 0) {\n                const condition = update_conditions.reduce((lhs, rhs) => x `${lhs} && ${rhs}`);\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${condition}) {\n\t\t\t\t\t\t${update_dom}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.chunks.update.push(update_dom);\n            }\n        }\n        if (mount_dom) {\n            if (mount_conditions.length > 0) {\n                const condition = mount_conditions.reduce((lhs, rhs) => x `${lhs} && ${rhs}`);\n                block.chunks.mount.push(b `\n\t\t\t\t\tif (${condition}) {\n\t\t\t\t\t\t${mount_dom}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.chunks.mount.push(mount_dom);\n            }\n        }\n    }\n}\nfunction get_dom_updater(element, binding) {\n    const { node } = element;\n    if (binding.is_readonly_media_attribute()) {\n        return null;\n    }\n    if (binding.node.name === 'this') {\n        return null;\n    }\n    if (node.name === 'select') {\n        return node.get_static_attribute_value('multiple') === true ?\n            b `@select_options(${element.var}, ${binding.snippet})` :\n            b `@select_option(${element.var}, ${binding.snippet})`;\n    }\n    if (binding.node.name === 'group') {\n        const type = node.get_static_attribute_value('type');\n        const condition = type === 'checkbox'\n            ? x `~${binding.snippet}.indexOf(${element.var}.__value)`\n            : x `${element.var}.__value === ${binding.snippet}`;\n        return b `${element.var}.checked = ${condition};`;\n    }\n    if (binding.node.name === 'value') {\n        return b `@set_input_value(${element.var}, ${binding.snippet});`;\n    }\n    return b `${element.var}.${binding.node.name} = ${binding.snippet};`;\n}\nfunction get_binding_group(renderer, value, block) {\n    const { parts } = flatten_reference(value.raw_expression);\n    let keypath = parts.join('.');\n    const contexts = [];\n    const contextual_dependencies = new Set();\n    const { template_scope } = value.expression;\n    const add_contextual_dependency = (dep) => {\n        contextual_dependencies.add(dep);\n        const owner = template_scope.get_owner(dep);\n        if (owner.type === 'EachBlock') {\n            for (const dep of owner.expression.contextual_dependencies) {\n                add_contextual_dependency(dep);\n            }\n        }\n    };\n    for (const dep of value.expression.contextual_dependencies) {\n        add_contextual_dependency(dep);\n    }\n    for (const dep of contextual_dependencies) {\n        const context = block.bindings.get(dep);\n        let key;\n        let name;\n        if (context) {\n            key = context.object.name;\n            name = context.property.name;\n        }\n        else {\n            key = dep;\n            name = dep;\n        }\n        keypath = `${key}@${keypath}`;\n        contexts.push(name);\n    }\n    if (!renderer.binding_groups.has(keypath)) {\n        const index = renderer.binding_groups.size;\n        contexts.forEach(context => {\n            renderer.add_to_context(context, true);\n        });\n        renderer.binding_groups.set(keypath, {\n            binding_group: (to_reference = false) => {\n                let binding_group = '$$binding_groups';\n                let _secondary_indexes = contexts;\n                if (to_reference) {\n                    binding_group = block.renderer.reference(binding_group);\n                    _secondary_indexes = _secondary_indexes.map(name => block.renderer.reference(name));\n                }\n                if (_secondary_indexes.length > 0) {\n                    let obj = x `${binding_group}[${index}]`;\n                    _secondary_indexes.forEach(secondary_index => {\n                        obj = x `${obj}[${secondary_index}]`;\n                    });\n                    return obj;\n                }\n                else {\n                    return x `${binding_group}[${index}]`;\n                }\n            },\n            is_context: contexts.length > 0,\n            contexts,\n            index,\n            keypath\n        });\n    }\n    return renderer.binding_groups.get(keypath);\n}\nfunction get_event_handler(binding, renderer, block, name, lhs) {\n    const contextual_dependencies = new Set(binding.node.expression.contextual_dependencies);\n    const context = block.bindings.get(name);\n    let set_store;\n    if (context) {\n        const { object, property, store, snippet } = context;\n        lhs = replace_object(lhs, snippet);\n        contextual_dependencies.add(object.name);\n        contextual_dependencies.add(property.name);\n        contextual_dependencies.delete(name);\n        if (store) {\n            set_store = b `${store}.set(${`$${store}`});`;\n        }\n    }\n    else {\n        const object = get_object(lhs);\n        if (object.name[0] === '$') {\n            const store = object.name.slice(1);\n            set_store = b `${store}.set(${object.name});`;\n        }\n    }\n    const value = get_value_from_dom(renderer, binding.parent, binding, block, contextual_dependencies);\n    const mutation = b `\n\t\t${lhs} = ${value};\n\t\t${set_store}\n\t`;\n    return {\n        uses_context: binding.node.is_contextual || binding.node.expression.uses_context,\n        mutation,\n        contextual_dependencies,\n        lhs\n    };\n}\nfunction get_value_from_dom(renderer, element, binding, block, contextual_dependencies) {\n    const { node } = element;\n    const { name } = binding.node;\n    if (name === 'this') {\n        return x `$$value`;\n    }\n    // <select bind:value='selected>\n    if (node.name === 'select') {\n        return node.get_static_attribute_value('multiple') === true ?\n            x `@select_multiple_value(this)` :\n            x `@select_value(this)`;\n    }\n    const type = node.get_static_attribute_value('type');\n    // <input type='checkbox' bind:group='foo'>\n    if (name === 'group') {\n        if (type === 'checkbox') {\n            const { binding_group, contexts } = get_binding_group(renderer, binding.node, block);\n            add_to_set(contextual_dependencies, contexts);\n            return x `@get_binding_group_value(${binding_group()}, this.__value, this.checked)`;\n        }\n        return x `this.__value`;\n    }\n    // <input type='range|number' bind:value>\n    if (type === 'range' || type === 'number') {\n        return x `@to_number(this.${name})`;\n    }\n    if ((name === 'buffered' || name === 'seekable' || name === 'played')) {\n        return x `@time_ranges_to_array(this.${name})`;\n    }\n    // everything else\n    return x `this.${name}`;\n}\n\nfunction compare_node(a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    if (a.type !== b.type)\n        return false;\n    switch (a.type) {\n        case 'Identifier':\n            return a.name === b.name;\n        case 'MemberExpression':\n            return (compare_node(a.object, b.object) &&\n                compare_node(a.property, b.property) &&\n                a.computed === b.computed);\n        case 'Literal':\n            return a.value === b.value;\n    }\n}\n\nfunction bind_this(component, block, binding, variable) {\n    const fn = component.get_unique_name(`${variable.name}_binding`);\n    block.renderer.add_to_context(fn.name);\n    const callee = block.renderer.reference(fn.name);\n    const { contextual_dependencies, mutation } = binding.handler;\n    const dependencies = binding.get_update_dependencies();\n    const body = b `\n\t\t${mutation}\n\t\t${Array.from(dependencies)\n        .filter(dep => dep[0] !== '$')\n        .filter(dep => !contextual_dependencies.has(dep))\n        .map(dep => b `${block.renderer.invalidate(dep)};`)}\n\t`;\n    if (contextual_dependencies.size) {\n        const params = Array.from(contextual_dependencies).map(name => ({\n            type: 'Identifier',\n            name\n        }));\n        component.partly_hoisted.push(b `\n\t\t\tfunction ${fn}($$value, ${params}) {\n\t\t\t\t@binding_callbacks[$$value ? 'unshift' : 'push'](() => {\n\t\t\t\t\t${body}\n\t\t\t\t});\n\t\t\t}\n\t\t`);\n        const alias_map = new Map();\n        const args = [];\n        for (let id of params) {\n            const value = block.renderer.reference(id.name);\n            let found = false;\n            if (block.variables.has(id.name)) {\n                let alias = id.name;\n                for (let i = 1; block.variables.has(alias) && !compare_node(block.variables.get(alias).init, value); alias = `${id.name}_${i++}`)\n                    ;\n                alias_map.set(alias, id.name);\n                id = { type: 'Identifier', name: alias };\n                found = block.variables.has(alias);\n            }\n            args.push(id);\n            if (!found) {\n                block.add_variable(id, value);\n            }\n        }\n        const assign = block.get_unique_name(`assign_${variable.name}`);\n        const unassign = block.get_unique_name(`unassign_${variable.name}`);\n        block.chunks.init.push(b `\n\t\t\tconst ${assign} = () => ${callee}(${variable}, ${args});\n\t\t\tconst ${unassign} = () => ${callee}(null, ${args});\n\t\t`);\n        const condition = Array.from(args)\n            .map(name => x `${name} !== ${block.renderer.reference(alias_map.get(name.name) || name.name)}`)\n            .reduce((lhs, rhs) => x `${lhs} || ${rhs}`);\n        // we push unassign and unshift assign so that references are\n        // nulled out before they're created, to avoid glitches\n        // with shifting indices\n        block.chunks.update.push(b `\n\t\t\tif (${condition}) {\n\t\t\t\t${unassign}();\n\t\t\t\t${args.map(a => b `${a} = ${block.renderer.reference(alias_map.get(a.name) || a.name)}`)};\n\t\t\t\t${assign}();\n\t\t\t}`);\n        block.chunks.destroy.push(b `${unassign}();`);\n        return b `${assign}();`;\n    }\n    component.partly_hoisted.push(b `\n\t\tfunction ${fn}($$value) {\n\t\t\t@binding_callbacks[$$value ? 'unshift' : 'push'](() => {\n\t\t\t\t${body}\n\t\t\t});\n\t\t}\n\t`);\n    block.chunks.destroy.push(b `${callee}(null);`);\n    return b `${callee}(${variable});`;\n}\n\nclass Tag$1 extends Wrapper {\n    constructor(renderer, block, parent, node) {\n        super(renderer, block, parent, node);\n        this.cannot_use_innerhtml();\n        if (!this.is_dependencies_static()) {\n            this.not_static_content();\n        }\n        block.add_dependencies(node.expression.dependencies);\n    }\n    is_dependencies_static() {\n        return this.node.expression.contextual_dependencies.size === 0 && this.node.expression.dynamic_dependencies().length === 0;\n    }\n    rename_this_method(block, update) {\n        const dependencies = this.node.expression.dynamic_dependencies();\n        let snippet = this.node.expression.manipulate(block);\n        const value = this.node.should_cache && block.get_unique_name(`${this.var.name}_value`);\n        const content = this.node.should_cache ? value : snippet;\n        snippet = x `${snippet} + \"\"`;\n        if (this.node.should_cache)\n            block.add_variable(value, snippet); // TODO may need to coerce snippet to string\n        if (dependencies.length > 0) {\n            let condition = block.renderer.dirty(dependencies);\n            if (block.has_outros) {\n                condition = x `!#current || ${condition}`;\n            }\n            const update_cached_value = x `${value} !== (${value} = ${snippet})`;\n            if (this.node.should_cache) {\n                condition = x `${condition} && ${update_cached_value}`;\n            }\n            block.chunks.update.push(b `if (${condition}) ${update(content)}`);\n        }\n        return { init: content };\n    }\n}\n\nclass MustacheTagWrapper extends Tag$1 {\n    constructor(renderer, block, parent, node) {\n        super(renderer, block, parent, node);\n        this.var = { type: 'Identifier', name: 't' };\n    }\n    render(block, parent_node, parent_nodes) {\n        const { init } = this.rename_this_method(block, value => x `@set_data(${this.var}, ${value})`);\n        block.add_element(this.var, x `@text(${init})`, parent_nodes && x `@claim_text(${parent_nodes}, ${init})`, parent_node);\n    }\n}\n\nclass RawMustacheTagWrapper extends Tag$1 {\n    constructor(renderer, block, parent, node) {\n        super(renderer, block, parent, node);\n        this.var = { type: 'Identifier', name: 'raw' };\n        this.cannot_use_innerhtml();\n        this.not_static_content();\n    }\n    render(block, parent_node, _parent_nodes) {\n        const in_head = is_head(parent_node);\n        const can_use_innerhtml = !in_head && parent_node && !this.prev && !this.next;\n        if (can_use_innerhtml) {\n            const insert = content => b `${parent_node}.innerHTML = ${content};`[0];\n            const { init } = this.rename_this_method(block, content => insert(content));\n            block.chunks.mount.push(insert(init));\n        }\n        else {\n            const needs_anchor = in_head || (this.next ? !this.next.is_dom_node() : (!this.parent || !this.parent.is_dom_node()));\n            const html_tag = block.get_unique_name('html_tag');\n            const html_anchor = needs_anchor && block.get_unique_name('html_anchor');\n            block.add_variable(html_tag);\n            const { init } = this.rename_this_method(block, content => x `${html_tag}.p(${content})`);\n            const update_anchor = needs_anchor ? html_anchor : this.next ? this.next.var : 'null';\n            block.chunks.create.push(b `${html_tag} = new @HtmlTag();`);\n            if (this.renderer.options.hydratable) {\n                block.chunks.claim.push(b `${html_tag} = @claim_html_tag(${_parent_nodes});`);\n            }\n            block.chunks.hydrate.push(b `${html_tag}.a = ${update_anchor};`);\n            block.chunks.mount.push(b `${html_tag}.m(${init}, ${parent_node || '#target'}, ${parent_node ? null : '#anchor'});`);\n            if (needs_anchor) {\n                block.add_element(html_anchor, x `@empty()`, x `@empty()`, parent_node);\n            }\n            if (!parent_node || in_head) {\n                block.chunks.destroy.push(b `if (detaching) ${html_tag}.d();`);\n            }\n        }\n    }\n}\n\nconst events = [\n    {\n        event_names: ['input'],\n        filter: (node, _name) => node.name === 'textarea' ||\n            node.name === 'input' && !/radio|checkbox|range|file/.test(node.get_static_attribute_value('type'))\n    },\n    {\n        event_names: ['input'],\n        filter: (node, name) => (name === 'textContent' || name === 'innerHTML') &&\n            node.attributes.some(attribute => attribute.name === 'contenteditable')\n    },\n    {\n        event_names: ['change'],\n        filter: (node, _name) => node.name === 'select' ||\n            node.name === 'input' && /radio|checkbox|file/.test(node.get_static_attribute_value('type'))\n    },\n    {\n        event_names: ['change', 'input'],\n        filter: (node, _name) => node.name === 'input' && node.get_static_attribute_value('type') === 'range'\n    },\n    {\n        event_names: ['elementresize'],\n        filter: (_node, name) => dimensions.test(name)\n    },\n    // media events\n    {\n        event_names: ['timeupdate'],\n        filter: (node, name) => node.is_media_node() &&\n            (name === 'currentTime' || name === 'played' || name === 'ended')\n    },\n    {\n        event_names: ['durationchange'],\n        filter: (node, name) => node.is_media_node() &&\n            name === 'duration'\n    },\n    {\n        event_names: ['play', 'pause'],\n        filter: (node, name) => node.is_media_node() &&\n            name === 'paused'\n    },\n    {\n        event_names: ['progress'],\n        filter: (node, name) => node.is_media_node() &&\n            name === 'buffered'\n    },\n    {\n        event_names: ['loadedmetadata'],\n        filter: (node, name) => node.is_media_node() &&\n            (name === 'buffered' || name === 'seekable')\n    },\n    {\n        event_names: ['volumechange'],\n        filter: (node, name) => node.is_media_node() &&\n            (name === 'volume' || name === 'muted')\n    },\n    {\n        event_names: ['ratechange'],\n        filter: (node, name) => node.is_media_node() &&\n            name === 'playbackRate'\n    },\n    {\n        event_names: ['seeking', 'seeked'],\n        filter: (node, name) => node.is_media_node() &&\n            (name === 'seeking')\n    },\n    {\n        event_names: ['ended'],\n        filter: (node, name) => node.is_media_node() &&\n            name === 'ended'\n    },\n    {\n        event_names: ['resize'],\n        filter: (node, name) => node.is_media_node() &&\n            (name === 'videoHeight' || name === 'videoWidth')\n    },\n    // details event\n    {\n        event_names: ['toggle'],\n        filter: (node, _name) => node.name === 'details'\n    }\n];\nclass ElementWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.var = {\n            type: 'Identifier',\n            name: node.name.replace(/[^a-zA-Z0-9_$]/g, '_')\n        };\n        this.void = is_void(node.name);\n        this.class_dependencies = [];\n        if (this.node.children.length) {\n            this.node.lets.forEach(l => {\n                extract_names(l.value || l.name).forEach(name => {\n                    renderer.add_to_context(name, true);\n                });\n            });\n        }\n        this.attributes = this.node.attributes.map(attribute => {\n            if (attribute.name === 'style') {\n                return new StyleAttributeWrapper(this, block, attribute);\n            }\n            if (attribute.type === 'Spread') {\n                return new SpreadAttributeWrapper(this, block, attribute);\n            }\n            return new AttributeWrapper(this, block, attribute);\n        });\n        // ordinarily, there'll only be one... but we need to handle\n        // the rare case where an element can have multiple bindings,\n        // e.g. <audio bind:paused bind:currentTime>\n        this.bindings = this.node.bindings.map(binding => new BindingWrapper(block, binding, this));\n        this.event_handlers = this.node.handlers.map(event_handler => new EventHandlerWrapper(event_handler, this));\n        if (node.intro || node.outro) {\n            if (node.intro)\n                block.add_intro(node.intro.is_local);\n            if (node.outro)\n                block.add_outro(node.outro.is_local);\n        }\n        if (node.animation) {\n            block.add_animation();\n        }\n        // add directive and handler dependencies\n        [node.animation, node.outro, ...node.actions, ...node.classes, ...node.styles].forEach(directive => {\n            if (directive && directive.expression) {\n                block.add_dependencies(directive.expression.dependencies);\n            }\n        });\n        node.handlers.forEach(handler => {\n            if (handler.expression) {\n                block.add_dependencies(handler.expression.dependencies);\n            }\n        });\n        if (this.parent) {\n            if (node.actions.length > 0 ||\n                node.animation ||\n                node.bindings.length > 0 ||\n                node.classes.length > 0 ||\n                node.intro || node.outro ||\n                node.handlers.length > 0 ||\n                this.node.name === 'option' ||\n                renderer.options.dev) {\n                this.parent.cannot_use_innerhtml(); // need to use add_location\n                this.parent.not_static_content();\n            }\n        }\n        this.fragment = new FragmentWrapper(renderer, block, node.children, this, strip_whitespace, next_sibling);\n    }\n    render(block, parent_node, parent_nodes) {\n        const { renderer } = this;\n        if (this.node.name === 'noscript')\n            return;\n        const node = this.var;\n        const nodes = parent_nodes && block.get_unique_name(`${this.var.name}_nodes`); // if we're in unclaimable territory, i.e. <head>, parent_nodes is null\n        const children = x `@children(${this.node.name === 'template' ? x `${node}.content` : node})`;\n        block.add_variable(node);\n        const render_statement = this.get_render_statement(block);\n        block.chunks.create.push(b `${node} = ${render_statement};`);\n        if (renderer.options.hydratable) {\n            if (parent_nodes) {\n                block.chunks.claim.push(b `\n\t\t\t\t\t${node} = ${this.get_claim_statement(parent_nodes)};\n\t\t\t\t`);\n                if (!this.void && this.node.children.length > 0) {\n                    block.chunks.claim.push(b `\n\t\t\t\t\t\tvar ${nodes} = ${children};\n\t\t\t\t\t`);\n                }\n            }\n            else {\n                block.chunks.claim.push(b `${node} = ${render_statement};`);\n            }\n        }\n        if (parent_node) {\n            const append = b `@append(${parent_node}, ${node});`;\n            append[0].expression.callee.loc = {\n                start: this.renderer.locate(this.node.start),\n                end: this.renderer.locate(this.node.end)\n            };\n            block.chunks.mount.push(append);\n            if (is_head(parent_node)) {\n                block.chunks.destroy.push(b `@detach(${node});`);\n            }\n        }\n        else {\n            const insert = b `@insert(#target, ${node}, #anchor);`;\n            insert[0].expression.callee.loc = {\n                start: this.renderer.locate(this.node.start),\n                end: this.renderer.locate(this.node.end)\n            };\n            block.chunks.mount.push(insert);\n            // TODO we eventually need to consider what happens to elements\n            // that belong to the same outgroup as an outroing element...\n            block.chunks.destroy.push(b `if (detaching) @detach(${node});`);\n        }\n        // insert static children with textContent or innerHTML\n        const can_use_textcontent = this.can_use_textcontent();\n        if (!this.node.namespace && (this.can_use_innerhtml || can_use_textcontent) && this.fragment.nodes.length > 0) {\n            if (this.fragment.nodes.length === 1 && this.fragment.nodes[0].node.type === 'Text') {\n                block.chunks.create.push(b `${node}.textContent = ${string_literal(this.fragment.nodes[0].data)};`);\n            }\n            else {\n                const state = {\n                    quasi: {\n                        type: 'TemplateElement',\n                        value: { raw: '' }\n                    }\n                };\n                const literal = {\n                    type: 'TemplateLiteral',\n                    expressions: [],\n                    quasis: []\n                };\n                const can_use_raw_text = !this.can_use_innerhtml && can_use_textcontent;\n                to_html(this.fragment.nodes, block, literal, state, can_use_raw_text);\n                literal.quasis.push(state.quasi);\n                block.chunks.create.push(b `${node}.${this.can_use_innerhtml ? 'innerHTML' : 'textContent'} = ${literal};`);\n            }\n        }\n        else {\n            this.fragment.nodes.forEach((child) => {\n                child.render(block, this.node.name === 'template' ? x `${node}.content` : node, nodes);\n            });\n        }\n        const event_handler_or_binding_uses_context = (this.bindings.some(binding => binding.handler.uses_context) ||\n            this.node.handlers.some(handler => handler.uses_context) ||\n            this.node.actions.some(action => action.uses_context));\n        if (event_handler_or_binding_uses_context) {\n            block.maintain_context = true;\n        }\n        this.add_attributes(block);\n        this.add_directives_in_order(block);\n        this.add_transitions(block);\n        this.add_animation(block);\n        this.add_classes(block);\n        this.add_styles(block);\n        this.add_manual_style_scoping(block);\n        if (nodes && this.renderer.options.hydratable && !this.void) {\n            block.chunks.claim.push(b `${this.node.children.length > 0 ? nodes : children}.forEach(@detach);`);\n        }\n        if (renderer.options.dev) {\n            const loc = renderer.locate(this.node.start);\n            block.chunks.hydrate.push(b `@add_location(${this.var}, ${renderer.file_var}, ${loc.line - 1}, ${loc.column}, ${this.node.start});`);\n        }\n    }\n    can_use_textcontent() {\n        return this.is_static_content && this.fragment.nodes.every(node => node.node.type === 'Text' || node.node.type === 'MustacheTag');\n    }\n    get_render_statement(block) {\n        const { name, namespace } = this.node;\n        if (namespace === namespaces.svg) {\n            return x `@svg_element(\"${name}\")`;\n        }\n        if (namespace) {\n            return x `@_document.createElementNS(\"${namespace}\", \"${name}\")`;\n        }\n        const is = this.attributes.find(attr => attr.node.name === 'is');\n        if (is) {\n            return x `@element_is(\"${name}\", ${is.render_chunks(block).reduce((lhs, rhs) => x `${lhs} + ${rhs}`)})`;\n        }\n        return x `@element(\"${name}\")`;\n    }\n    get_claim_statement(nodes) {\n        const attributes = this.attributes\n            .filter((attr) => !(attr instanceof SpreadAttributeWrapper) && !attr.property_name)\n            .map((attr) => p `${attr.name}: true`);\n        const name = this.node.namespace\n            ? this.node.name\n            : this.node.name.toUpperCase();\n        if (this.node.namespace === namespaces.svg) {\n            return x `@claim_svg_element(${nodes}, \"${name}\", { ${attributes} })`;\n        }\n        else {\n            return x `@claim_element(${nodes}, \"${name}\", { ${attributes} })`;\n        }\n    }\n    add_directives_in_order(block) {\n        const binding_groups = events\n            .map(event => ({\n            events: event.event_names,\n            bindings: this.bindings\n                .filter(binding => binding.node.name !== 'this')\n                .filter(binding => event.filter(this.node, binding.node.name))\n        }))\n            .filter(group => group.bindings.length);\n        const this_binding = this.bindings.find(b => b.node.name === 'this');\n        function getOrder(item) {\n            if (item instanceof EventHandlerWrapper) {\n                return item.node.start;\n            }\n            else if (item instanceof BindingWrapper) {\n                return item.node.start;\n            }\n            else if (item instanceof Action) {\n                return item.start;\n            }\n            else {\n                return item.bindings[0].node.start;\n            }\n        }\n        [\n            ...binding_groups,\n            ...this.event_handlers,\n            this_binding,\n            ...this.node.actions\n        ]\n            .filter(Boolean)\n            .sort((a, b) => getOrder(a) - getOrder(b))\n            .forEach(item => {\n            if (item instanceof EventHandlerWrapper) {\n                add_event_handler(block, this.var, item);\n            }\n            else if (item instanceof BindingWrapper) {\n                this.add_this_binding(block, item);\n            }\n            else if (item instanceof Action) {\n                add_action(block, this.var, item);\n            }\n            else {\n                this.add_bindings(block, item);\n            }\n        });\n    }\n    add_bindings(block, binding_group) {\n        const { renderer } = this;\n        if (binding_group.bindings.length === 0)\n            return;\n        renderer.component.has_reactive_assignments = true;\n        const lock = binding_group.bindings.some(binding => binding.needs_lock) ?\n            block.get_unique_name(`${this.var.name}_updating`) :\n            null;\n        if (lock)\n            block.add_variable(lock, x `false`);\n        const handler = renderer.component.get_unique_name(`${this.var.name}_${binding_group.events.join('_')}_handler`);\n        renderer.add_to_context(handler.name);\n        // TODO figure out how to handle locks\n        const needs_lock = binding_group.bindings.some(binding => binding.needs_lock);\n        const dependencies = new Set();\n        const contextual_dependencies = new Set();\n        binding_group.bindings.forEach(binding => {\n            // TODO this is a mess\n            add_to_set(dependencies, binding.get_update_dependencies());\n            add_to_set(contextual_dependencies, binding.handler.contextual_dependencies);\n            binding.render(block, lock);\n        });\n        // media bindings — awkward special case. The native timeupdate events\n        // fire too infrequently, so we need to take matters into our\n        // own hands\n        let animation_frame;\n        if (binding_group.events[0] === 'timeupdate') {\n            animation_frame = block.get_unique_name(`${this.var.name}_animationframe`);\n            block.add_variable(animation_frame);\n        }\n        const has_local_function = contextual_dependencies.size > 0 || needs_lock || animation_frame;\n        let callee = renderer.reference(handler);\n        // TODO dry this out — similar code for event handlers and component bindings\n        if (has_local_function) {\n            const args = Array.from(contextual_dependencies).map(name => renderer.reference(name));\n            // need to create a block-local function that calls an instance-level function\n            if (animation_frame) {\n                block.chunks.init.push(b `\n\t\t\t\t\tfunction ${handler}() {\n\t\t\t\t\t\t@_cancelAnimationFrame(${animation_frame});\n\t\t\t\t\t\tif (!${this.var}.paused) {\n\t\t\t\t\t\t\t${animation_frame} = @raf(${handler});\n\t\t\t\t\t\t\t${needs_lock && b `${lock} = true;`}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t${callee}.call(${this.var}, ${args});\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.chunks.init.push(b `\n\t\t\t\t\tfunction ${handler}() {\n\t\t\t\t\t\t${needs_lock && b `${lock} = true;`}\n\t\t\t\t\t\t${callee}.call(${this.var}, ${args});\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            callee = handler;\n        }\n        const params = Array.from(contextual_dependencies).map(name => ({\n            type: 'Identifier',\n            name\n        }));\n        this.renderer.component.partly_hoisted.push(b `\n\t\t\tfunction ${handler}(${params}) {\n\t\t\t\t${binding_group.bindings.map(b => b.handler.mutation)}\n\t\t\t\t${Array.from(dependencies)\n            .filter(dep => dep[0] !== '$')\n            .filter(dep => !contextual_dependencies.has(dep))\n            .map(dep => b `${this.renderer.invalidate(dep)};`)}\n\t\t\t}\n\t\t`);\n        binding_group.events.forEach(name => {\n            if (name === 'elementresize') {\n                // special case\n                const resize_listener = block.get_unique_name(`${this.var.name}_resize_listener`);\n                block.add_variable(resize_listener);\n                block.chunks.mount.push(b `${resize_listener} = @add_resize_listener(${this.var}, ${callee}.bind(${this.var}));`);\n                block.chunks.destroy.push(b `${resize_listener}();`);\n            }\n            else {\n                block.event_listeners.push(x `@listen(${this.var}, \"${name}\", ${callee})`);\n            }\n        });\n        const some_initial_state_is_undefined = binding_group.bindings\n            .map(binding => x `${binding.snippet} === void 0`)\n            .reduce((lhs, rhs) => x `${lhs} || ${rhs}`);\n        const should_initialise = (this.node.name === 'select' ||\n            binding_group.bindings.find(binding => {\n                return (binding.node.name === 'indeterminate' ||\n                    binding.node.name === 'textContent' ||\n                    binding.node.name === 'innerHTML' ||\n                    binding.is_readonly_media_attribute());\n            }));\n        if (should_initialise) {\n            const callback = has_local_function ? handler : x `() => ${callee}.call(${this.var})`;\n            block.chunks.hydrate.push(b `if (${some_initial_state_is_undefined}) @add_render_callback(${callback});`);\n        }\n        if (binding_group.events[0] === 'elementresize') {\n            block.chunks.hydrate.push(b `@add_render_callback(() => ${callee}.call(${this.var}));`);\n        }\n        if (lock) {\n            block.chunks.update.push(b `${lock} = false;`);\n        }\n    }\n    add_this_binding(block, this_binding) {\n        const { renderer } = this;\n        renderer.component.has_reactive_assignments = true;\n        const binding_callback = bind_this(renderer.component, block, this_binding, this.var);\n        block.chunks.mount.push(binding_callback);\n    }\n    add_attributes(block) {\n        // Get all the class dependencies first\n        this.attributes.forEach((attribute) => {\n            if (attribute.node.name === 'class') {\n                const dependencies = attribute.node.get_dependencies();\n                push_array$1(this.class_dependencies, dependencies);\n            }\n        });\n        if (this.node.attributes.some(attr => attr.is_spread)) {\n            this.add_spread_attributes(block);\n            return;\n        }\n        this.attributes.forEach((attribute) => {\n            attribute.render(block);\n        });\n    }\n    add_spread_attributes(block) {\n        const levels = block.get_unique_name(`${this.var.name}_levels`);\n        const data = block.get_unique_name(`${this.var.name}_data`);\n        const initial_props = [];\n        const updates = [];\n        this.attributes\n            .forEach(attr => {\n            const dependencies = attr.node.get_dependencies();\n            const condition = dependencies.length > 0\n                ? block.renderer.dirty(dependencies)\n                : null;\n            if (attr instanceof SpreadAttributeWrapper) {\n                const snippet = attr.node.expression.manipulate(block);\n                initial_props.push(snippet);\n                updates.push(condition ? x `${condition} && ${snippet}` : snippet);\n            }\n            else {\n                const name = attr.property_name || attr.name;\n                initial_props.push(x `{ ${name}: ${attr.get_init(block, attr.get_value(block))} }`);\n                const snippet = x `{ ${name}: ${attr.should_cache ? attr.last : attr.get_value(block)} }`;\n                updates.push(condition ? x `${attr.get_dom_update_conditions(block, condition)} && ${snippet}` : snippet);\n            }\n        });\n        block.chunks.init.push(b `\n\t\t\tlet ${levels} = [${initial_props}];\n\n\t\t\tlet ${data} = {};\n\t\t\tfor (let #i = 0; #i < ${levels}.length; #i += 1) {\n\t\t\t\t${data} = @assign(${data}, ${levels}[#i]);\n\t\t\t}\n\t\t`);\n        const fn = this.node.namespace === namespaces.svg ? x `@set_svg_attributes` : x `@set_attributes`;\n        block.chunks.hydrate.push(b `${fn}(${this.var}, ${data});`);\n        block.chunks.update.push(b `\n\t\t\t${fn}(${this.var}, ${data} = @get_spread_update(${levels}, [\n\t\t\t\t${updates}\n\t\t\t]));\n\t\t`);\n        // handle edge cases for elements\n        if (this.node.name === 'select') {\n            const dependencies = new Set();\n            for (const attr of this.attributes) {\n                for (const dep of attr.node.dependencies) {\n                    dependencies.add(dep);\n                }\n            }\n            block.chunks.mount.push(b `\n\t\t\t\t(${data}.multiple ? @select_options : @select_option)(${this.var}, ${data}.value);\n\t\t\t`);\n            block.chunks.update.push(b `\n\t\t\t\tif (${block.renderer.dirty(Array.from(dependencies))} && 'value' in ${data}) (${data}.multiple ? @select_options : @select_option)(${this.var}, ${data}.value);;\n\t\t\t`);\n        }\n        else if (this.node.name === 'input' && this.attributes.find(attr => attr.node.name === 'value')) {\n            const type = this.node.get_static_attribute_value('type');\n            if (type === null || type === '' || type === 'text' || type === 'email' || type === 'password') {\n                block.chunks.mount.push(b `\n\t\t\t\t\t${this.var}.value = ${data}.value;\n\t\t\t\t`);\n                block.chunks.update.push(b `\n\t\t\t\t\tif ('value' in ${data}) {\n\t\t\t\t\t\t${this.var}.value = ${data}.value;\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n        }\n        if (['button', 'input', 'keygen', 'select', 'textarea'].includes(this.node.name)) {\n            block.chunks.mount.push(b `\n\t\t\t\tif (${this.var}.autofocus) ${this.var}.focus();\n\t\t\t`);\n        }\n    }\n    add_transitions(block) {\n        const { intro, outro } = this.node;\n        if (!intro && !outro)\n            return;\n        if (intro === outro) {\n            // bidirectional transition\n            const name = block.get_unique_name(`${this.var.name}_transition`);\n            const snippet = intro.expression\n                ? intro.expression.manipulate(block)\n                : x `{}`;\n            block.add_variable(name);\n            const fn = this.renderer.reference(intro.name);\n            const intro_block = b `\n\t\t\t\t@add_render_callback(() => {\n\t\t\t\t\tif (!${name}) ${name} = @create_bidirectional_transition(${this.var}, ${fn}, ${snippet}, true);\n\t\t\t\t\t${name}.run(1);\n\t\t\t\t});\n\t\t\t`;\n            const outro_block = b `\n\t\t\t\tif (!${name}) ${name} = @create_bidirectional_transition(${this.var}, ${fn}, ${snippet}, false);\n\t\t\t\t${name}.run(0);\n\t\t\t`;\n            if (intro.is_local) {\n                block.chunks.intro.push(b `\n\t\t\t\t\tif (#local) {\n\t\t\t\t\t\t${intro_block}\n\t\t\t\t\t}\n\t\t\t\t`);\n                block.chunks.outro.push(b `\n\t\t\t\t\tif (#local) {\n\t\t\t\t\t\t${outro_block}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.chunks.intro.push(intro_block);\n                block.chunks.outro.push(outro_block);\n            }\n            block.chunks.destroy.push(b `if (detaching && ${name}) ${name}.end();`);\n        }\n        else {\n            const intro_name = intro && block.get_unique_name(`${this.var.name}_intro`);\n            const outro_name = outro && block.get_unique_name(`${this.var.name}_outro`);\n            if (intro) {\n                block.add_variable(intro_name);\n                const snippet = intro.expression\n                    ? intro.expression.manipulate(block)\n                    : x `{}`;\n                const fn = this.renderer.reference(intro.name);\n                let intro_block;\n                if (outro) {\n                    intro_block = b `\n\t\t\t\t\t\t@add_render_callback(() => {\n\t\t\t\t\t\t\tif (${outro_name}) ${outro_name}.end(1);\n\t\t\t\t\t\t\t${intro_name} = @create_in_transition(${this.var}, ${fn}, ${snippet});\n\t\t\t\t\t\t\t${intro_name}.start();\n\t\t\t\t\t\t});\n\t\t\t\t\t`;\n                    block.chunks.outro.push(b `if (${intro_name}) ${intro_name}.invalidate();`);\n                }\n                else {\n                    intro_block = b `\n\t\t\t\t\t\tif (!${intro_name}) {\n\t\t\t\t\t\t\t@add_render_callback(() => {\n\t\t\t\t\t\t\t\t${intro_name} = @create_in_transition(${this.var}, ${fn}, ${snippet});\n\t\t\t\t\t\t\t\t${intro_name}.start();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n                }\n                if (intro.is_local) {\n                    intro_block = b `\n\t\t\t\t\t\tif (#local) {\n\t\t\t\t\t\t\t${intro_block}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n                }\n                block.chunks.intro.push(intro_block);\n            }\n            if (outro) {\n                block.add_variable(outro_name);\n                const snippet = outro.expression\n                    ? outro.expression.manipulate(block)\n                    : x `{}`;\n                const fn = this.renderer.reference(outro.name);\n                if (!intro) {\n                    block.chunks.intro.push(b `\n\t\t\t\t\t\tif (${outro_name}) ${outro_name}.end(1);\n\t\t\t\t\t`);\n                }\n                // TODO hide elements that have outro'd (unless they belong to a still-outroing\n                // group) prior to their removal from the DOM\n                let outro_block = b `\n\t\t\t\t\t${outro_name} = @create_out_transition(${this.var}, ${fn}, ${snippet});\n\t\t\t\t`;\n                if (outro.is_local) {\n                    outro_block = b `\n\t\t\t\t\t\tif (#local) {\n\t\t\t\t\t\t\t${outro_block}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n                }\n                block.chunks.outro.push(outro_block);\n                block.chunks.destroy.push(b `if (detaching && ${outro_name}) ${outro_name}.end();`);\n            }\n        }\n        if ((intro && intro.expression && intro.expression.dependencies.size) || (outro && outro.expression && outro.expression.dependencies.size)) {\n            block.maintain_context = true;\n        }\n    }\n    add_animation(block) {\n        if (!this.node.animation)\n            return;\n        const { outro } = this.node;\n        const rect = block.get_unique_name('rect');\n        const stop_animation = block.get_unique_name('stop_animation');\n        block.add_variable(rect);\n        block.add_variable(stop_animation, x `@noop`);\n        block.chunks.measure.push(b `\n\t\t\t${rect} = ${this.var}.getBoundingClientRect();\n\t\t`);\n        block.chunks.fix.push(b `\n\t\t\t@fix_position(${this.var});\n\t\t\t${stop_animation}();\n\t\t\t${outro && b `@add_transform(${this.var}, ${rect});`}\n\t\t`);\n        let params;\n        if (this.node.animation.expression) {\n            params = this.node.animation.expression.manipulate(block);\n            if (this.node.animation.expression.dynamic_dependencies().length) {\n                // if `params` is dynamic, calculate params ahead of time in the `.r()` method\n                const params_var = block.get_unique_name('params');\n                block.add_variable(params_var);\n                block.chunks.measure.push(b `${params_var} = ${params};`);\n                params = params_var;\n            }\n        }\n        else {\n            params = x `{}`;\n        }\n        const name = this.renderer.reference(this.node.animation.name);\n        block.chunks.animate.push(b `\n\t\t\t${stop_animation}();\n\t\t\t${stop_animation} = @create_animation(${this.var}, ${rect}, ${name}, ${params});\n\t\t`);\n    }\n    add_classes(block) {\n        const has_spread = this.node.attributes.some(attr => attr.is_spread);\n        this.node.classes.forEach(class_directive => {\n            const { expression, name } = class_directive;\n            let snippet;\n            let dependencies;\n            if (expression) {\n                snippet = expression.manipulate(block);\n                dependencies = expression.dependencies;\n            }\n            else {\n                snippet = name;\n                dependencies = new Set([name]);\n            }\n            const updater = b `@toggle_class(${this.var}, \"${name}\", ${snippet});`;\n            block.chunks.hydrate.push(updater);\n            if (has_spread) {\n                block.chunks.update.push(updater);\n            }\n            else if ((dependencies && dependencies.size > 0) || this.class_dependencies.length) {\n                const all_dependencies = this.class_dependencies.concat(...dependencies);\n                const condition = block.renderer.dirty(all_dependencies);\n                // If all of the dependencies are non-dynamic (don't get updated) then there is no reason\n                // to add an updater for this.\n                const any_dynamic_dependencies = all_dependencies.some((dep) => {\n                    const variable = this.renderer.component.var_lookup.get(dep);\n                    return !variable || is_dynamic(variable);\n                });\n                if (any_dynamic_dependencies) {\n                    block.chunks.update.push(b `\n\t\t\t\t\t\tif (${condition}) {\n\t\t\t\t\t\t\t${updater}\n\t\t\t\t\t\t}\n\t\t\t\t\t`);\n                }\n            }\n        });\n    }\n    add_styles(block) {\n        const has_spread = this.node.attributes.some(attr => attr.is_spread);\n        this.node.styles.forEach((style_directive) => {\n            const { name, expression, should_cache } = style_directive;\n            const snippet = expression.manipulate(block);\n            let cached_snippet;\n            if (should_cache) {\n                cached_snippet = block.get_unique_name(`style_${name.replace(/-/g, '_')}`);\n                block.add_variable(cached_snippet, snippet);\n            }\n            const updater = b `@set_style(${this.var}, \"${name}\", ${should_cache ? cached_snippet : snippet}, false)`;\n            block.chunks.hydrate.push(updater);\n            const dependencies = expression.dynamic_dependencies();\n            if (has_spread) {\n                block.chunks.update.push(updater);\n            }\n            else if (dependencies.length > 0) {\n                if (should_cache) {\n                    block.chunks.update.push(b `\n\t\t\t\t\t\t\tif (${block.renderer.dirty(dependencies)} && (${cached_snippet} !== (${cached_snippet} = ${snippet}))) {\n\t\t\t\t\t\t\t\t${updater}\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t`);\n                }\n                else {\n                    block.chunks.update.push(b `\n\t\t\t\t\t\tif (${block.renderer.dirty(dependencies)}) {\n\t\t\t\t\t\t\t${updater}\n\t\t\t\t\t\t}\n\t\t\t\t\t`);\n                }\n            }\n        });\n    }\n    add_manual_style_scoping(block) {\n        if (this.node.needs_manual_style_scoping) {\n            const updater = b `@toggle_class(${this.var}, \"${this.node.component.stylesheet.id}\", true);`;\n            block.chunks.hydrate.push(updater);\n            block.chunks.update.push(updater);\n        }\n    }\n}\nfunction to_html(wrappers, block, literal, state, can_use_raw_text) {\n    wrappers.forEach(wrapper => {\n        if (wrapper instanceof TextWrapper) {\n            if (wrapper.use_space())\n                state.quasi.value.raw += ' ';\n            const parent = wrapper.node.parent;\n            const raw = parent && (parent.name === 'script' ||\n                parent.name === 'style' ||\n                can_use_raw_text);\n            state.quasi.value.raw += (raw ? wrapper.data : escape_html(wrapper.data))\n                .replace(/\\\\/g, '\\\\\\\\')\n                .replace(/`/g, '\\\\`')\n                .replace(/\\$/g, '\\\\$');\n        }\n        else if (wrapper instanceof MustacheTagWrapper || wrapper instanceof RawMustacheTagWrapper) {\n            literal.quasis.push(state.quasi);\n            literal.expressions.push(wrapper.node.expression.manipulate(block));\n            state.quasi = {\n                type: 'TemplateElement',\n                value: { raw: '' }\n            };\n        }\n        else if (wrapper.node.name === 'noscript') ;\n        else {\n            // element\n            state.quasi.value.raw += `<${wrapper.node.name}`;\n            wrapper.attributes.forEach((attr) => {\n                state.quasi.value.raw += ` ${fix_attribute_casing(attr.node.name)}=\"`;\n                attr.node.chunks.forEach(chunk => {\n                    if (chunk.type === 'Text') {\n                        state.quasi.value.raw += escape_html(chunk.data);\n                    }\n                    else {\n                        literal.quasis.push(state.quasi);\n                        literal.expressions.push(chunk.manipulate(block));\n                        state.quasi = {\n                            type: 'TemplateElement',\n                            value: { raw: '' }\n                        };\n                    }\n                });\n                state.quasi.value.raw += '\"';\n            });\n            if (!wrapper.void) {\n                state.quasi.value.raw += '>';\n                to_html(wrapper.fragment.nodes, block, literal, state);\n                state.quasi.value.raw += `</${wrapper.node.name}>`;\n            }\n            else {\n                state.quasi.value.raw += '/>';\n            }\n        }\n    });\n}\n\nclass HeadWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.can_use_innerhtml = false;\n        this.fragment = new FragmentWrapper(renderer, block, node.children, this, strip_whitespace, next_sibling);\n    }\n    render(block, _parent_node, _parent_nodes) {\n        let nodes;\n        if (this.renderer.options.hydratable && this.fragment.nodes.length) {\n            nodes = block.get_unique_name('head_nodes');\n            block.chunks.claim.push(b `const ${nodes} = @query_selector_all('[data-svelte=\"${this.node.id}\"]', @_document.head);`);\n        }\n        this.fragment.render(block, x `@_document.head`, nodes);\n        if (nodes && this.renderer.options.hydratable) {\n            block.chunks.claim.push(b `${nodes}.forEach(@detach);`);\n        }\n    }\n}\n\nfunction is_else_if(node) {\n    return (node && node.children.length === 1 && node.children[0].type === 'IfBlock');\n}\nclass IfBlockBranch extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.var = null;\n        const { expression } = node;\n        const is_else = !expression;\n        if (expression) {\n            this.dependencies = expression.dynamic_dependencies();\n            // TODO is this the right rule? or should any non-reference count?\n            // const should_cache = !is_reference(expression.node, null) && dependencies.length > 0;\n            let should_cache = false;\n            walk(expression.node, {\n                enter(node) {\n                    if (node.type === 'CallExpression' || node.type === 'NewExpression') {\n                        should_cache = true;\n                    }\n                }\n            });\n            if (should_cache) {\n                this.condition = block.get_unique_name('show_if');\n                this.snippet = expression.manipulate(block);\n            }\n            else {\n                this.condition = expression.manipulate(block);\n            }\n        }\n        this.block = block.child({\n            comment: create_debugging_comment(node, parent.renderer.component),\n            name: parent.renderer.component.get_unique_name(is_else ? 'create_else_block' : 'create_if_block'),\n            type: node.expression ? 'if' : 'else'\n        });\n        this.fragment = new FragmentWrapper(renderer, this.block, node.children, parent, strip_whitespace, next_sibling);\n        this.is_dynamic = this.block.dependencies.size > 0;\n    }\n}\nclass IfBlockWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.needs_update = false;\n        this.var = { type: 'Identifier', name: 'if_block' };\n        this.cannot_use_innerhtml();\n        this.not_static_content();\n        this.branches = [];\n        const blocks = [];\n        let is_dynamic = false;\n        let has_intros = false;\n        let has_outros = false;\n        const create_branches = (node) => {\n            const branch = new IfBlockBranch(renderer, block, this, node, strip_whitespace, next_sibling);\n            this.branches.push(branch);\n            blocks.push(branch.block);\n            block.add_dependencies(node.expression.dependencies);\n            if (branch.block.dependencies.size > 0) {\n                // the condition, or its contents, is dynamic\n                is_dynamic = true;\n                block.add_dependencies(branch.block.dependencies);\n            }\n            if (branch.dependencies && branch.dependencies.length > 0) {\n                // the condition itself is dynamic\n                this.needs_update = true;\n            }\n            if (branch.block.has_intros)\n                has_intros = true;\n            if (branch.block.has_outros)\n                has_outros = true;\n            if (is_else_if(node.else)) {\n                create_branches(node.else.children[0]);\n            }\n            else if (node.else) {\n                const branch = new IfBlockBranch(renderer, block, this, node.else, strip_whitespace, next_sibling);\n                this.branches.push(branch);\n                blocks.push(branch.block);\n                if (branch.block.dependencies.size > 0) {\n                    is_dynamic = true;\n                    block.add_dependencies(branch.block.dependencies);\n                }\n                if (branch.block.has_intros)\n                    has_intros = true;\n                if (branch.block.has_outros)\n                    has_outros = true;\n            }\n        };\n        create_branches(this.node);\n        blocks.forEach(block => {\n            block.has_update_method = is_dynamic;\n            block.has_intro_method = has_intros;\n            block.has_outro_method = has_outros;\n        });\n        push_array$1(renderer.blocks, blocks);\n    }\n    render(block, parent_node, parent_nodes) {\n        const name = this.var;\n        const needs_anchor = this.next ? !this.next.is_dom_node() : !parent_node || !this.parent.is_dom_node();\n        const anchor = needs_anchor\n            ? block.get_unique_name(`${this.var.name}_anchor`)\n            : (this.next && this.next.var) || 'null';\n        const has_else = !(this.branches[this.branches.length - 1].condition);\n        const if_exists_condition = has_else ? null : name;\n        const dynamic = this.branches[0].block.has_update_method; // can use [0] as proxy for all, since they necessarily have the same value\n        const has_intros = this.branches[0].block.has_intro_method;\n        const has_outros = this.branches[0].block.has_outro_method;\n        const has_transitions = has_intros || has_outros;\n        const vars = { name, anchor, if_exists_condition, has_else, has_transitions };\n        const detaching = parent_node && !is_head(parent_node) ? null : 'detaching';\n        if (this.node.else) {\n            this.branches.forEach(branch => {\n                if (branch.snippet)\n                    block.add_variable(branch.condition);\n            });\n            if (has_outros) {\n                this.render_compound_with_outros(block, parent_node, parent_nodes, dynamic, vars, detaching);\n                block.chunks.outro.push(b `@transition_out(${name});`);\n            }\n            else {\n                this.render_compound(block, parent_node, parent_nodes, dynamic, vars, detaching);\n            }\n        }\n        else {\n            this.render_simple(block, parent_node, parent_nodes, dynamic, vars, detaching);\n            if (has_outros) {\n                block.chunks.outro.push(b `@transition_out(${name});`);\n            }\n        }\n        if (if_exists_condition) {\n            block.chunks.create.push(b `if (${if_exists_condition}) ${name}.c();`);\n        }\n        else {\n            block.chunks.create.push(b `${name}.c();`);\n        }\n        if (parent_nodes && this.renderer.options.hydratable) {\n            if (if_exists_condition) {\n                block.chunks.claim.push(b `if (${if_exists_condition}) ${name}.l(${parent_nodes});`);\n            }\n            else {\n                block.chunks.claim.push(b `${name}.l(${parent_nodes});`);\n            }\n        }\n        if (has_intros || has_outros) {\n            block.chunks.intro.push(b `@transition_in(${name});`);\n        }\n        if (needs_anchor) {\n            block.add_element(anchor, x `@empty()`, parent_nodes && x `@empty()`, parent_node);\n        }\n        this.branches.forEach(branch => {\n            branch.fragment.render(branch.block, null, x `#nodes`);\n        });\n    }\n    render_compound(block, parent_node, _parent_nodes, dynamic, { name, anchor, has_else, if_exists_condition, has_transitions }, detaching) {\n        const select_block_type = this.renderer.component.get_unique_name('select_block_type');\n        const current_block_type = block.get_unique_name('current_block_type');\n        const get_block = has_else\n            ? x `${current_block_type}(#ctx)`\n            : x `${current_block_type} && ${current_block_type}(#ctx)`;\n        if (this.needs_update) {\n            block.chunks.init.push(b `\n\t\t\t\tfunction ${select_block_type}(#ctx, #dirty) {\n\t\t\t\t\t${this.branches.map(({ dependencies, condition, snippet }) => {\n                return b `${snippet && dependencies.length > 0 ? b `if (${block.renderer.dirty(dependencies)}) ${condition} = null;` : null}`;\n            })}\n\t\t\t\t\t${this.branches.map(({ condition, snippet, block }) => condition\n                ? b `\n\t\t\t\t\t\t${snippet && b `if (${condition} == null) ${condition} = !!${snippet}`}\n\t\t\t\t\t\tif (${condition}) return ${block.name};`\n                : b `return ${block.name};`)}\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.chunks.init.push(b `\n\t\t\t\tfunction ${select_block_type}(#ctx, #dirty) {\n\t\t\t\t\t${this.branches.map(({ condition, snippet, block }) => condition\n                ? b `if (${snippet || condition}) return ${block.name};`\n                : b `return ${block.name};`)}\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.chunks.init.push(b `\n\t\t\tlet ${current_block_type} = ${select_block_type}(#ctx, ${this.renderer.get_initial_dirty()});\n\t\t\tlet ${name} = ${get_block};\n\t\t`);\n        const initial_mount_node = parent_node || '#target';\n        const anchor_node = parent_node ? 'null' : '#anchor';\n        if (if_exists_condition) {\n            block.chunks.mount.push(b `if (${if_exists_condition}) ${name}.m(${initial_mount_node}, ${anchor_node});`);\n        }\n        else {\n            block.chunks.mount.push(b `${name}.m(${initial_mount_node}, ${anchor_node});`);\n        }\n        if (this.needs_update) {\n            const update_mount_node = this.get_update_mount_node(anchor);\n            const change_block = b `\n\t\t\t\t${if_exists_condition ? b `if (${if_exists_condition}) ${name}.d(1)` : b `${name}.d(1)`};\n\t\t\t\t${name} = ${get_block};\n\t\t\t\tif (${name}) {\n\t\t\t\t\t${name}.c();\n\t\t\t\t\t${has_transitions && b `@transition_in(${name}, 1);`}\n\t\t\t\t\t${name}.m(${update_mount_node}, ${anchor});\n\t\t\t\t}\n\t\t\t`;\n            if (dynamic) {\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${current_block_type} === (${current_block_type} = ${select_block_type}(#ctx, #dirty)) && ${name}) {\n\t\t\t\t\t\t${name}.p(#ctx, #dirty);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${change_block}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${current_block_type} !== (${current_block_type} = ${select_block_type}(#ctx, #dirty))) {\n\t\t\t\t\t\t${change_block}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n        }\n        else if (dynamic) {\n            if (if_exists_condition) {\n                block.chunks.update.push(b `if (${if_exists_condition}) ${name}.p(#ctx, #dirty);`);\n            }\n            else {\n                block.chunks.update.push(b `${name}.p(#ctx, #dirty);`);\n            }\n        }\n        if (if_exists_condition) {\n            block.chunks.destroy.push(b `\n\t\t\t\tif (${if_exists_condition}) {\n\t\t\t\t\t${name}.d(${detaching});\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.chunks.destroy.push(b `\n\t\t\t\t${name}.d(${detaching});\n\t\t\t`);\n        }\n    }\n    // if any of the siblings have outros, we need to keep references to the blocks\n    // (TODO does this only apply to bidi transitions?)\n    render_compound_with_outros(block, parent_node, _parent_nodes, dynamic, { name, anchor, has_else, has_transitions, if_exists_condition }, detaching) {\n        const select_block_type = this.renderer.component.get_unique_name('select_block_type');\n        const current_block_type_index = block.get_unique_name('current_block_type_index');\n        const previous_block_index = block.get_unique_name('previous_block_index');\n        const if_block_creators = block.get_unique_name('if_block_creators');\n        const if_blocks = block.get_unique_name('if_blocks');\n        const if_current_block_type_index = has_else\n            ? nodes => nodes\n            : nodes => b `if (~${current_block_type_index}) { ${nodes} }`;\n        block.add_variable(current_block_type_index);\n        block.add_variable(name);\n        block.chunks.init.push(b `\n\t\t\tconst ${if_block_creators} = [\n\t\t\t\t${this.branches.map(branch => branch.block.name)}\n\t\t\t];\n\n\t\t\tconst ${if_blocks} = [];\n\n\t\t\t${this.needs_update\n            ? b `\n\t\t\t\t\tfunction ${select_block_type}(#ctx, #dirty) {\n\t\t\t\t\t\t${this.branches.map(({ dependencies, condition, snippet }) => {\n                return b `${snippet && dependencies.length > 0 ? b `if (${block.renderer.dirty(dependencies)}) ${condition} = null;` : null}`;\n            })}\n\t\t\t\t\t\t${this.branches.map(({ condition, snippet }, i) => condition\n                ? b `\n\t\t\t\t\t\t${snippet && b `if (${condition} == null) ${condition} = !!${snippet}`}\n\t\t\t\t\t\tif (${condition}) return ${i};`\n                : b `return ${i};`)}\n\t\t\t\t\t\t${!has_else && b `return -1;`}\n\t\t\t\t\t}\n\t\t\t\t`\n            : b `\n\t\t\t\t\tfunction ${select_block_type}(#ctx, #dirty) {\n\t\t\t\t\t\t${this.branches.map(({ condition, snippet }, i) => condition\n                ? b `if (${snippet || condition}) return ${i};`\n                : b `return ${i};`)}\n\t\t\t\t\t\t${!has_else && b `return -1;`}\n\t\t\t\t\t}\n\t\t\t\t`}\n\t\t`);\n        if (has_else) {\n            block.chunks.init.push(b `\n\t\t\t\t${current_block_type_index} = ${select_block_type}(#ctx, ${this.renderer.get_initial_dirty()});\n\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#ctx);\n\t\t\t`);\n        }\n        else {\n            block.chunks.init.push(b `\n\t\t\t\tif (~(${current_block_type_index} = ${select_block_type}(#ctx, ${this.renderer.get_initial_dirty()}))) {\n\t\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#ctx);\n\t\t\t\t}\n\t\t\t`);\n        }\n        const initial_mount_node = parent_node || '#target';\n        const anchor_node = parent_node ? 'null' : '#anchor';\n        block.chunks.mount.push(if_current_block_type_index(b `${if_blocks}[${current_block_type_index}].m(${initial_mount_node}, ${anchor_node});`));\n        if (this.needs_update) {\n            const update_mount_node = this.get_update_mount_node(anchor);\n            const destroy_old_block = b `\n\t\t\t\t@group_outros();\n\t\t\t\t@transition_out(${if_blocks}[${previous_block_index}], 1, 1, () => {\n\t\t\t\t\t${if_blocks}[${previous_block_index}] = null;\n\t\t\t\t});\n\t\t\t\t@check_outros();\n\t\t\t`;\n            const create_new_block = b `\n\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}];\n\t\t\t\tif (!${name}) {\n\t\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#ctx);\n\t\t\t\t\t${name}.c();\n\t\t\t\t} else {\n\t\t\t\t\t${dynamic && b `${name}.p(#ctx, #dirty);`}\n\t\t\t\t}\n\t\t\t\t${has_transitions && b `@transition_in(${name}, 1);`}\n\t\t\t\t${name}.m(${update_mount_node}, ${anchor});\n\t\t\t`;\n            const change_block = has_else\n                ? b `\n\t\t\t\t\t${destroy_old_block}\n\n\t\t\t\t\t${create_new_block}\n\t\t\t\t`\n                : b `\n\t\t\t\t\tif (${name}) {\n\t\t\t\t\t\t${destroy_old_block}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (~${current_block_type_index}) {\n\t\t\t\t\t\t${create_new_block}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${name} = null;\n\t\t\t\t\t}\n\t\t\t\t`;\n            block.chunks.update.push(b `\n\t\t\t\tlet ${previous_block_index} = ${current_block_type_index};\n\t\t\t\t${current_block_type_index} = ${select_block_type}(#ctx, #dirty);\n\t\t\t`);\n            if (dynamic) {\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${current_block_type_index} === ${previous_block_index}) {\n\t\t\t\t\t\t${if_current_block_type_index(b `${if_blocks}[${current_block_type_index}].p(#ctx, #dirty);`)}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${change_block}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${current_block_type_index} !== ${previous_block_index}) {\n\t\t\t\t\t\t${change_block}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n        }\n        else if (dynamic) {\n            if (if_exists_condition) {\n                block.chunks.update.push(b `if (${if_exists_condition}) ${name}.p(#ctx, #dirty);`);\n            }\n            else {\n                block.chunks.update.push(b `${name}.p(#ctx, #dirty);`);\n            }\n        }\n        block.chunks.destroy.push(if_current_block_type_index(b `${if_blocks}[${current_block_type_index}].d(${detaching});`));\n    }\n    render_simple(block, parent_node, _parent_nodes, dynamic, { name, anchor, if_exists_condition, has_transitions }, detaching) {\n        const branch = this.branches[0];\n        if (branch.snippet)\n            block.add_variable(branch.condition, branch.snippet);\n        block.chunks.init.push(b `\n\t\t\tlet ${name} = ${branch.condition} && ${branch.block.name}(#ctx);\n\t\t`);\n        const initial_mount_node = parent_node || '#target';\n        const anchor_node = parent_node ? 'null' : '#anchor';\n        block.chunks.mount.push(b `if (${name}) ${name}.m(${initial_mount_node}, ${anchor_node});`);\n        if (branch.dependencies.length > 0) {\n            const update_mount_node = this.get_update_mount_node(anchor);\n            const enter = b `\n\t\t\t\tif (${name}) {\n\t\t\t\t\t${dynamic && b `${name}.p(#ctx, #dirty);`}\n\t\t\t\t\t${has_transitions &&\n                b `if (${block.renderer.dirty(branch.dependencies)}) {\n\t\t\t\t\t\t\t@transition_in(${name}, 1);\n\t\t\t\t\t\t}`}\n\t\t\t\t} else {\n\t\t\t\t\t${name} = ${branch.block.name}(#ctx);\n\t\t\t\t\t${name}.c();\n\t\t\t\t\t${has_transitions && b `@transition_in(${name}, 1);`}\n\t\t\t\t\t${name}.m(${update_mount_node}, ${anchor});\n\t\t\t\t}\n\t\t\t`;\n            if (branch.snippet) {\n                block.chunks.update.push(b `if (${block.renderer.dirty(branch.dependencies)}) ${branch.condition} = ${branch.snippet}`);\n            }\n            // no `p()` here — we don't want to update outroing nodes,\n            // as that will typically result in glitching\n            if (branch.block.has_outro_method) {\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${branch.condition}) {\n\t\t\t\t\t\t${enter}\n\t\t\t\t\t} else if (${name}) {\n\t\t\t\t\t\t@group_outros();\n\t\t\t\t\t\t@transition_out(${name}, 1, 1, () => {\n\t\t\t\t\t\t\t${name} = null;\n\t\t\t\t\t\t});\n\t\t\t\t\t\t@check_outros();\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${branch.condition}) {\n\t\t\t\t\t\t${enter}\n\t\t\t\t\t} else if (${name}) {\n\t\t\t\t\t\t${name}.d(1);\n\t\t\t\t\t\t${name} = null;\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n        }\n        else if (dynamic) {\n            block.chunks.update.push(b `\n\t\t\t\tif (${branch.condition}) ${name}.p(#ctx, #dirty);\n\t\t\t`);\n        }\n        if (if_exists_condition) {\n            block.chunks.destroy.push(b `\n\t\t\t\tif (${if_exists_condition}) ${name}.d(${detaching});\n\t\t\t`);\n        }\n        else {\n            block.chunks.destroy.push(b `\n\t\t\t\t${name}.d(${detaching});\n\t\t\t`);\n        }\n    }\n}\n\nclass KeyBlockWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.var = { type: 'Identifier', name: 'key_block' };\n        this.cannot_use_innerhtml();\n        this.not_static_content();\n        this.dependencies = node.expression.dynamic_dependencies();\n        if (this.dependencies.length) {\n            block = block.child({\n                comment: create_debugging_comment(node, renderer.component),\n                name: renderer.component.get_unique_name('create_key_block'),\n                type: 'key'\n            });\n            renderer.blocks.push(block);\n        }\n        this.block = block;\n        this.fragment = new FragmentWrapper(renderer, this.block, node.children, this, strip_whitespace, next_sibling);\n    }\n    render(block, parent_node, parent_nodes) {\n        if (this.dependencies.length === 0) {\n            this.render_static_key(block, parent_node, parent_nodes);\n        }\n        else {\n            this.render_dynamic_key(block, parent_node, parent_nodes);\n        }\n    }\n    render_static_key(_block, parent_node, parent_nodes) {\n        this.fragment.render(this.block, parent_node, parent_nodes);\n    }\n    render_dynamic_key(block, parent_node, parent_nodes) {\n        this.fragment.render(this.block, null, x `#nodes`);\n        const has_transitions = !!(this.block.has_intro_method || this.block.has_outro_method);\n        const dynamic = this.block.has_update_method;\n        const previous_key = block.get_unique_name('previous_key');\n        const snippet = this.node.expression.manipulate(block);\n        block.add_variable(previous_key, snippet);\n        const not_equal = this.renderer.component.component_options.immutable ? x `@not_equal` : x `@safe_not_equal`;\n        const condition = x `${this.renderer.dirty(this.dependencies)} && ${not_equal}(${previous_key}, ${previous_key} = ${snippet})`;\n        block.chunks.init.push(b `\n\t\t\tlet ${this.var} = ${this.block.name}(#ctx);\n\t\t`);\n        block.chunks.create.push(b `${this.var}.c();`);\n        if (this.renderer.options.hydratable) {\n            block.chunks.claim.push(b `${this.var}.l(${parent_nodes});`);\n        }\n        block.chunks.mount.push(b `${this.var}.m(${parent_node || '#target'}, ${parent_node ? 'null' : '#anchor'});`);\n        const anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);\n        const body = b `\n\t\t\t${has_transitions\n            ? b `\n\t\t\t\t\t\t@group_outros();\n\t\t\t\t\t\t@transition_out(${this.var}, 1, 1, @noop);\n\t\t\t\t\t\t@check_outros();\n\t\t\t\t\t`\n            : b `${this.var}.d(1);`}\n\t\t\t${this.var} = ${this.block.name}(#ctx);\n\t\t\t${this.var}.c();\n\t\t\t${has_transitions && b `@transition_in(${this.var})`}\n\t\t\t${this.var}.m(${this.get_update_mount_node(anchor)}, ${anchor});\n\t\t`;\n        if (dynamic) {\n            block.chunks.update.push(b `\n\t\t\t\tif (${condition}) {\n\t\t\t\t\t${body}\n\t\t\t\t} else {\n\t\t\t\t\t${this.var}.p(#ctx, #dirty);\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.chunks.update.push(b `\n\t\t\t\tif (${condition}) {\n\t\t\t\t\t${body}\n\t\t\t\t}\n\t\t\t`);\n        }\n        if (has_transitions) {\n            block.chunks.intro.push(b `@transition_in(${this.var})`);\n            block.chunks.outro.push(b `@transition_out(${this.var})`);\n        }\n        block.chunks.destroy.push(b `${this.var}.d(detaching)`);\n    }\n}\n\nfunction get_slot_definition(block, scope, lets) {\n    if (lets.length === 0)\n        return { block, scope };\n    const context_input = {\n        type: 'ObjectPattern',\n        properties: lets.map(l => ({\n            type: 'Property',\n            kind: 'init',\n            key: l.name,\n            value: l.value || l.name\n        }))\n    };\n    const properties = [];\n    const value_map = new Map();\n    lets.forEach(l => {\n        let value;\n        if (l.names.length > 1) {\n            // more than one, probably destructuring\n            const unique_name = block.get_unique_name(l.names.join('_')).name;\n            value_map.set(l.value, unique_name);\n            value = { type: 'Identifier', name: unique_name };\n        }\n        else {\n            value = l.value || l.name;\n        }\n        properties.push({\n            type: 'Property',\n            kind: 'init',\n            key: l.name,\n            value\n        });\n    });\n    const changes_input = {\n        type: 'ObjectPattern',\n        properties\n    };\n    const names = new Set();\n    const names_lookup = new Map();\n    lets.forEach(l => {\n        l.names.forEach(name => {\n            names.add(name);\n            if (value_map.has(l.value)) {\n                names_lookup.set(name, value_map.get(l.value));\n            }\n        });\n    });\n    const context = {\n        type: 'ObjectExpression',\n        properties: Array.from(names).map(name => p `${block.renderer.context_lookup.get(name).index}: ${name}`)\n    };\n    const { context_lookup } = block.renderer;\n    // i am well aware that this code is gross\n    // TODO: context-overflow make it less gross\n    const changes = {\n        type: 'ParenthesizedExpression',\n        get expression() {\n            if (block.renderer.context_overflow) {\n                const grouped = [];\n                Array.from(names).forEach(name => {\n                    const i = context_lookup.get(name).index.value;\n                    const g = Math.floor(i / 31);\n                    const lookup_name = names_lookup.has(name) ? names_lookup.get(name) : name;\n                    if (!grouped[g])\n                        grouped[g] = [];\n                    grouped[g].push({ name: lookup_name, n: i % 31 });\n                });\n                const elements = [];\n                for (let g = 0; g < grouped.length; g += 1) {\n                    elements[g] = grouped[g]\n                        ? grouped[g]\n                            .map(({ name, n }) => x `${name} ? ${1 << n} : 0`)\n                            .reduce((lhs, rhs) => x `${lhs} | ${rhs}`)\n                        : x `0`;\n                }\n                return {\n                    type: 'ArrayExpression',\n                    elements\n                };\n            }\n            return Array.from(names)\n                .map(name => {\n                const lookup_name = names_lookup.has(name) ? names_lookup.get(name) : name;\n                const i = context_lookup.get(name).index.value;\n                return x `${lookup_name} ? ${1 << i} : 0`;\n            })\n                .reduce((lhs, rhs) => x `${lhs} | ${rhs}`);\n        }\n    };\n    return {\n        block,\n        scope,\n        get_context: x `${context_input} => ${context}`,\n        get_changes: x `${changes_input} => ${changes}`\n    };\n}\n\nclass SlotTemplateWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        const { scope, lets, const_tags, slot_template_name } = this.node;\n        lets.forEach(l => {\n            extract_names(l.value || l.name).forEach(name => {\n                renderer.add_to_context(name, true);\n            });\n        });\n        add_const_tags_context(renderer, const_tags);\n        this.block = block.child({\n            comment: create_debugging_comment(this.node, this.renderer.component),\n            name: this.renderer.component.get_unique_name(`create_${sanitize(slot_template_name)}_slot`),\n            type: 'slot'\n        });\n        this.renderer.blocks.push(this.block);\n        const seen = new Set(lets.map(l => l.name.name));\n        this.parent.node.lets.forEach(l => {\n            if (!seen.has(l.name.name))\n                lets.push(l);\n        });\n        this.parent.set_slot(slot_template_name, get_slot_definition(this.block, scope, lets));\n        this.fragment = new FragmentWrapper(renderer, this.block, node.type === 'SlotTemplate' ? node.children : [node], this, strip_whitespace, next_sibling);\n        this.block.parent.add_dependencies(this.block.dependencies);\n    }\n    render() {\n        this.fragment.render(this.block, null, x `#nodes`);\n        if (this.node.const_tags.length > 0) {\n            this.render_get_context();\n        }\n    }\n    render_get_context() {\n        const get_context = this.block.renderer.component.get_unique_name('get_context');\n        this.block.renderer.blocks.push(b `\n\t\t\tfunction ${get_context}(#ctx) {\n\t\t\t\t${add_const_tags(this.block, this.node.const_tags, '#ctx')}\n\t\t\t}\n\t\t`);\n        this.block.chunks.declarations.push(b `${get_context}(#ctx)`);\n        if (this.block.has_update_method) {\n            this.block.chunks.update.unshift(b `${get_context}(#ctx)`);\n        }\n    }\n}\n\nfunction string_to_member_expression(name) {\n    const parts = name.split('.');\n    let node = {\n        type: 'Identifier',\n        name: parts[0]\n    };\n    for (let i = 1; i < parts.length; i++) {\n        node = {\n            type: 'MemberExpression',\n            object: node,\n            property: { type: 'Identifier', name: parts[i] }\n        };\n    }\n    return node;\n}\n\nclass InlineComponentWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.slots = new Map();\n        this.children = [];\n        this.cannot_use_innerhtml();\n        this.not_static_content();\n        if (this.node.expression) {\n            block.add_dependencies(this.node.expression.dependencies);\n        }\n        this.node.attributes.forEach(attr => {\n            block.add_dependencies(attr.dependencies);\n        });\n        this.node.bindings.forEach(binding => {\n            if (binding.is_contextual) {\n                mark_each_block_bindings(this, binding);\n            }\n            block.add_dependencies(binding.expression.dependencies);\n        });\n        this.node.handlers.forEach(handler => {\n            if (handler.expression) {\n                block.add_dependencies(handler.expression.dependencies);\n            }\n        });\n        this.node.css_custom_properties.forEach(attr => {\n            block.add_dependencies(attr.dependencies);\n        });\n        this.var = {\n            type: 'Identifier',\n            name: (this.node.name === 'svelte:self' ? renderer.component.name.name :\n                this.node.name === 'svelte:component' ? 'switch_instance' :\n                    sanitize(this.node.name)).toLowerCase()\n        };\n        if (this.node.children.length) {\n            this.node.lets.forEach(l => {\n                extract_names(l.value || l.name).forEach(name => {\n                    renderer.add_to_context(name, true);\n                });\n            });\n            this.children = this.node.children.map(child => new SlotTemplateWrapper(renderer, block, this, child, strip_whitespace, next_sibling));\n        }\n        block.add_outro();\n    }\n    set_slot(name, slot_definition) {\n        if (this.slots.has(name)) {\n            if (name === 'default') {\n                throw new Error('Found elements without slot attribute when using slot=\"default\"');\n            }\n            throw new Error(`Duplicate slot name \"${name}\" in <${this.node.name}>`);\n        }\n        this.slots.set(name, slot_definition);\n    }\n    warn_if_reactive() {\n        const { name } = this.node;\n        const variable = this.renderer.component.var_lookup.get(name);\n        if (!variable) {\n            return;\n        }\n        if (variable.reassigned || variable.export_name || variable.is_reactive_dependency) {\n            this.renderer.component.warn(this.node, compiler_warnings.reactive_component(name));\n        }\n    }\n    render(block, parent_node, parent_nodes) {\n        this.warn_if_reactive();\n        const { renderer } = this;\n        const { component } = renderer;\n        const name = this.var;\n        block.add_variable(name);\n        const component_opts = x `{}`;\n        const statements = [];\n        const updates = [];\n        this.children.forEach((child) => {\n            this.renderer.add_to_context('$$scope', true);\n            child.render(block, null, x `#nodes`);\n        });\n        let props;\n        const name_changes = block.get_unique_name(`${name.name}_changes`);\n        const uses_spread = !!this.node.attributes.find(a => a.is_spread);\n        // removing empty slot\n        for (const slot of this.slots.keys()) {\n            if (!this.slots.get(slot).block.has_content()) {\n                this.renderer.remove_block(this.slots.get(slot).block);\n                this.slots.delete(slot);\n            }\n        }\n        const has_css_custom_properties = this.node.css_custom_properties.length > 0;\n        const css_custom_properties_wrapper = has_css_custom_properties ? block.get_unique_name('div') : null;\n        if (has_css_custom_properties) {\n            block.add_variable(css_custom_properties_wrapper);\n        }\n        const initial_props = this.slots.size > 0\n            ? [\n                p `$$slots: {\n\t\t\t\t\t${Array.from(this.slots).map(([name, slot]) => {\n                    return p `${name}: [${slot.block.name}, ${slot.get_context || null}, ${slot.get_changes || null}]`;\n                })}\n\t\t\t\t}`,\n                p `$$scope: {\n\t\t\t\t\tctx: #ctx\n\t\t\t\t}`\n            ]\n            : [];\n        const attribute_object = uses_spread\n            ? x `{ ${initial_props} }`\n            : x `{\n\t\t\t\t${this.node.attributes.map(attr => p `${attr.name}: ${attr.get_value(block)}`)},\n\t\t\t\t${initial_props}\n\t\t\t}`;\n        if (this.node.attributes.length || this.node.bindings.length || initial_props.length) {\n            if (!uses_spread && this.node.bindings.length === 0) {\n                component_opts.properties.push(p `props: ${attribute_object}`);\n            }\n            else {\n                props = block.get_unique_name(`${name.name}_props`);\n                component_opts.properties.push(p `props: ${props}`);\n            }\n        }\n        if (component.compile_options.dev) {\n            // TODO this is a terrible hack, but without it the component\n            // will complain that options.target is missing. This would\n            // work better if components had separate public and private\n            // APIs\n            component_opts.properties.push(p `$$inline: true`);\n        }\n        const fragment_dependencies = new Set(this.slots.size ? ['$$scope'] : []);\n        this.slots.forEach(slot => {\n            slot.block.dependencies.forEach(name => {\n                const is_let = slot.scope.is_let(name);\n                const variable = renderer.component.var_lookup.get(name);\n                if (is_let || is_dynamic(variable))\n                    fragment_dependencies.add(name);\n            });\n        });\n        const dynamic_attributes = this.node.attributes.filter(a => a.get_dependencies().length > 0);\n        if (!uses_spread && (dynamic_attributes.length > 0 || this.node.bindings.length > 0 || fragment_dependencies.size > 0)) {\n            updates.push(b `const ${name_changes} = {};`);\n        }\n        if (this.node.attributes.length) {\n            if (uses_spread) {\n                const levels = block.get_unique_name(`${this.var.name}_spread_levels`);\n                const initial_props = [];\n                const changes = [];\n                const all_dependencies = new Set();\n                this.node.attributes.forEach(attr => {\n                    add_to_set(all_dependencies, attr.dependencies);\n                });\n                this.node.attributes.forEach((attr, i) => {\n                    const { name, dependencies } = attr;\n                    const condition = dependencies.size > 0 && (dependencies.size !== all_dependencies.size)\n                        ? renderer.dirty(Array.from(dependencies))\n                        : null;\n                    const unchanged = dependencies.size === 0;\n                    let change_object;\n                    if (attr.is_spread) {\n                        const value = attr.expression.manipulate(block);\n                        initial_props.push(value);\n                        let value_object = value;\n                        if (attr.expression.node.type !== 'ObjectExpression') {\n                            value_object = x `@get_spread_object(${value})`;\n                        }\n                        change_object = value_object;\n                    }\n                    else {\n                        const obj = x `{ ${name}: ${attr.get_value(block)} }`;\n                        initial_props.push(obj);\n                        change_object = obj;\n                    }\n                    changes.push(unchanged\n                        ? x `${levels}[${i}]`\n                        : condition\n                            ? x `${condition} && ${change_object}`\n                            : change_object);\n                });\n                block.chunks.init.push(b `\n\t\t\t\t\tconst ${levels} = [\n\t\t\t\t\t\t${initial_props}\n\t\t\t\t\t];\n\t\t\t\t`);\n                statements.push(b `\n\t\t\t\t\tfor (let #i = 0; #i < ${levels}.length; #i += 1) {\n\t\t\t\t\t\t${props} = @assign(${props}, ${levels}[#i]);\n\t\t\t\t\t}\n\t\t\t\t`);\n                if (all_dependencies.size) {\n                    const condition = renderer.dirty(Array.from(all_dependencies));\n                    updates.push(b `\n\t\t\t\t\t\tconst ${name_changes} = ${condition} ? @get_spread_update(${levels}, [\n\t\t\t\t\t\t\t${changes}\n\t\t\t\t\t\t]) : {}\n\t\t\t\t\t`);\n                }\n                else {\n                    updates.push(b `\n\t\t\t\t\t\tconst ${name_changes} = {};\n\t\t\t\t\t`);\n                }\n            }\n            else {\n                dynamic_attributes.forEach((attribute) => {\n                    const dependencies = attribute.get_dependencies();\n                    if (dependencies.length > 0) {\n                        const condition = renderer.dirty(dependencies);\n                        updates.push(b `\n\t\t\t\t\t\t\tif (${condition}) ${name_changes}.${attribute.name} = ${attribute.get_value(block)};\n\t\t\t\t\t\t`);\n                    }\n                });\n            }\n        }\n        if (fragment_dependencies.size > 0) {\n            updates.push(b `\n\t\t\t\tif (${renderer.dirty(Array.from(fragment_dependencies))}) {\n\t\t\t\t\t${name_changes}.$$scope = { dirty: #dirty, ctx: #ctx };\n\t\t\t\t}`);\n        }\n        const munged_bindings = this.node.bindings.map(binding => {\n            component.has_reactive_assignments = true;\n            if (binding.name === 'this') {\n                return bind_this(component, block, new BindingWrapper(block, binding, this), this.var);\n            }\n            const id = component.get_unique_name(`${this.var.name}_${binding.name}_binding`);\n            renderer.add_to_context(id.name);\n            const callee = renderer.reference(id);\n            const updating = block.get_unique_name(`updating_${binding.name}`);\n            block.add_variable(updating);\n            const snippet = binding.expression.manipulate(block);\n            statements.push(b `\n\t\t\t\tif (${snippet} !== void 0) {\n\t\t\t\t\t${props}.${binding.name} = ${snippet};\n\t\t\t\t}`);\n            updates.push(b `\n\t\t\t\tif (!${updating} && ${renderer.dirty(Array.from(binding.expression.dependencies))}) {\n\t\t\t\t\t${updating} = true;\n\t\t\t\t\t${name_changes}.${binding.name} = ${snippet};\n\t\t\t\t\t@add_flush_callback(() => ${updating} = false);\n\t\t\t\t}\n\t\t\t`);\n            const contextual_dependencies = Array.from(binding.expression.contextual_dependencies);\n            const dependencies = Array.from(binding.expression.dependencies);\n            let lhs = binding.raw_expression;\n            if (binding.is_contextual && binding.expression.node.type === 'Identifier') {\n                // bind:x={y} — we can't just do `y = x`, we need to\n                // to `array[index] = x;\n                const { name } = binding.expression.node;\n                const { object, property, snippet } = block.bindings.get(name);\n                lhs = snippet;\n                contextual_dependencies.push(object.name, property.name);\n            }\n            const params = [x `#value`];\n            const args = [x `#value`];\n            if (contextual_dependencies.length > 0) {\n                contextual_dependencies.forEach(name => {\n                    params.push({\n                        type: 'Identifier',\n                        name\n                    });\n                    renderer.add_to_context(name, true);\n                    args.push(renderer.reference(name));\n                });\n                block.maintain_context = true; // TODO put this somewhere more logical\n            }\n            block.chunks.init.push(b `\n\t\t\t\tfunction ${id}(#value) {\n\t\t\t\t\t${callee}(${args});\n\t\t\t\t}\n\t\t\t`);\n            let invalidate_binding = b `\n\t\t\t\t${lhs} = #value;\n\t\t\t\t${renderer.invalidate(dependencies[0])};\n\t\t\t`;\n            if (binding.expression.node.type === 'MemberExpression') {\n                invalidate_binding = b `\n\t\t\t\t\tif ($$self.$$.not_equal(${lhs}, #value)) {\n\t\t\t\t\t\t${invalidate_binding}\n\t\t\t\t\t}\n\t\t\t\t`;\n            }\n            const body = b `\n\t\t\t\tfunction ${id}(${params}) {\n\t\t\t\t\t${invalidate_binding}\n\t\t\t\t}\n\t\t\t`;\n            component.partly_hoisted.push(body);\n            return b `@binding_callbacks.push(() => @bind(${this.var}, '${binding.name}', ${id}));`;\n        });\n        const munged_handlers = this.node.handlers.map(handler => {\n            const event_handler = new EventHandlerWrapper(handler, this);\n            let snippet = event_handler.get_snippet(block);\n            if (handler.modifiers.has('once'))\n                snippet = x `@once(${snippet})`;\n            return b `${name}.$on(\"${handler.name}\", ${snippet});`;\n        });\n        if (this.node.name === 'svelte:component') {\n            const switch_value = block.get_unique_name('switch_value');\n            const switch_props = block.get_unique_name('switch_props');\n            const snippet = this.node.expression.manipulate(block);\n            block.chunks.init.push(b `\n\t\t\t\tvar ${switch_value} = ${snippet};\n\n\t\t\t\tfunction ${switch_props}(#ctx) {\n\t\t\t\t\t${(this.node.attributes.length > 0 || this.node.bindings.length > 0) && b `\n\t\t\t\t\t${props && b `let ${props} = ${attribute_object};`}`}\n\t\t\t\t\t${statements}\n\t\t\t\t\treturn ${component_opts};\n\t\t\t\t}\n\n\t\t\t\tif (${switch_value}) {\n\t\t\t\t\t${name} = new ${switch_value}(${switch_props}(#ctx));\n\n\t\t\t\t\t${munged_bindings}\n\t\t\t\t\t${munged_handlers}\n\t\t\t\t}\n\t\t\t`);\n            block.chunks.create.push(b `if (${name}) @create_component(${name}.$$.fragment);`);\n            if (parent_nodes && this.renderer.options.hydratable) {\n                block.chunks.claim.push(b `if (${name}) @claim_component(${name}.$$.fragment, ${parent_nodes});`);\n            }\n            block.chunks.mount.push(b `\n\t\t\t\tif (${name}) {\n\t\t\t\t\t@mount_component(${name}, ${parent_node || '#target'}, ${parent_node ? 'null' : '#anchor'});\n\t\t\t\t}\n\t\t\t`);\n            const anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);\n            const update_mount_node = this.get_update_mount_node(anchor);\n            if (updates.length) {\n                block.chunks.update.push(b `\n\t\t\t\t\t${updates}\n\t\t\t\t`);\n            }\n            block.chunks.update.push(b `\n\t\t\t\tif (${switch_value} !== (${switch_value} = ${snippet})) {\n\t\t\t\t\tif (${name}) {\n\t\t\t\t\t\t@group_outros();\n\t\t\t\t\t\tconst old_component = ${name};\n\t\t\t\t\t\t@transition_out(old_component.$$.fragment, 1, 0, () => {\n\t\t\t\t\t\t\t@destroy_component(old_component, 1);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t@check_outros();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (${switch_value}) {\n\t\t\t\t\t\t${name} = new ${switch_value}(${switch_props}(#ctx));\n\n\t\t\t\t\t\t${munged_bindings}\n\t\t\t\t\t\t${munged_handlers}\n\n\t\t\t\t\t\t@create_component(${name}.$$.fragment);\n\t\t\t\t\t\t@transition_in(${name}.$$.fragment, 1);\n\t\t\t\t\t\t@mount_component(${name}, ${update_mount_node}, ${anchor});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${name} = null;\n\t\t\t\t\t}\n\t\t\t\t} else if (${switch_value}) {\n\t\t\t\t\t${updates.length > 0 && b `${name}.$set(${name_changes});`}\n\t\t\t\t}\n\t\t\t`);\n            block.chunks.intro.push(b `\n\t\t\t\tif (${name}) @transition_in(${name}.$$.fragment, #local);\n\t\t\t`);\n            block.chunks.outro.push(b `if (${name}) @transition_out(${name}.$$.fragment, #local);`);\n            block.chunks.destroy.push(b `if (${name}) @destroy_component(${name}, ${parent_node ? null : 'detaching'});`);\n        }\n        else {\n            const expression = this.node.name === 'svelte:self'\n                ? component.name\n                : this.renderer.reference(string_to_member_expression(this.node.name));\n            block.chunks.init.push(b `\n\t\t\t\t${(this.node.attributes.length > 0 || this.node.bindings.length > 0) && b `\n\t\t\t\t${props && b `let ${props} = ${attribute_object};`}`}\n\t\t\t\t${statements}\n\t\t\t\t${name} = new ${expression}(${component_opts});\n\n\t\t\t\t${munged_bindings}\n\t\t\t\t${munged_handlers}\n\t\t\t`);\n            if (has_css_custom_properties) {\n                block.chunks.create.push(b `${css_custom_properties_wrapper} = @element(\"div\");`);\n                block.chunks.hydrate.push(b `@set_style(${css_custom_properties_wrapper}, \"display\", \"contents\");`);\n                this.node.css_custom_properties.forEach(attr => {\n                    const dependencies = attr.get_dependencies();\n                    const should_cache = attr.should_cache();\n                    const last = should_cache && block.get_unique_name(`${attr.name.replace(/[^a-zA-Z_$]/g, '_')}_last`);\n                    if (should_cache)\n                        block.add_variable(last);\n                    const value = attr.get_value(block);\n                    const init = should_cache ? x `${last} = ${value}` : value;\n                    block.chunks.hydrate.push(b `@set_style(${css_custom_properties_wrapper}, \"${attr.name}\", ${init});`);\n                    if (dependencies.length > 0) {\n                        let condition = block.renderer.dirty(dependencies);\n                        if (should_cache)\n                            condition = x `${condition} && (${last} !== (${last} = ${value}))`;\n                        block.chunks.update.push(b `\n\t\t\t\t\t\t\tif (${condition}) {\n\t\t\t\t\t\t\t\t@set_style(${css_custom_properties_wrapper}, \"${attr.name}\", ${should_cache ? last : value});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`);\n                    }\n                });\n            }\n            block.chunks.create.push(b `@create_component(${name}.$$.fragment);`);\n            if (parent_nodes && this.renderer.options.hydratable) {\n                let nodes = parent_nodes;\n                if (has_css_custom_properties) {\n                    nodes = block.get_unique_name(`${css_custom_properties_wrapper.name}_nodes`);\n                    block.chunks.claim.push(b `\n\t\t\t\t\t\t${css_custom_properties_wrapper} = @claim_element(${parent_nodes}, \"DIV\", { style: true })\n\t\t\t\t\t\tvar ${nodes} = @children(${css_custom_properties_wrapper});\n\t\t\t\t\t`);\n                }\n                block.chunks.claim.push(b `@claim_component(${name}.$$.fragment, ${nodes});`);\n            }\n            if (has_css_custom_properties) {\n                if (parent_node) {\n                    block.chunks.mount.push(b `@append(${parent_node}, ${css_custom_properties_wrapper})`);\n                    if (is_head(parent_node)) {\n                        block.chunks.destroy.push(b `@detach(${css_custom_properties_wrapper});`);\n                    }\n                }\n                else {\n                    block.chunks.mount.push(b `@insert(#target, ${css_custom_properties_wrapper}, #anchor);`);\n                    // TODO we eventually need to consider what happens to elements\n                    // that belong to the same outgroup as an outroing element...\n                    block.chunks.destroy.push(b `if (detaching) @detach(${css_custom_properties_wrapper});`);\n                }\n                block.chunks.mount.push(b `@mount_component(${name}, ${css_custom_properties_wrapper}, null);`);\n            }\n            else {\n                block.chunks.mount.push(b `@mount_component(${name}, ${parent_node || '#target'}, ${parent_node ? 'null' : '#anchor'});`);\n            }\n            block.chunks.intro.push(b `\n\t\t\t\t@transition_in(${name}.$$.fragment, #local);\n\t\t\t`);\n            if (updates.length) {\n                block.chunks.update.push(b `\n\t\t\t\t\t${updates}\n\t\t\t\t\t${name}.$set(${name_changes});\n\t\t\t\t`);\n            }\n            block.chunks.destroy.push(b `\n\t\t\t\t@destroy_component(${name}, ${parent_node ? null : 'detaching'});\n\t\t\t`);\n            block.chunks.outro.push(b `@transition_out(${name}.$$.fragment, #local);`);\n        }\n    }\n}\n\nfunction get_slot_data(values, block = null) {\n    return {\n        type: 'ObjectExpression',\n        properties: Array.from(values.values())\n            .filter(attribute => attribute.name !== 'name')\n            .map(attribute => {\n            if (attribute.is_spread) {\n                const argument = get_spread_value(block, attribute);\n                return {\n                    type: 'SpreadElement',\n                    argument\n                };\n            }\n            const value = get_value(block, attribute);\n            return p `${attribute.name}: ${value}`;\n        })\n    };\n}\nfunction get_value(block, attribute) {\n    if (attribute.is_true)\n        return x `true`;\n    if (attribute.chunks.length === 0)\n        return x `\"\"`;\n    let value = attribute.chunks\n        .map(chunk => chunk.type === 'Text' ? string_literal(chunk.data) : (block ? chunk.manipulate(block) : chunk.node))\n        .reduce((lhs, rhs) => x `${lhs} + ${rhs}`);\n    if (attribute.chunks.length > 1 && attribute.chunks[0].type !== 'Text') {\n        value = x `\"\" + ${value}`;\n    }\n    return value;\n}\nfunction get_spread_value(block, attribute) {\n    return block ? attribute.expression.manipulate(block) : attribute.expression.node;\n}\n\nclass SlotWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, strip_whitespace, next_sibling) {\n        super(renderer, block, parent, node);\n        this.fallback = null;\n        this.var = { type: 'Identifier', name: 'slot' };\n        this.dependencies = new Set(['$$scope']);\n        this.cannot_use_innerhtml();\n        this.not_static_content();\n        if (this.node.children.length) {\n            this.fallback = block.child({\n                comment: create_debugging_comment(this.node.children[0], this.renderer.component),\n                name: this.renderer.component.get_unique_name('fallback_block'),\n                type: 'fallback'\n            });\n            renderer.blocks.push(this.fallback);\n        }\n        this.fragment = new FragmentWrapper(renderer, this.fallback, node.children, this, strip_whitespace, next_sibling);\n        this.node.values.forEach(attribute => {\n            add_to_set(this.dependencies, attribute.dependencies);\n        });\n        block.add_dependencies(this.dependencies);\n        // we have to do this, just in case\n        block.add_intro();\n        block.add_outro();\n    }\n    render(block, parent_node, parent_nodes) {\n        const { renderer } = this;\n        const { slot_name } = this.node;\n        if (this.slot_block) {\n            block = this.slot_block;\n        }\n        let get_slot_changes_fn;\n        let get_slot_spread_changes_fn;\n        let get_slot_context_fn;\n        if (this.node.values.size > 0) {\n            get_slot_changes_fn = renderer.component.get_unique_name(`get_${sanitize(slot_name)}_slot_changes`);\n            get_slot_context_fn = renderer.component.get_unique_name(`get_${sanitize(slot_name)}_slot_context`);\n            const changes = x `{}`;\n            const spread_dynamic_dependencies = new Set();\n            this.node.values.forEach(attribute => {\n                if (attribute.type === 'Spread') {\n                    add_to_set(spread_dynamic_dependencies, Array.from(attribute.dependencies).filter((name) => this.is_dependency_dynamic(name)));\n                }\n                else {\n                    const dynamic_dependencies = Array.from(attribute.dependencies).filter((name) => this.is_dependency_dynamic(name));\n                    if (dynamic_dependencies.length > 0) {\n                        changes.properties.push(p `${attribute.name}: ${renderer.dirty(dynamic_dependencies)}`);\n                    }\n                }\n            });\n            renderer.blocks.push(b `\n\t\t\t\tconst ${get_slot_changes_fn} = #dirty => ${changes};\n\t\t\t\tconst ${get_slot_context_fn} = #ctx => ${get_slot_data(this.node.values, block)};\n\t\t\t`);\n            if (spread_dynamic_dependencies.size) {\n                get_slot_spread_changes_fn = renderer.component.get_unique_name(`get_${sanitize(slot_name)}_slot_spread_changes`);\n                renderer.blocks.push(b `\n\t\t\t\t\tconst ${get_slot_spread_changes_fn} = #dirty => ${renderer.dirty(Array.from(spread_dynamic_dependencies))};\n\t\t\t\t`);\n            }\n        }\n        else {\n            get_slot_changes_fn = 'null';\n            get_slot_context_fn = 'null';\n        }\n        let has_fallback = !!this.fallback;\n        if (this.fallback) {\n            this.fragment.render(this.fallback, null, x `#nodes`);\n            has_fallback = this.fallback.has_content();\n            if (!has_fallback) {\n                renderer.remove_block(this.fallback);\n            }\n        }\n        const slot = block.get_unique_name(`${sanitize(slot_name)}_slot`);\n        const slot_definition = block.get_unique_name(`${sanitize(slot_name)}_slot_template`);\n        const slot_or_fallback = has_fallback ? block.get_unique_name(`${sanitize(slot_name)}_slot_or_fallback`) : slot;\n        block.chunks.init.push(b `\n\t\t\tconst ${slot_definition} = ${renderer.reference('#slots')}.${slot_name};\n\t\t\tconst ${slot} = @create_slot(${slot_definition}, #ctx, ${renderer.reference('$$scope')}, ${get_slot_context_fn});\n\t\t\t${has_fallback ? b `const ${slot_or_fallback} = ${slot} || ${this.fallback.name}(#ctx);` : null}\n\t\t`);\n        block.chunks.create.push(b `if (${slot_or_fallback}) ${slot_or_fallback}.c();`);\n        if (renderer.options.hydratable) {\n            block.chunks.claim.push(b `if (${slot_or_fallback}) ${slot_or_fallback}.l(${parent_nodes});`);\n        }\n        block.chunks.mount.push(b `\n\t\t\tif (${slot_or_fallback}) {\n\t\t\t\t${slot_or_fallback}.m(${parent_node || '#target'}, ${parent_node ? 'null' : '#anchor'});\n\t\t\t}\n\t\t`);\n        block.chunks.intro.push(b `@transition_in(${slot_or_fallback}, #local);`);\n        block.chunks.outro.push(b `@transition_out(${slot_or_fallback}, #local);`);\n        const dynamic_dependencies = Array.from(this.dependencies).filter((name) => this.is_dependency_dynamic(name));\n        const fallback_dynamic_dependencies = has_fallback\n            ? Array.from(this.fallback.dependencies).filter((name) => this.is_dependency_dynamic(name))\n            : [];\n        let condition = renderer.dirty(dynamic_dependencies);\n        if (block.has_outros) {\n            condition = x `!#current || ${condition}`;\n        }\n        // conditions to treat everything as dirty\n        const all_dirty_conditions = [\n            get_slot_spread_changes_fn ? x `${get_slot_spread_changes_fn}(#dirty)` : null,\n            block.has_outros ? x `!#current` : null\n        ].filter(Boolean);\n        const all_dirty_condition = all_dirty_conditions.length ? all_dirty_conditions.reduce((condition1, condition2) => x `${condition1} || ${condition2}`) : null;\n        let slot_update;\n        if (all_dirty_condition) {\n            const dirty = x `${all_dirty_condition} ? @get_all_dirty_from_scope(${renderer.reference('$$scope')}) : @get_slot_changes(${slot_definition}, ${renderer.reference('$$scope')}, #dirty, ${get_slot_changes_fn})`;\n            slot_update = b `\n\t\t\t\tif (${slot}.p && ${condition}) {\n\t\t\t\t\t@update_slot_base(${slot}, ${slot_definition}, #ctx, ${renderer.reference('$$scope')}, ${dirty}, ${get_slot_context_fn});\n\t\t\t\t}\n\t\t\t`;\n        }\n        else {\n            slot_update = b `\n\t\t\t\tif (${slot}.p && ${condition}) {\n\t\t\t\t\t@update_slot(${slot}, ${slot_definition}, #ctx, ${renderer.reference('$$scope')}, #dirty, ${get_slot_changes_fn}, ${get_slot_context_fn});\n\t\t\t\t}\n\t\t\t`;\n        }\n        let fallback_condition = renderer.dirty(fallback_dynamic_dependencies);\n        let fallback_dirty = x `#dirty`;\n        if (block.has_outros) {\n            fallback_condition = x `!#current || ${fallback_condition}`;\n            fallback_dirty = x `!#current ? ${renderer.get_initial_dirty()} : ${fallback_dirty}`;\n        }\n        const fallback_update = has_fallback && fallback_dynamic_dependencies.length > 0 && b `\n\t\t\tif (${slot_or_fallback} && ${slot_or_fallback}.p && ${fallback_condition}) {\n\t\t\t\t${slot_or_fallback}.p(#ctx, ${fallback_dirty});\n\t\t\t}\n\t\t`;\n        if (fallback_update) {\n            block.chunks.update.push(b `\n\t\t\t\tif (${slot}) {\n\t\t\t\t\t${slot_update}\n\t\t\t\t} else {\n\t\t\t\t\t${fallback_update}\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.chunks.update.push(b `\n\t\t\t\tif (${slot}) {\n\t\t\t\t\t${slot_update}\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.chunks.destroy.push(b `if (${slot_or_fallback}) ${slot_or_fallback}.d(detaching);`);\n    }\n    is_dependency_dynamic(name) {\n        if (name === '$$scope')\n            return true;\n        if (this.node.scope.is_let(name))\n            return true;\n        if (is_reserved_keyword(name))\n            return true;\n        const variable = this.renderer.component.var_lookup.get(name);\n        return is_dynamic(variable);\n    }\n}\n\nclass TitleWrapper extends Wrapper {\n    constructor(renderer, block, parent, node, _strip_whitespace, _next_sibling) {\n        super(renderer, block, parent, node);\n    }\n    render(block, _parent_node, _parent_nodes) {\n        const is_dynamic = !!this.node.children.find(node => node.type !== 'Text');\n        if (is_dynamic) {\n            let value;\n            const all_dependencies = new Set();\n            // TODO some of this code is repeated in Tag.ts — would be good to\n            // DRY it out if that's possible without introducing crazy indirection\n            if (this.node.children.length === 1) {\n                // single {tag} — may be a non-string\n                // @ts-ignore todo: check this\n                const { expression } = this.node.children[0];\n                value = expression.manipulate(block);\n                add_to_set(all_dependencies, expression.dependencies);\n            }\n            else {\n                // '{foo} {bar}' — treat as string concatenation\n                value = this.node.children\n                    .map(chunk => {\n                    if (chunk.type === 'Text')\n                        return string_literal(chunk.data);\n                    chunk.expression.dependencies.forEach(d => {\n                        all_dependencies.add(d);\n                    });\n                    return chunk.expression.manipulate(block);\n                })\n                    .reduce((lhs, rhs) => x `${lhs} + ${rhs}`);\n                if (this.node.children[0].type !== 'Text') {\n                    value = x `\"\" + ${value}`;\n                }\n            }\n            const last = this.node.should_cache && block.get_unique_name('title_value');\n            if (this.node.should_cache)\n                block.add_variable(last);\n            const init = this.node.should_cache ? x `${last} = ${value}` : value;\n            block.chunks.init.push(b `@_document.title = ${init};`);\n            const updater = b `@_document.title = ${this.node.should_cache ? last : value};`;\n            if (all_dependencies.size) {\n                const dependencies = Array.from(all_dependencies);\n                let condition = block.renderer.dirty(dependencies);\n                if (block.has_outros) {\n                    condition = x `!#current || ${condition}`;\n                }\n                if (this.node.should_cache) {\n                    condition = x `${condition} && (${last} !== (${last} = ${value}))`;\n                }\n                block.chunks.update.push(b `\n\t\t\t\t\tif (${condition}) {\n\t\t\t\t\t\t${updater}\n\t\t\t\t\t}`);\n            }\n        }\n        else {\n            const value = this.node.children.length > 0\n                ? string_literal(this.node.children[0].data)\n                : x `\"\"`;\n            block.chunks.hydrate.push(b `@_document.title = ${value};`);\n        }\n    }\n}\n\nconst associated_events = {\n    innerWidth: 'resize',\n    innerHeight: 'resize',\n    outerWidth: 'resize',\n    outerHeight: 'resize',\n    scrollX: 'scroll',\n    scrollY: 'scroll'\n};\nconst properties$1 = {\n    scrollX: 'pageXOffset',\n    scrollY: 'pageYOffset'\n};\nconst readonly = new Set([\n    'innerWidth',\n    'innerHeight',\n    'outerWidth',\n    'outerHeight',\n    'online'\n]);\nclass WindowWrapper extends Wrapper {\n    constructor(renderer, block, parent, node) {\n        super(renderer, block, parent, node);\n        this.handlers = this.node.handlers.map(handler => new EventHandlerWrapper(handler, this));\n    }\n    render(block, _parent_node, _parent_nodes) {\n        const { renderer } = this;\n        const { component } = renderer;\n        const events = {};\n        const bindings = {};\n        add_actions(block, '@_window', this.node.actions);\n        add_event_handlers(block, '@_window', this.handlers);\n        this.node.bindings.forEach(binding => {\n            // TODO: what if it's a MemberExpression?\n            const binding_name = binding.expression.node.name;\n            // in dev mode, throw if read-only values are written to\n            if (readonly.has(binding.name)) {\n                renderer.readonly.add(binding_name);\n            }\n            bindings[binding.name] = binding_name;\n            // bind:online is a special case, we need to listen for two separate events\n            if (binding.name === 'online')\n                return;\n            const associated_event = associated_events[binding.name];\n            const property = properties$1[binding.name] || binding.name;\n            if (!events[associated_event])\n                events[associated_event] = [];\n            events[associated_event].push({\n                name: binding_name,\n                value: property\n            });\n        });\n        const scrolling = block.get_unique_name('scrolling');\n        const clear_scrolling = block.get_unique_name('clear_scrolling');\n        const scrolling_timeout = block.get_unique_name('scrolling_timeout');\n        Object.keys(events).forEach(event => {\n            const id = block.get_unique_name(`onwindow${event}`);\n            const props = events[event];\n            renderer.add_to_context(id.name);\n            const fn = renderer.reference(id.name);\n            if (event === 'scroll') {\n                // TODO other bidirectional bindings...\n                block.add_variable(scrolling, x `false`);\n                block.add_variable(clear_scrolling, x `() => { ${scrolling} = false }`);\n                block.add_variable(scrolling_timeout);\n                const condition = bindings.scrollX && bindings.scrollY\n                    ? x `\"${bindings.scrollX}\" in this._state || \"${bindings.scrollY}\" in this._state`\n                    : x `\"${bindings.scrollX || bindings.scrollY}\" in this._state`;\n                const scrollX = bindings.scrollX && x `this._state.${bindings.scrollX}`;\n                const scrollY = bindings.scrollY && x `this._state.${bindings.scrollY}`;\n                renderer.meta_bindings.push(b `\n\t\t\t\t\tif (${condition}) {\n\t\t\t\t\t\t@_scrollTo(${scrollX || '@_window.pageXOffset'}, ${scrollY || '@_window.pageYOffset'});\n\t\t\t\t\t}\n\t\t\t\t\t${scrollX && `${scrollX} = @_window.pageXOffset;`}\n\t\t\t\t\t${scrollY && `${scrollY} = @_window.pageYOffset;`}\n\t\t\t\t`);\n                block.event_listeners.push(x `\n\t\t\t\t\t@listen(@_window, \"${event}\", () => {\n\t\t\t\t\t\t${scrolling} = true;\n\t\t\t\t\t\t@_clearTimeout(${scrolling_timeout});\n\t\t\t\t\t\t${scrolling_timeout} = @_setTimeout(${clear_scrolling}, 100);\n\t\t\t\t\t\t${fn}();\n\t\t\t\t\t})\n\t\t\t\t`);\n            }\n            else {\n                props.forEach(prop => {\n                    renderer.meta_bindings.push(b `this._state.${prop.name} = @_window.${prop.value};`);\n                });\n                block.event_listeners.push(x `\n\t\t\t\t\t@listen(@_window, \"${event}\", ${fn})\n\t\t\t\t`);\n            }\n            component.partly_hoisted.push(b `\n\t\t\t\tfunction ${id}() {\n\t\t\t\t\t${props.map(prop => renderer.invalidate(prop.name, x `${prop.name} = @_window.${prop.value}`))}\n\t\t\t\t}\n\t\t\t`);\n            block.chunks.init.push(b `\n\t\t\t\t@add_render_callback(${fn});\n\t\t\t`);\n            component.has_reactive_assignments = true;\n        });\n        // special case... might need to abstract this out if we add more special cases\n        if (bindings.scrollX || bindings.scrollY) {\n            const condition = renderer.dirty([bindings.scrollX, bindings.scrollY].filter(Boolean));\n            const scrollX = bindings.scrollX ? renderer.reference(bindings.scrollX) : x `@_window.pageXOffset`;\n            const scrollY = bindings.scrollY ? renderer.reference(bindings.scrollY) : x `@_window.pageYOffset`;\n            block.chunks.update.push(b `\n\t\t\t\tif (${condition} && !${scrolling}) {\n\t\t\t\t\t${scrolling} = true;\n\t\t\t\t\t@_clearTimeout(${scrolling_timeout});\n\t\t\t\t\t@_scrollTo(${scrollX}, ${scrollY});\n\t\t\t\t\t${scrolling_timeout} = @_setTimeout(${clear_scrolling}, 100);\n\t\t\t\t}\n\t\t\t`);\n        }\n        // another special case. (I'm starting to think these are all special cases.)\n        if (bindings.online) {\n            const id = block.get_unique_name('onlinestatuschanged');\n            const name = bindings.online;\n            renderer.add_to_context(id.name);\n            const reference = renderer.reference(id.name);\n            component.partly_hoisted.push(b `\n\t\t\t\tfunction ${id}() {\n\t\t\t\t\t${renderer.invalidate(name, x `${name} = @_navigator.onLine`)}\n\t\t\t\t}\n\t\t\t`);\n            block.chunks.init.push(b `\n\t\t\t\t@add_render_callback(${reference});\n\t\t\t`);\n            block.event_listeners.push(x `@listen(@_window, \"online\", ${reference})`, x `@listen(@_window, \"offline\", ${reference})`);\n            component.has_reactive_assignments = true;\n        }\n    }\n}\n\nfunction link(next, prev) {\n    prev.next = next;\n    if (next)\n        next.prev = prev;\n}\n\nconst wrappers = {\n    AwaitBlock: AwaitBlockWrapper,\n    Body: BodyWrapper,\n    Comment: null,\n    DebugTag: DebugTagWrapper,\n    EachBlock: EachBlockWrapper,\n    Element: ElementWrapper,\n    Head: HeadWrapper,\n    IfBlock: IfBlockWrapper,\n    InlineComponent: InlineComponentWrapper,\n    KeyBlock: KeyBlockWrapper,\n    MustacheTag: MustacheTagWrapper,\n    Options: null,\n    RawMustacheTag: RawMustacheTagWrapper,\n    Slot: SlotWrapper,\n    SlotTemplate: SlotTemplateWrapper,\n    Text: TextWrapper,\n    Title: TitleWrapper,\n    Window: WindowWrapper\n};\nfunction trimmable_at(child, next_sibling) {\n    // Whitespace is trimmable if one of the following is true:\n    // The child and its sibling share a common nearest each block (not at an each block boundary)\n    // The next sibling's previous node is an each block\n    return (next_sibling.node.find_nearest(/EachBlock/) === child.find_nearest(/EachBlock/)) || next_sibling.node.prev.type === 'EachBlock';\n}\nclass FragmentWrapper {\n    constructor(renderer, block, nodes, parent, strip_whitespace, next_sibling) {\n        this.nodes = [];\n        let last_child;\n        let window_wrapper;\n        let i = nodes.length;\n        while (i--) {\n            const child = nodes[i];\n            if (!child.type) {\n                throw new Error('missing type');\n            }\n            if (!(child.type in wrappers)) {\n                throw new Error(`TODO implement ${child.type}`);\n            }\n            // special case — this is an easy way to remove whitespace surrounding\n            // <svelte:window/>. lil hacky but it works\n            if (child.type === 'Window') {\n                window_wrapper = new WindowWrapper(renderer, block, parent, child);\n                continue;\n            }\n            if (child.type === 'Text') {\n                let { data } = child;\n                // We want to remove trailing whitespace inside an element/component/block,\n                // *unless* there is no whitespace between this node and its next sibling\n                if (this.nodes.length === 0) {\n                    const should_trim = (next_sibling ? (next_sibling.node.type === 'Text' && /^\\s/.test(next_sibling.node.data) && trimmable_at(child, next_sibling)) : !child.has_ancestor('EachBlock'));\n                    if (should_trim && !child.keep_space()) {\n                        data = trim_end(data);\n                        if (!data)\n                            continue;\n                    }\n                }\n                // glue text nodes (which could e.g. be separated by comments) together\n                if (last_child && last_child.node.type === 'Text') {\n                    last_child.data = data + last_child.data;\n                    continue;\n                }\n                const wrapper = new TextWrapper(renderer, block, parent, child, data);\n                if (wrapper.skip)\n                    continue;\n                this.nodes.unshift(wrapper);\n                link(last_child, last_child = wrapper);\n            }\n            else {\n                const Wrapper = wrappers[child.type];\n                if (!Wrapper)\n                    continue;\n                const wrapper = new Wrapper(renderer, block, parent, child, strip_whitespace, last_child || next_sibling);\n                this.nodes.unshift(wrapper);\n                link(last_child, last_child = wrapper);\n            }\n        }\n        if (strip_whitespace) {\n            const first = this.nodes[0];\n            if (first && first.node.type === 'Text' && !first.node.keep_space()) {\n                first.data = trim_start(first.data);\n                if (!first.data) {\n                    first.var = null;\n                    this.nodes.shift();\n                    if (this.nodes[0]) {\n                        this.nodes[0].prev = null;\n                    }\n                }\n            }\n        }\n        if (window_wrapper) {\n            this.nodes.unshift(window_wrapper);\n            link(last_child, window_wrapper);\n        }\n    }\n    render(block, parent_node, parent_nodes) {\n        for (let i = 0; i < this.nodes.length; i += 1) {\n            this.nodes[i].render(block, parent_node, parent_nodes);\n        }\n    }\n}\n\nclass Renderer {\n    constructor(component, options) {\n        this.context = [];\n        this.initial_context = [];\n        this.context_lookup = new Map();\n        this.blocks = [];\n        this.readonly = new Set();\n        this.meta_bindings = []; // initial values for e.g. window.innerWidth, if there's a <svelte:window> meta tag\n        this.binding_groups = new Map();\n        this.component = component;\n        this.options = options;\n        this.locate = component.locate; // TODO messy\n        this.file_var = options.dev && this.component.get_unique_name('file');\n        component.vars.filter(v => !v.hoistable || (v.export_name && !v.module)).forEach(v => this.add_to_context(v.name));\n        // ensure store values are included in context\n        component.vars.filter(v => v.subscribable).forEach(v => this.add_to_context(`$${v.name}`));\n        reserved_keywords.forEach(keyword => {\n            if (component.var_lookup.has(keyword)) {\n                this.add_to_context(keyword);\n            }\n        });\n        if (component.slots.size > 0) {\n            this.add_to_context('$$scope');\n            this.add_to_context('#slots');\n        }\n        if (this.binding_groups.size > 0) {\n            this.add_to_context('$$binding_groups');\n        }\n        // main block\n        this.block = new Block$1({\n            renderer: this,\n            name: null,\n            type: 'component',\n            key: null,\n            bindings: new Map(),\n            dependencies: new Set()\n        });\n        this.block.has_update_method = true;\n        this.fragment = new FragmentWrapper(this, this.block, component.fragment.children, null, true, null);\n        // TODO messy\n        this.blocks.forEach(block => {\n            if (block instanceof Block$1) {\n                block.assign_variable_names();\n            }\n        });\n        this.block.assign_variable_names();\n        this.fragment.render(this.block, null, x `#nodes`);\n        this.context_overflow = this.context.length > 31;\n        this.context.forEach(member => {\n            const { variable } = member;\n            if (variable) {\n                member.priority += 2;\n                if (variable.mutated || variable.reassigned)\n                    member.priority += 4;\n                // these determine whether variable is included in initial context\n                // array, so must have the highest priority\n                if (variable.is_reactive_dependency && (variable.mutated || variable.reassigned))\n                    member.priority += 16;\n                if (variable.export_name)\n                    member.priority += 32;\n                if (variable.referenced)\n                    member.priority += 64;\n            }\n            else if (member.is_non_contextual) {\n                // determine whether variable is included in initial context\n                // array, so must have the highest priority\n                member.priority += 8;\n            }\n            if (!member.is_contextual) {\n                member.priority += 1;\n            }\n        });\n        this.context.sort((a, b) => (b.priority - a.priority) || (a.index.value - b.index.value));\n        this.context.forEach((member, i) => member.index.value = i);\n        let i = this.context.length;\n        while (i--) {\n            const member = this.context[i];\n            if (member.variable) {\n                if (member.variable.referenced || member.variable.export_name || (member.variable.is_reactive_dependency && (member.variable.mutated || member.variable.reassigned)))\n                    break;\n            }\n            else if (member.is_non_contextual) {\n                break;\n            }\n        }\n        this.initial_context = this.context.slice(0, i + 1);\n    }\n    add_to_context(name, contextual = false) {\n        if (!this.context_lookup.has(name)) {\n            const member = {\n                name,\n                index: { type: 'Literal', value: this.context.length },\n                is_contextual: false,\n                is_non_contextual: false,\n                variable: null,\n                priority: 0\n            };\n            this.context_lookup.set(name, member);\n            this.context.push(member);\n        }\n        const member = this.context_lookup.get(name);\n        if (contextual) {\n            member.is_contextual = true;\n        }\n        else {\n            member.is_non_contextual = true;\n            member.variable = this.component.var_lookup.get(name);\n        }\n        return member;\n    }\n    invalidate(name, value, main_execution_context = false) {\n        return renderer_invalidate(this, name, value, main_execution_context);\n    }\n    dirty(names, is_reactive_declaration = false) {\n        const renderer = this;\n        const dirty = (is_reactive_declaration\n            ? x `$$self.$$.dirty`\n            : x `#dirty`);\n        const get_bitmask = () => {\n            const bitmask = [];\n            names.forEach((name) => {\n                const member = renderer.context_lookup.get(name);\n                if (!member)\n                    return;\n                if (member.index.value === -1) {\n                    throw new Error('unset index');\n                }\n                const value = member.index.value;\n                const i = (value / 31) | 0;\n                const n = 1 << (value % 31);\n                if (!bitmask[i])\n                    bitmask[i] = { n: 0, names: [] };\n                bitmask[i].n |= n;\n                bitmask[i].names.push(name);\n            });\n            return bitmask;\n        };\n        // TODO: context-overflow make it less gross\n        return {\n            // Using a ParenthesizedExpression allows us to create\n            // the expression lazily. TODO would be better if\n            // context was determined before rendering, so that\n            // this indirection was unnecessary\n            type: 'ParenthesizedExpression',\n            get expression() {\n                const bitmask = get_bitmask();\n                if (!bitmask.length) {\n                    return x `${dirty} & /*${names.join(', ')}*/ 0`;\n                }\n                if (renderer.context_overflow) {\n                    return bitmask\n                        .map((b, i) => ({ b, i }))\n                        .filter(({ b }) => b)\n                        .map(({ b, i }) => x `${dirty}[${i}] & /*${b.names.join(', ')}*/ ${b.n}`)\n                        .reduce((lhs, rhs) => x `${lhs} | ${rhs}`);\n                }\n                return x `${dirty} & /*${names.join(', ')}*/ ${bitmask[0].n}`;\n            }\n        };\n    }\n    // NOTE: this method may be called before this.context_overflow / this.context is fully defined\n    // therefore, they can only be evaluated later in a getter function\n    get_initial_dirty() {\n        const _this = this;\n        // TODO: context-overflow make it less gross\n        const val = x `-1`;\n        return {\n            get type() {\n                return _this.context_overflow ? 'ArrayExpression' : 'UnaryExpression';\n            },\n            // as [-1]\n            get elements() {\n                const elements = [];\n                for (let i = 0; i < _this.context.length; i += 31) {\n                    elements.push(val);\n                }\n                return elements;\n            },\n            // as -1\n            operator: val.operator,\n            prefix: val.prefix,\n            argument: val.argument\n        };\n    }\n    reference(node, ctx = '#ctx') {\n        if (typeof node === 'string') {\n            node = { type: 'Identifier', name: node };\n        }\n        const { name, nodes } = flatten_reference(node);\n        const member = this.context_lookup.get(name);\n        // TODO is this correct?\n        if (this.component.var_lookup.get(name)) {\n            this.component.add_reference(node, name);\n        }\n        if (member !== undefined) {\n            const replacement = x `/*${member.name}*/ ${ctx}[${member.index}]`;\n            if (nodes[0].loc)\n                replacement.object.loc = nodes[0].loc;\n            nodes[0] = replacement;\n            return nodes.reduce((lhs, rhs) => x `${lhs}.${rhs}`);\n        }\n        return node;\n    }\n    remove_block(block) {\n        this.blocks.splice(this.blocks.indexOf(block), 1);\n    }\n}\n\nvar charToInteger$1 = {};\nvar chars$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nfor (var i$2 = 0; i$2 < chars$1.length; i$2++) {\n    charToInteger$1[chars$1.charCodeAt(i$2)] = i$2;\n}\nfunction decode$1(mappings) {\n    var decoded = [];\n    var line = [];\n    var segment = [\n        0,\n        0,\n        0,\n        0,\n        0,\n    ];\n    var j = 0;\n    for (var i = 0, shift = 0, value = 0; i < mappings.length; i++) {\n        var c = mappings.charCodeAt(i);\n        if (c === 44) { // \",\"\n            segmentify$1(line, segment, j);\n            j = 0;\n        }\n        else if (c === 59) { // \";\"\n            segmentify$1(line, segment, j);\n            j = 0;\n            decoded.push(line);\n            line = [];\n            segment[0] = 0;\n        }\n        else {\n            var integer = charToInteger$1[c];\n            if (integer === undefined) {\n                throw new Error('Invalid character (' + String.fromCharCode(c) + ')');\n            }\n            var hasContinuationBit = integer & 32;\n            integer &= 31;\n            value += integer << shift;\n            if (hasContinuationBit) {\n                shift += 5;\n            }\n            else {\n                var shouldNegate = value & 1;\n                value >>>= 1;\n                if (shouldNegate) {\n                    value = value === 0 ? -0x80000000 : -value;\n                }\n                segment[j] += value;\n                j++;\n                value = shift = 0; // reset\n            }\n        }\n    }\n    segmentify$1(line, segment, j);\n    decoded.push(line);\n    return decoded;\n}\nfunction segmentify$1(line, segment, j) {\n    // This looks ugly, but we're creating specialized arrays with a specific\n    // length. This is much faster than creating a new array (which v8 expands to\n    // a capacity of 17 after pushing the first item), or slicing out a subarray\n    // (which is slow). Length 4 is assumed to be the most frequent, followed by\n    // length 5 (since not everything will have an associated name), followed by\n    // length 1 (it's probably rare for a source substring to not have an\n    // associated segment data).\n    if (j === 4)\n        line.push([segment[0], segment[1], segment[2], segment[3]]);\n    else if (j === 5)\n        line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);\n    else if (j === 1)\n        line.push([segment[0]]);\n}\nfunction encode$1(decoded) {\n    var sourceFileIndex = 0; // second field\n    var sourceCodeLine = 0; // third field\n    var sourceCodeColumn = 0; // fourth field\n    var nameIndex = 0; // fifth field\n    var mappings = '';\n    for (var i = 0; i < decoded.length; i++) {\n        var line = decoded[i];\n        if (i > 0)\n            mappings += ';';\n        if (line.length === 0)\n            continue;\n        var generatedCodeColumn = 0; // first field\n        var lineMappings = [];\n        for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {\n            var segment = line_1[_i];\n            var segmentMappings = encodeInteger$1(segment[0] - generatedCodeColumn);\n            generatedCodeColumn = segment[0];\n            if (segment.length > 1) {\n                segmentMappings +=\n                    encodeInteger$1(segment[1] - sourceFileIndex) +\n                        encodeInteger$1(segment[2] - sourceCodeLine) +\n                        encodeInteger$1(segment[3] - sourceCodeColumn);\n                sourceFileIndex = segment[1];\n                sourceCodeLine = segment[2];\n                sourceCodeColumn = segment[3];\n            }\n            if (segment.length === 5) {\n                segmentMappings += encodeInteger$1(segment[4] - nameIndex);\n                nameIndex = segment[4];\n            }\n            lineMappings.push(segmentMappings);\n        }\n        mappings += lineMappings.join(',');\n    }\n    return mappings;\n}\nfunction encodeInteger$1(num) {\n    var result = '';\n    num = num < 0 ? (-num << 1) | 1 : num << 1;\n    do {\n        var clamped = num & 31;\n        num >>>= 5;\n        if (num > 0) {\n            clamped |= 32;\n        }\n        result += chars$1[clamped];\n    } while (num > 0);\n    return result;\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Creates a brand new (prototype-less) object with the enumerable-own\n * properties of `target`. Any enumerable-own properties from `source` which\n * are not present on `target` will be copied as well.\n */\nfunction defaults(target, source) {\n    return Object.assign(Object.create(null), source, target);\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Decodes an input sourcemap into a `DecodedSourceMap` sourcemap object.\n *\n * Valid input maps include a `DecodedSourceMap`, a `RawSourceMap`, or JSON\n * representations of either type.\n */\nfunction decodeSourceMap(map) {\n    if (typeof map === 'string') {\n        map = JSON.parse(map);\n    }\n    let { mappings } = map;\n    if (typeof mappings === 'string') {\n        mappings = decode$1(mappings);\n    }\n    else {\n        // Clone the Line so that we can sort it. We don't want to mutate an array\n        // that we don't own directly.\n        mappings = mappings.map(cloneSegmentLine);\n    }\n    // Sort each Line's segments. There's no guarantee that segments are sorted for us,\n    // and even Chrome's implementation sorts:\n    // https://cs.chromium.org/chromium/src/third_party/devtools-frontend/src/front_end/sdk/SourceMap.js?l=507-508&rcl=109232bcf479c8f4ef8ead3cf56c49eb25f8c2f0\n    mappings.forEach(sortSegments);\n    return defaults({ mappings }, map);\n}\nfunction cloneSegmentLine(segments) {\n    return segments.slice();\n}\nfunction sortSegments(segments) {\n    segments.sort(segmentComparator);\n}\nfunction segmentComparator(a, b) {\n    return a[0] - b[0];\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A \"leaf\" node in the sourcemap tree, representing an original, unmodified\n * source file. Recursive segment tracing ends at the `OriginalSource`.\n */\nclass OriginalSource {\n    constructor(filename, content) {\n        this.filename = filename;\n        this.content = content;\n    }\n    /**\n     * Tracing a `SourceMapSegment` ends when we get to an `OriginalSource`,\n     * meaning this line/column location originated from this source file.\n     */\n    traceSegment(line, column, name) {\n        return { column, line, name, source: this };\n    }\n}\n\n/* istanbul ignore next */\nconst Url$1 = (typeof URL !== 'undefined' ? URL : require('url').URL);\n// Matches \"..\", which must be preceeded by \"/\" or the start of the string, and\n// must be followed by a \"/\". We do not eat the following \"/\", so that the next\n// iteration can match on it.\nconst parentRegex = /(^|\\/)\\.\\.(?=\\/|$)/g;\nfunction isAbsoluteUrl(url) {\n    try {\n        return !!new Url$1(url);\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * Creates a directory name that is guaranteed to not be in `str`.\n */\nfunction uniqInStr(str) {\n    let uniq = String(Math.random()).slice(2);\n    while (str.indexOf(uniq) > -1) {\n        /* istanbul ignore next */\n        uniq += uniq;\n    }\n    return uniq;\n}\n/**\n * Removes the filename from the path (everything trailing the last \"/\"). This\n * is only safe to call on a path, never call with an absolute or protocol\n * relative URL.\n */\nfunction stripPathFilename(path) {\n    path = normalizePath(path);\n    const index = path.lastIndexOf('/');\n    return path.slice(0, index + 1);\n}\n/**\n * Normalizes a protocol-relative URL, but keeps it protocol relative by\n * stripping out the protocl before returning it.\n */\nfunction normalizeProtocolRelative(input, absoluteBase) {\n    const { href, protocol } = new Url$1(input, absoluteBase);\n    return href.slice(protocol.length);\n}\n/**\n * Normalizes a simple path (one that has no \"..\"s, or is absolute so \"..\"s can\n * be normalized absolutely).\n */\nfunction normalizeSimplePath(input) {\n    const { href } = new Url$1(input, 'https://foo.com/');\n    return href.slice('https://foo.com/'.length);\n}\n/**\n * Normalizes a path, ensuring that excess \"..\"s are preserved for relative\n * paths in the output.\n *\n * If the input is absolute, this will return an absolutey normalized path, but\n * it will not have a leading \"/\".\n *\n * If the input has a leading \"..\", the output will have a leading \"..\".\n *\n * If the input has a leading \".\", the output will not have a leading \".\"\n * unless there are too many \"..\"s, in which case there will be a leading \"..\".\n */\nfunction normalizePath(input) {\n    // If there are no \"..\"s, we can treat this as if it were an absolute path.\n    // The return won't be an absolute path, so it's easy.\n    if (!parentRegex.test(input))\n        return normalizeSimplePath(input);\n    // We already found one \"..\". Let's see how many there are.\n    let total = 1;\n    while (parentRegex.test(input))\n        total++;\n    // If there are \"..\"s, we need to prefix the the path with the same number of\n    // unique directories. This is to ensure that we \"remember\" how many parent\n    // directories we are accessing. Eg, \"../../..\" must keep 3, and \"foo/../..\"\n    // must keep 1.\n    const uniqDirectory = `z${uniqInStr(input)}/`;\n    // uniqDirectory is just a \"z\", followed by numbers, followed by a \"/\". So\n    // generating a runtime regex from it is safe. We'll use this search regex to\n    // strip out our uniq directory names and insert any needed \"..\"s.\n    const search = new RegExp(`^(?:${uniqDirectory})*`);\n    // Now we can resolve the total path. If there are excess \"..\"s, they will\n    // eliminate one or more of the unique directories we prefix with.\n    const relative = normalizeSimplePath(uniqDirectory.repeat(total) + input);\n    // We can now count the number of unique directories that were eliminated. If\n    // there were 3, and 1 was eliminated, we know we only need to add 1 \"..\". If\n    // 2 were eliminated, we need to insert 2 \"..\"s. If all 3 were eliminated,\n    // then we need 3, etc. This replace is guranteed to match (it may match 0 or\n    // more times), and we can count the total match to see how many were eliminated.\n    return relative.replace(search, (all) => {\n        const leftover = all.length / uniqDirectory.length;\n        return '../'.repeat(total - leftover);\n    });\n}\n/**\n * Attempts to resolve `input` URL relative to `base`.\n */\nfunction resolve(input, base) {\n    if (!base)\n        base = '';\n    // Absolute URLs are very easy to resolve right.\n    if (isAbsoluteUrl(input))\n        return new Url$1(input).href;\n    if (base) {\n        // Absolute URLs are easy...\n        if (isAbsoluteUrl(base))\n            return new Url$1(input, base).href;\n        // If base is protocol relative, we'll resolve with it but keep the result\n        // protocol relative.\n        if (base.startsWith('//'))\n            return normalizeProtocolRelative(input, `https:${base}`);\n    }\n    // Normalize input, but keep it protocol relative. We know base doesn't supply\n    // a protocol, because that would have been handled above.\n    if (input.startsWith('//'))\n        return normalizeProtocolRelative(input, 'https://foo.com/');\n    // We now know that base (if there is one) and input are paths. We've handled\n    // both absolute and protocol-relative variations above.\n    // Absolute paths don't need any special handling, because they cannot have\n    // extra \".\" or \"..\"s. That'll all be stripped away. Input takes priority here,\n    // because if input is an absolute path, base path won't affect it in any way.\n    if (input.startsWith('/'))\n        return '/' + normalizeSimplePath(input);\n    // Since input and base are paths, we need to join them to do any further\n    // processing. Paths are joined at the directory level, so we need to remove\n    // the base's filename before joining. We also know that input does not have a\n    // leading slash, and that the stripped base will have a trailing slash if\n    // there are any directories (or it'll be empty).\n    const joined = stripPathFilename(base) + input;\n    // If base is an absolute path, then input will be relative to it.\n    if (base.startsWith('/'))\n        return '/' + normalizeSimplePath(joined);\n    // We now know both base (if there is one) and input are relative paths.\n    const relative = normalizePath(joined);\n    // If base started with a leading \".\", or there is no base and input started\n    // with a \".\", then we need to ensure that the relative path starts with a\n    // \".\". We don't know if relative starts with a \"..\", though, so check before\n    // prepending.\n    if ((base || input).startsWith('.') && !relative.startsWith('.')) {\n        return './' + relative;\n    }\n    return relative;\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction resolve$1(input, base) {\n    // The base is always treated as a directory, if it's not empty.\n    // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n    // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n    if (base && !base.endsWith('/'))\n        base += '/';\n    return resolve(input, base);\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A binary search implementation that returns the index if a match is found,\n * or the negated index of where the `needle` should be inserted.\n *\n * The `comparator` callback receives both the `item` under comparison and the\n * needle we are searching for. It must return `0` if the `item` is a match,\n * any negative number if `item` is too small (and we must search after it), or\n * any positive number if the `item` is too large (and we must search before\n * it).\n *\n * If no match is found, a negated index of where to insert the `needle` is\n * returned. This negated index is guaranteed to be less than 0. To insert an\n * item, negate it (again) and splice:\n *\n * ```js\n * const array = [1, 3];\n * const needle = 2;\n * const index = binarySearch(array, needle, (item, needle) => item - needle);\n *\n * assert.equal(index, -2);\n * assert.equal(~index, 1);\n * array.splice(~index, 0, needle);\n * assert.deepEqual(array, [1, 2, 3]);\n * ```\n */\nfunction binarySearch(haystack, needle, comparator) {\n    let low = 0;\n    let high = haystack.length - 1;\n    while (low <= high) {\n        const mid = low + ((high - low) >> 1);\n        const cmp = comparator(haystack[mid], needle);\n        if (cmp === 0) {\n            return mid;\n        }\n        if (cmp < 0) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ~low;\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * FastStringArray acts like a `Set` (allowing only one occurrence of a string\n * `key`), but provides the index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of\n * the backing array, like how `sourcesContent[i]` is the source content\n * associated with `source[i]`, and there are never duplicates.\n */\nclass FastStringArray {\n    constructor() {\n        this.indexes = Object.create(null);\n        this.array = [];\n    }\n    /**\n     * Puts `key` into the backing array, if it is not already present. Returns\n     * the index of the `key` in the backing array.\n     */\n    put(key) {\n        const { array, indexes } = this;\n        // The key may or may not be present. If it is present, it's a number.\n        let index = indexes[key];\n        // If it's not yet present, we need to insert it and track the index in the\n        // indexes.\n        if (index === undefined) {\n            index = indexes[key] = array.length;\n            array.push(key);\n        }\n        return index;\n    }\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SourceMapTree represents a single sourcemap, with the ability to trace\n * mappings into its child nodes (which may themselves be SourceMapTrees).\n */\nclass SourceMapTree {\n    constructor(map, sources) {\n        this.map = map;\n        this.sources = sources;\n    }\n    /**\n     * traceMappings is only called on the root level SourceMapTree, and begins\n     * the process of resolving each mapping in terms of the original source\n     * files.\n     */\n    traceMappings() {\n        const mappings = [];\n        const names = new FastStringArray();\n        const sources = new FastStringArray();\n        const sourcesContent = [];\n        const { mappings: rootMappings, names: rootNames } = this.map;\n        for (let i = 0; i < rootMappings.length; i++) {\n            const segments = rootMappings[i];\n            const tracedSegments = [];\n            for (let j = 0; j < segments.length; j++) {\n                const segment = segments[j];\n                // 1-length segments only move the current generated column, there's no\n                // source information to gather from it.\n                if (segment.length === 1)\n                    continue;\n                const source = this.sources[segment[1]];\n                const traced = source.traceSegment(segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : '');\n                if (!traced)\n                    continue;\n                // So we traced a segment down into its original source file. Now push a\n                // new segment pointing to this location.\n                const { column, line, name } = traced;\n                const { content, filename } = traced.source;\n                // Store the source location, and ensure we keep sourcesContent up to\n                // date with the sources array.\n                const sourceIndex = sources.put(filename);\n                sourcesContent[sourceIndex] = content;\n                // This looks like unnecessary duplication, but it noticeably increases\n                // performance. If we were to push the nameIndex onto length-4 array, v8\n                // would internally allocate 22 slots! That's 68 wasted bytes! Array\n                // literals have the same capacity as their length, saving memory.\n                if (name) {\n                    tracedSegments.push([segment[0], sourceIndex, line, column, names.put(name)]);\n                }\n                else {\n                    tracedSegments.push([segment[0], sourceIndex, line, column]);\n                }\n            }\n            mappings.push(tracedSegments);\n        }\n        // TODO: Make all sources relative to the sourceRoot.\n        return defaults({\n            mappings,\n            names: names.array,\n            sources: sources.array,\n            sourcesContent,\n        }, this.map);\n    }\n    /**\n     * traceSegment is only called on children SourceMapTrees. It recurses down\n     * into its own child SourceMapTrees, until we find the original source map.\n     */\n    traceSegment(line, column, name) {\n        const { mappings, names } = this.map;\n        // It's common for parent sourcemaps to have pointers to lines that have no\n        // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n        if (line >= mappings.length)\n            return null;\n        const segments = mappings[line];\n        if (segments.length === 0)\n            return null;\n        let index = binarySearch(segments, column, segmentComparator$1);\n        if (index === -1)\n            return null; // we come before any mapped segment\n        // If we can't find a segment that lines up to this column, we use the\n        // segment before.\n        if (index < 0) {\n            index = ~index - 1;\n        }\n        const segment = segments[index];\n        // 1-length segments only move the current generated column, there's no\n        // source information to gather from it.\n        if (segment.length === 1)\n            return null;\n        const source = this.sources[segment[1]];\n        // So now we can recurse down, until we hit the original source file.\n        return source.traceSegment(segment[2], segment[3], \n        // A child map's recorded name for this segment takes precedence over the\n        // parent's mapped name. Imagine a mangler changing the name over, etc.\n        segment.length === 5 ? names[segment[4]] : name);\n    }\n}\nfunction segmentComparator$1(segment, column) {\n    return segment[0] - column;\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Removes the filename from a path.\n */\nfunction stripFilename(path) {\n    if (!path)\n        return '';\n    const index = path.lastIndexOf('/');\n    return path.slice(0, index + 1);\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction asArray(value) {\n    if (Array.isArray(value))\n        return value;\n    return [value];\n}\n/**\n * Recursively builds a tree structure out of sourcemap files, with each node\n * being either an `OriginalSource` \"leaf\" or a `SourceMapTree` composed of\n * `OriginalSource`s and `SourceMapTree`s.\n *\n * Every sourcemap is composed of a collection of source files and mappings\n * into locations of those source files. When we generate a `SourceMapTree` for\n * the sourcemap, we attempt to load each source file's own sourcemap. If it\n * does not have an associated sourcemap, it is considered an original,\n * unmodified source file.\n */\nfunction buildSourceMapTree(input, loader, relativeRoot) {\n    const maps = asArray(input).map(decodeSourceMap);\n    const map = maps.pop();\n    for (let i = 0; i < maps.length; i++) {\n        if (maps[i].sources.length !== 1) {\n            throw new Error(`Transformation map ${i} must have exactly one source file.\\n` +\n                'Did you specify these with the most recent transformation maps first?');\n        }\n    }\n    const { sourceRoot, sources, sourcesContent } = map;\n    const children = sources.map((sourceFile, i) => {\n        // Each source file is loaded relative to the sourcemap's own sourceRoot,\n        // which is itself relative to the sourcemap's parent.\n        const uri = resolve$1(sourceFile || '', resolve$1(sourceRoot || '', stripFilename(relativeRoot)));\n        // Use the provided loader callback to retrieve the file's sourcemap.\n        // TODO: We should eventually support async loading of sourcemap files.\n        const sourceMap = loader(uri);\n        // If there is no sourcemap, then it is an unmodified source file.\n        if (!sourceMap) {\n            // The source file's actual contents must be included in the sourcemap\n            // (done when generating the sourcemap) for it to be included as a\n            // sourceContent in the output sourcemap.\n            const sourceContent = sourcesContent ? sourcesContent[i] : null;\n            return new OriginalSource(uri, sourceContent);\n        }\n        // Else, it's a real sourcemap, and we need to recurse into it to load its\n        // source files.\n        return buildSourceMapTree(decodeSourceMap(sourceMap), loader, uri);\n    });\n    let tree = new SourceMapTree(map, children);\n    for (let i = maps.length - 1; i >= 0; i--) {\n        tree = new SourceMapTree(maps[i], [tree]);\n    }\n    return tree;\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A SourceMap v3 compatible sourcemap, which only includes fields that were\n * provided to it.\n */\nclass SourceMap {\n    constructor(map, excludeContent) {\n        this.version = 3; // SourceMap spec says this should be first.\n        if ('file' in map)\n            this.file = map.file;\n        this.mappings = encode$1(map.mappings);\n        this.names = map.names;\n        // TODO: We first need to make all source URIs relative to the sourceRoot\n        // before we can support a sourceRoot.\n        // if ('sourceRoot' in map) this.sourceRoot = map.sourceRoot;\n        this.sources = map.sources;\n        if (!excludeContent && 'sourcesContent' in map)\n            this.sourcesContent = map.sourcesContent;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n}\n\n/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Traces through all the mappings in the root sourcemap, through the sources\n * (and their sourcemaps), all the way back to the original source location.\n *\n * `loader` will be called every time we encounter a source file. If it returns\n * a sourcemap, we will recurse into that sourcemap to continue the trace. If\n * it returns a falsey value, that source file is treated as an original,\n * unmodified source file.\n *\n * Pass `excludeContent` content to exclude any self-containing source file\n * content from the output sourcemap.\n */\nfunction remapping(input, loader, excludeContent) {\n    const graph = buildSourceMapTree(input, loader);\n    return new SourceMap(graph.traceMappings(), !!excludeContent);\n}\n\nfunction last_line_length(s) {\n    return s.length - s.lastIndexOf('\\n') - 1;\n}\n// mutate map in-place\nfunction sourcemap_add_offset(map, offset, source_index) {\n    if (map.mappings.length == 0)\n        return;\n    for (let line = 0; line < map.mappings.length; line++) {\n        const segment_list = map.mappings[line];\n        for (let segment = 0; segment < segment_list.length; segment++) {\n            const seg = segment_list[segment];\n            // shift only segments that belong to component source file\n            if (seg[1] === source_index) { // also ensures that seg.length >= 4\n                // shift column if it points at the first line\n                if (seg[2] === 0) {\n                    seg[3] += offset.column;\n                }\n                // shift line\n                seg[2] += offset.line;\n            }\n        }\n    }\n}\nfunction merge_tables(this_table, other_table) {\n    const new_table = this_table.slice();\n    const idx_map = [];\n    other_table = other_table || [];\n    let val_changed = false;\n    for (const [other_idx, other_val] of other_table.entries()) {\n        const this_idx = this_table.indexOf(other_val);\n        if (this_idx >= 0) {\n            idx_map[other_idx] = this_idx;\n        }\n        else {\n            const new_idx = new_table.length;\n            new_table[new_idx] = other_val;\n            idx_map[other_idx] = new_idx;\n            val_changed = true;\n        }\n    }\n    let idx_changed = val_changed;\n    if (val_changed) {\n        if (idx_map.find((val, idx) => val != idx) === undefined) {\n            // idx_map is identity map [0, 1, 2, 3, 4, ....]\n            idx_changed = false;\n        }\n    }\n    return [new_table, idx_map, val_changed, idx_changed];\n}\nclass MappedCode {\n    constructor(string = '', map = null) {\n        this.string = string;\n        if (map) {\n            this.map = map;\n        }\n        else {\n            this.map = {\n                version: 3,\n                mappings: [],\n                sources: [],\n                names: []\n            };\n        }\n    }\n    /**\n     * concat in-place (mutable), return this (chainable)\n     * will also mutate the `other` object\n     */\n    concat(other) {\n        // noop: if one is empty, return the other\n        if (other.string == '')\n            return this;\n        if (this.string == '') {\n            this.string = other.string;\n            this.map = other.map;\n            return this;\n        }\n        // compute last line length before mutating\n        const column_offset = last_line_length(this.string);\n        this.string += other.string;\n        const m1 = this.map;\n        const m2 = other.map;\n        if (m2.mappings.length == 0)\n            return this;\n        // combine sources and names\n        const [sources, new_source_idx, sources_changed, sources_idx_changed] = merge_tables(m1.sources, m2.sources);\n        const [names, new_name_idx, names_changed, names_idx_changed] = merge_tables(m1.names, m2.names);\n        if (sources_changed)\n            m1.sources = sources;\n        if (names_changed)\n            m1.names = names;\n        // unswitched loops are faster\n        if (sources_idx_changed && names_idx_changed) {\n            for (let line = 0; line < m2.mappings.length; line++) {\n                const segment_list = m2.mappings[line];\n                for (let segment = 0; segment < segment_list.length; segment++) {\n                    const seg = segment_list[segment];\n                    if (seg[1] >= 0)\n                        seg[1] = new_source_idx[seg[1]];\n                    if (seg[4] >= 0)\n                        seg[4] = new_name_idx[seg[4]];\n                }\n            }\n        }\n        else if (sources_idx_changed) {\n            for (let line = 0; line < m2.mappings.length; line++) {\n                const segment_list = m2.mappings[line];\n                for (let segment = 0; segment < segment_list.length; segment++) {\n                    const seg = segment_list[segment];\n                    if (seg[1] >= 0)\n                        seg[1] = new_source_idx[seg[1]];\n                }\n            }\n        }\n        else if (names_idx_changed) {\n            for (let line = 0; line < m2.mappings.length; line++) {\n                const segment_list = m2.mappings[line];\n                for (let segment = 0; segment < segment_list.length; segment++) {\n                    const seg = segment_list[segment];\n                    if (seg[4] >= 0)\n                        seg[4] = new_name_idx[seg[4]];\n                }\n            }\n        }\n        // combine the mappings\n        // combine\n        // 1. last line of first map\n        // 2. first line of second map\n        // columns of 2 must be shifted\n        if (m2.mappings.length > 0 && column_offset > 0) {\n            const first_line = m2.mappings[0];\n            for (let i = 0; i < first_line.length; i++) {\n                first_line[i][0] += column_offset;\n            }\n        }\n        // combine last line + first line\n        push_array$1(m1.mappings[m1.mappings.length - 1], m2.mappings.shift());\n        // append other lines\n        push_array$1(m1.mappings, m2.mappings);\n        return this;\n    }\n    static from_processed(string, map) {\n        const line_count = string.split('\\n').length;\n        if (map) {\n            // ensure that count of source map mappings lines\n            // is equal to count of generated code lines\n            // (some tools may produce less)\n            const missing_lines = line_count - map.mappings.length;\n            for (let i = 0; i < missing_lines; i++) {\n                map.mappings.push([]);\n            }\n            return new MappedCode(string, map);\n        }\n        if (string == '')\n            return new MappedCode();\n        map = { version: 3, names: [], sources: [], mappings: [] };\n        // add empty SourceMapSegment[] for every line\n        for (let i = 0; i < line_count; i++)\n            map.mappings.push([]);\n        return new MappedCode(string, map);\n    }\n    static from_source({ source, file_basename, get_location }) {\n        let offset = get_location(0);\n        if (!offset)\n            offset = { line: 0, column: 0 };\n        const map = { version: 3, names: [], sources: [file_basename], mappings: [] };\n        if (source == '')\n            return new MappedCode(source, map);\n        // we create a high resolution identity map here,\n        // we know that it will eventually be merged with svelte's map,\n        // at which stage the resolution will decrease.\n        const line_list = source.split('\\n');\n        for (let line = 0; line < line_list.length; line++) {\n            map.mappings.push([]);\n            const token_list = line_list[line].split(/([^\\d\\w\\s]|\\s+)/g);\n            for (let token = 0, column = 0; token < token_list.length; token++) {\n                if (token_list[token] == '')\n                    continue;\n                map.mappings[line].push([column, 0, offset.line + line, column]);\n                column += token_list[token].length;\n            }\n        }\n        // shift columns in first line\n        const segment_list = map.mappings[0];\n        for (let segment = 0; segment < segment_list.length; segment++) {\n            segment_list[segment][3] += offset.column;\n        }\n        return new MappedCode(source, map);\n    }\n}\nfunction combine_sourcemaps(filename, sourcemap_list) {\n    if (sourcemap_list.length == 0)\n        return null;\n    let map_idx = 1;\n    const map = sourcemap_list.slice(0, -1)\n        .find(m => m.sources.length !== 1) === undefined\n        ? remapping(// use array interface\n        // only the oldest sourcemap can have multiple sources\n        sourcemap_list, () => null, true // skip optional field `sourcesContent`\n        )\n        : remapping(// use loader interface\n        sourcemap_list[0], // last map\n        function loader(sourcefile) {\n            if (sourcefile === filename && sourcemap_list[map_idx]) {\n                return sourcemap_list[map_idx++]; // idx 1, 2, ...\n                // bundle file = branch node\n            }\n            else {\n                return null; // source file = leaf node\n            }\n        }, true);\n    if (!map.file)\n        delete map.file; // skip optional field `file`\n    // When source maps are combined and the leading map is empty, sources is not set.\n    // Add the filename to the empty array in this case. \n    // Further improvements to remapping may help address this as well https://github.com/ampproject/remapping/issues/116\n    if (!map.sources.length)\n        map.sources = [filename];\n    return map;\n}\n// browser vs node.js\nconst b64enc = typeof btoa == 'function' ? btoa : b => Buffer.from(b).toString('base64');\nconst b64dec = typeof atob == 'function' ? atob : a => Buffer.from(a, 'base64').toString();\nfunction apply_preprocessor_sourcemap(filename, svelte_map, preprocessor_map_input) {\n    if (!svelte_map || !preprocessor_map_input)\n        return svelte_map;\n    const preprocessor_map = typeof preprocessor_map_input === 'string' ? JSON.parse(preprocessor_map_input) : preprocessor_map_input;\n    const result_map = combine_sourcemaps(filename, [\n        svelte_map,\n        preprocessor_map\n    ]);\n    // Svelte expects a SourceMap which includes toUrl and toString. Instead of wrapping our output in a class,\n    // we just tack on the extra properties.\n    Object.defineProperties(result_map, {\n        toString: {\n            enumerable: false,\n            value: function toString() {\n                return JSON.stringify(this);\n            }\n        },\n        toUrl: {\n            enumerable: false,\n            value: function toUrl() {\n                return 'data:application/json;charset=utf-8;base64,' + b64enc(this.toString());\n            }\n        }\n    });\n    return result_map;\n}\n// parse attached sourcemap in processed.code\nfunction parse_attached_sourcemap(processed, tag_name) {\n    const r_in = '[#@]\\\\s*sourceMappingURL\\\\s*=\\\\s*(\\\\S*)';\n    const regex = (tag_name == 'script')\n        ? new RegExp('(?://' + r_in + ')|(?:/\\\\*' + r_in + '\\\\s*\\\\*/)$')\n        : new RegExp('/\\\\*' + r_in + '\\\\s*\\\\*/$');\n    function log_warning(message) {\n        // code_start: help to find preprocessor\n        const code_start = processed.code.length < 100 ? processed.code : (processed.code.slice(0, 100) + ' [...]');\n        console.warn(`warning: ${message}. processed.code = ${JSON.stringify(code_start)}`);\n    }\n    processed.code = processed.code.replace(regex, (_, match1, match2) => {\n        const map_url = (tag_name == 'script') ? (match1 || match2) : match1;\n        const map_data = (map_url.match(/data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(\\S*)/) || [])[1];\n        if (map_data) {\n            // sourceMappingURL is data URL\n            if (processed.map) {\n                log_warning('Not implemented. ' +\n                    'Found sourcemap in both processed.code and processed.map. ' +\n                    'Please update your preprocessor to return only one sourcemap.');\n                // ignore attached sourcemap\n                return '';\n            }\n            processed.map = b64dec(map_data); // use attached sourcemap\n            return ''; // remove from processed.code\n        }\n        // sourceMappingURL is path or URL\n        if (!processed.map) {\n            log_warning(`Found sourcemap path ${JSON.stringify(map_url)} in processed.code, but no sourcemap data. ` +\n                'Please update your preprocessor to return sourcemap data directly.');\n        }\n        // ignore sourcemap path\n        return ''; // remove from processed.code\n    });\n}\n\nfunction check_enable_sourcemap(enable_sourcemap, namespace) {\n    return typeof enable_sourcemap === 'boolean'\n        ? enable_sourcemap\n        : enable_sourcemap[namespace];\n}\n\nfunction dom(component, options) {\n    const { name } = component;\n    const renderer = new Renderer(component, options);\n    const { block } = renderer;\n    block.has_outro_method = true;\n    // prevent fragment being created twice (#1063)\n    if (options.customElement)\n        block.chunks.create.push(b `this.c = @noop;`);\n    const body = [];\n    if (renderer.file_var) {\n        const file = component.file ? x `\"${component.file}\"` : x `undefined`;\n        body.push(b `const ${renderer.file_var} = ${file};`);\n    }\n    const css = component.stylesheet.render(options.filename, !options.customElement);\n    const css_sourcemap_enabled = check_enable_sourcemap(options.enableSourcemap, 'css');\n    if (css_sourcemap_enabled) {\n        css.map = apply_preprocessor_sourcemap(options.filename, css.map, options.sourcemap);\n    }\n    else {\n        css.map = null;\n    }\n    const styles = css_sourcemap_enabled && component.stylesheet.has_styles && options.dev\n        ? `${css.code}\\n/*# sourceMappingURL=${css.map.toUrl()} */`\n        : css.code;\n    const add_css = component.get_unique_name('add_css');\n    const should_add_css = (!options.customElement &&\n        !!styles &&\n        options.css !== false);\n    if (should_add_css) {\n        body.push(b `\n\t\t\tfunction ${add_css}(target) {\n\t\t\t\t@append_styles(target, \"${component.stylesheet.id}\", \"${styles}\");\n\t\t\t}\n\t\t`);\n    }\n    // fix order\n    // TODO the deconflicted names of blocks are reversed... should set them here\n    const blocks = renderer.blocks.slice().reverse();\n    push_array$1(body, blocks.map(block => {\n        // TODO this is a horrible mess — renderer.blocks\n        // contains a mixture of Blocks and Nodes\n        if (block.render)\n            return block.render();\n        return block;\n    }));\n    if (options.dev && !options.hydratable) {\n        block.chunks.claim.push(b `throw new @_Error(\"options.hydrate only works if the component was compiled with the \\`hydratable: true\\` option\");`);\n    }\n    const uses_slots = component.var_lookup.has('$$slots');\n    let compute_slots;\n    if (uses_slots) {\n        compute_slots = b `\n\t\t\tconst $$slots = @compute_slots(#slots);\n\t\t`;\n    }\n    const uses_props = component.var_lookup.has('$$props');\n    const uses_rest = component.var_lookup.has('$$restProps');\n    const $$props = uses_props || uses_rest ? '$$new_props' : '$$props';\n    const props = component.vars.filter(variable => !variable.module && variable.export_name);\n    const writable_props = props.filter(variable => variable.writable);\n    const omit_props_names = component.get_unique_name('omit_props_names');\n    const compute_rest = x `@compute_rest_props($$props, ${omit_props_names.name})`;\n    const rest = uses_rest ? b `\n\t\tconst ${omit_props_names.name} = [${props.map(prop => `\"${prop.export_name}\"`).join(',')}];\n\t\tlet $$restProps = ${compute_rest};\n\t` : null;\n    const set = (uses_props || uses_rest || writable_props.length > 0 || component.slots.size > 0)\n        ? x `\n\t\t\t${$$props} => {\n\t\t\t\t${uses_props && renderer.invalidate('$$props', x `$$props = @assign(@assign({}, $$props), @exclude_internal_props($$new_props))`)}\n\t\t\t\t${uses_rest && !uses_props && x `$$props = @assign(@assign({}, $$props), @exclude_internal_props($$new_props))`}\n\t\t\t\t${uses_rest && renderer.invalidate('$$restProps', x `$$restProps = ${compute_rest}`)}\n\t\t\t\t${writable_props.map(prop => b `if ('${prop.export_name}' in ${$$props}) ${renderer.invalidate(prop.name, x `${prop.name} = ${$$props}.${prop.export_name}`)};`)}\n\t\t\t\t${component.slots.size > 0 &&\n            b `if ('$$scope' in ${$$props}) ${renderer.invalidate('$$scope', x `$$scope = ${$$props}.$$scope`)};`}\n\t\t\t}\n\t\t`\n        : null;\n    const accessors = [];\n    const not_equal = component.component_options.immutable ? x `@not_equal` : x `@safe_not_equal`;\n    let dev_props_check;\n    let inject_state;\n    let capture_state;\n    let props_inject;\n    props.forEach(prop => {\n        const variable = component.var_lookup.get(prop.name);\n        if (!variable.writable || component.component_options.accessors) {\n            accessors.push({\n                type: 'MethodDefinition',\n                kind: 'get',\n                key: { type: 'Identifier', name: prop.export_name },\n                value: x `function() {\n\t\t\t\t\treturn ${prop.hoistable ? prop.name : x `this.$$.ctx[${renderer.context_lookup.get(prop.name).index}]`}\n\t\t\t\t}`\n            });\n        }\n        else if (component.compile_options.dev) {\n            accessors.push({\n                type: 'MethodDefinition',\n                kind: 'get',\n                key: { type: 'Identifier', name: prop.export_name },\n                value: x `function() {\n\t\t\t\t\tthrow new @_Error(\"<${component.tag}>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n\t\t\t\t}`\n            });\n        }\n        if (component.component_options.accessors) {\n            if (variable.writable && !renderer.readonly.has(prop.name)) {\n                accessors.push({\n                    type: 'MethodDefinition',\n                    kind: 'set',\n                    key: { type: 'Identifier', name: prop.export_name },\n                    value: x `function(${prop.name}) {\n\t\t\t\t\t\tthis.$$set({ ${prop.export_name}: ${prop.name} });\n\t\t\t\t\t\t@flush();\n\t\t\t\t\t}`\n                });\n            }\n            else if (component.compile_options.dev) {\n                accessors.push({\n                    type: 'MethodDefinition',\n                    kind: 'set',\n                    key: { type: 'Identifier', name: prop.export_name },\n                    value: x `function(value) {\n\t\t\t\t\t\tthrow new @_Error(\"<${component.tag}>: Cannot set read-only property '${prop.export_name}'\");\n\t\t\t\t\t}`\n                });\n            }\n        }\n        else if (component.compile_options.dev) {\n            accessors.push({\n                type: 'MethodDefinition',\n                kind: 'set',\n                key: { type: 'Identifier', name: prop.export_name },\n                value: x `function(value) {\n\t\t\t\t\tthrow new @_Error(\"<${component.tag}>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n\t\t\t\t}`\n            });\n        }\n    });\n    component.instance_exports_from.forEach(exports_from => {\n        const import_declaration = Object.assign(Object.assign({}, exports_from), { type: 'ImportDeclaration', specifiers: [], source: exports_from.source });\n        component.imports.push(import_declaration);\n        exports_from.specifiers.forEach(specifier => {\n            if (component.component_options.accessors) {\n                const name = component.get_unique_name(specifier.exported.name);\n                import_declaration.specifiers.push(Object.assign(Object.assign({}, specifier), { type: 'ImportSpecifier', imported: specifier.local, local: name }));\n                accessors.push({\n                    type: 'MethodDefinition',\n                    kind: 'get',\n                    key: { type: 'Identifier', name: specifier.exported.name },\n                    value: x `function() {\n\t\t\t\t\t\treturn ${name}\n\t\t\t\t\t}`\n                });\n            }\n            else if (component.compile_options.dev) {\n                accessors.push({\n                    type: 'MethodDefinition',\n                    kind: 'get',\n                    key: { type: 'Identifier', name: specifier.exported.name },\n                    value: x `function() {\n\t\t\t\t\t\tthrow new @_Error(\"<${component.tag}>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n\t\t\t\t\t}`\n                });\n            }\n        });\n    });\n    if (component.compile_options.dev) {\n        // checking that expected ones were passed\n        const expected = props.filter(prop => prop.writable && !prop.initialised);\n        if (expected.length) {\n            dev_props_check = b `\n\t\t\t\tconst { ctx: #ctx } = this.$$;\n\t\t\t\tconst props = ${options.customElement ? x `this.attributes` : x `options.props || {}`};\n\t\t\t\t${expected.map(prop => b `\n\t\t\t\tif (${renderer.reference(prop.name)} === undefined && !('${prop.export_name}' in props)) {\n\t\t\t\t\t@_console.warn(\"<${component.tag}> was created without expected prop '${prop.export_name}'\");\n\t\t\t\t}`)}\n\t\t\t`;\n        }\n        const capturable_vars = component.vars.filter(v => !v.internal && !v.global && !v.name.startsWith('$$'));\n        if (capturable_vars.length > 0) {\n            capture_state = x `() => ({ ${capturable_vars.map(prop => p `${prop.name}`)} })`;\n        }\n        const injectable_vars = capturable_vars.filter(v => !v.module && v.writable && v.name[0] !== '$');\n        if (uses_props || injectable_vars.length > 0) {\n            inject_state = x `\n\t\t\t\t${$$props} => {\n\t\t\t\t\t${uses_props && renderer.invalidate('$$props', x `$$props = @assign(@assign({}, $$props), $$new_props)`)}\n\t\t\t\t\t${injectable_vars.map(v => b `if ('${v.name}' in $$props) ${renderer.invalidate(v.name, x `${v.name} = ${$$props}.${v.name}`)};`)}\n\t\t\t\t}\n\t\t\t`;\n            props_inject = b `\n\t\t\t\tif ($$props && \"$$inject\" in $$props) {\n\t\t\t\t\t$$self.$inject_state($$props.$$inject);\n\t\t\t\t}\n\t\t\t`;\n        }\n    }\n    // instrument assignments\n    if (component.ast.instance) {\n        let scope = component.instance_scope;\n        const map = component.instance_scope_map;\n        let execution_context = null;\n        walk(component.ast.instance.content, {\n            enter(node) {\n                if (map.has(node)) {\n                    scope = map.get(node);\n                    if (!execution_context && !scope.block) {\n                        execution_context = node;\n                    }\n                }\n                else if (!execution_context && node.type === 'LabeledStatement' && node.label.name === '$') {\n                    execution_context = node;\n                }\n            },\n            leave(node) {\n                if (map.has(node)) {\n                    scope = scope.parent;\n                }\n                if (execution_context === node) {\n                    execution_context = null;\n                }\n                if (node.type === 'AssignmentExpression' || node.type === 'UpdateExpression') {\n                    const assignee = node.type === 'AssignmentExpression' ? node.left : node.argument;\n                    // normally (`a = 1`, `b.c = 2`), there'll be a single name\n                    // (a or b). In destructuring cases (`[d, e] = [e, d]`) there\n                    // may be more, in which case we need to tack the extra ones\n                    // onto the initial function call\n                    const names = new Set(extract_names(assignee));\n                    this.replace(invalidate(renderer, scope, node, names, execution_context === null));\n                }\n            }\n        });\n        component.rewrite_props(({ name, reassigned, export_name }) => {\n            const value = `$${name}`;\n            const i = renderer.context_lookup.get(`$${name}`).index;\n            const insert = (reassigned || export_name)\n                ? b `${`$$subscribe_${name}`}()`\n                : b `@component_subscribe($$self, ${name}, #value => $$invalidate(${i}, ${value} = #value))`;\n            if (component.compile_options.dev) {\n                return b `@validate_store(${name}, '${name}'); ${insert}`;\n            }\n            return insert;\n        });\n    }\n    const args = [x `$$self`];\n    const has_invalidate = props.length > 0 ||\n        component.has_reactive_assignments ||\n        component.slots.size > 0 ||\n        capture_state ||\n        inject_state;\n    if (has_invalidate) {\n        args.push(x `$$props`, x `$$invalidate`);\n    }\n    else if (component.compile_options.dev) {\n        // $$props arg is still needed for unknown prop check\n        args.push(x `$$props`);\n    }\n    const has_create_fragment = component.compile_options.dev || block.has_content();\n    if (has_create_fragment) {\n        body.push(b `\n\t\t\tfunction create_fragment(#ctx) {\n\t\t\t\t${block.get_contents()}\n\t\t\t}\n\t\t`);\n    }\n    body.push(b `\n\t\t${component.extract_javascript(component.ast.module)}\n\n\t\t${component.fully_hoisted}\n\t`);\n    const filtered_props = props.filter(prop => {\n        const variable = component.var_lookup.get(prop.name);\n        if (variable.hoistable)\n            return false;\n        return prop.name[0] !== '$';\n    });\n    const reactive_stores = component.vars.filter(variable => variable.name[0] === '$' && variable.name[1] !== '$');\n    const instance_javascript = component.extract_javascript(component.ast.instance);\n    const has_definition = (component.compile_options.dev ||\n        (instance_javascript && instance_javascript.length > 0) ||\n        filtered_props.length > 0 ||\n        uses_props ||\n        component.partly_hoisted.length > 0 ||\n        renderer.initial_context.length > 0 ||\n        component.reactive_declarations.length > 0 ||\n        capture_state ||\n        inject_state);\n    const definition = has_definition\n        ? component.alias('instance')\n        : { type: 'Literal', value: null };\n    const reactive_store_subscriptions = reactive_stores\n        .filter(store => {\n        const variable = component.var_lookup.get(store.name.slice(1));\n        return !variable || variable.hoistable;\n    })\n        .map(({ name }) => b `\n\t\t\t${component.compile_options.dev && b `@validate_store(${name.slice(1)}, '${name.slice(1)}');`}\n\t\t\t@component_subscribe($$self, ${name.slice(1)}, $$value => $$invalidate(${renderer.context_lookup.get(name).index}, ${name} = $$value));\n\t\t`);\n    const resubscribable_reactive_store_unsubscribers = reactive_stores\n        .filter(store => {\n        const variable = component.var_lookup.get(store.name.slice(1));\n        return variable && (variable.reassigned || variable.export_name);\n    })\n        .map(({ name }) => b `$$self.$$.on_destroy.push(() => ${`$$unsubscribe_${name.slice(1)}`}());`);\n    if (has_definition) {\n        const reactive_declarations = [];\n        const fixed_reactive_declarations = []; // not really 'reactive' but whatever\n        component.reactive_declarations.forEach(d => {\n            const dependencies = Array.from(d.dependencies);\n            const uses_rest_or_props = !!dependencies.find(n => n === '$$props' || n === '$$restProps');\n            const writable = dependencies.filter(n => {\n                const variable = component.var_lookup.get(n);\n                return variable && (variable.export_name || variable.mutated || variable.reassigned);\n            });\n            const condition = !uses_rest_or_props && writable.length > 0 && renderer.dirty(writable, true);\n            let statement = d.node; // TODO remove label (use d.node.body) if it's not referenced\n            if (condition)\n                statement = b `if (${condition}) { ${statement} }`[0];\n            if (condition || uses_rest_or_props) {\n                reactive_declarations.push(statement);\n            }\n            else {\n                fixed_reactive_declarations.push(statement);\n            }\n        });\n        const injected = Array.from(component.injected_reactive_declaration_vars).filter(name => {\n            const variable = component.var_lookup.get(name);\n            return variable.injected && variable.name[0] !== '$';\n        });\n        const reactive_store_declarations = reactive_stores.map(variable => {\n            const $name = variable.name;\n            const name = $name.slice(1);\n            const store = component.var_lookup.get(name);\n            if (store && (store.reassigned || store.export_name)) {\n                const unsubscribe = `$$unsubscribe_${name}`;\n                const subscribe = `$$subscribe_${name}`;\n                const i = renderer.context_lookup.get($name).index;\n                return b `let ${$name}, ${unsubscribe} = @noop, ${subscribe} = () => (${unsubscribe}(), ${unsubscribe} = @subscribe(${name}, $$value => $$invalidate(${i}, ${$name} = $$value)), ${name})`;\n            }\n            return b `let ${$name};`;\n        });\n        let unknown_props_check;\n        if (component.compile_options.dev && !(uses_props || uses_rest)) {\n            unknown_props_check = b `\n\t\t\t\tconst writable_props = [${writable_props.map(prop => x `'${prop.export_name}'`)}];\n\t\t\t\t@_Object.keys($$props).forEach(key => {\n\t\t\t\t\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') @_console.warn(\\`<${component.tag}> was created with unknown prop '\\${key}'\\`);\n\t\t\t\t});\n\t\t\t`;\n        }\n        const return_value = {\n            type: 'ArrayExpression',\n            elements: renderer.initial_context.map(member => ({\n                type: 'Identifier',\n                name: member.name\n            }))\n        };\n        body.push(b `\n\t\t\tfunction ${definition}(${args}) {\n\t\t\t\t${injected.map(name => b `let ${name};`)}\n\n\t\t\t\t${rest}\n\n\t\t\t\t${reactive_store_declarations}\n\n\t\t\t\t${reactive_store_subscriptions}\n\n\t\t\t\t${resubscribable_reactive_store_unsubscribers}\n\n\t\t\t\t${component.slots.size || component.compile_options.dev || uses_slots ? b `let { $$slots: #slots = {}, $$scope } = $$props;` : null}\n\t\t\t\t${component.compile_options.dev && b `@validate_slots('${component.tag}', #slots, [${[...component.slots.keys()].map(key => `'${key}'`).join(',')}]);`}\n\t\t\t\t${compute_slots}\n\n\t\t\t\t${instance_javascript}\n\n\t\t\t\t${unknown_props_check}\n\n\t\t\t\t${renderer.binding_groups.size > 0 && b `const $$binding_groups = [${[...renderer.binding_groups.keys()].map(_ => x `[]`)}];`}\n\n\t\t\t\t${component.partly_hoisted}\n\n\t\t\t\t${set && b `$$self.$$set = ${set};`}\n\n\t\t\t\t${capture_state && b `$$self.$capture_state = ${capture_state};`}\n\n\t\t\t\t${inject_state && b `$$self.$inject_state = ${inject_state};`}\n\n\t\t\t\t${ /* before reactive declarations */props_inject}\n\n\t\t\t\t${reactive_declarations.length > 0 && b `\n\t\t\t\t$$self.$$.update = () => {\n\t\t\t\t\t${reactive_declarations}\n\t\t\t\t};\n\t\t\t\t`}\n\n\t\t\t\t${fixed_reactive_declarations}\n\n\t\t\t\t${uses_props && b `$$props = @exclude_internal_props($$props);`}\n\n\t\t\t\treturn ${return_value};\n\t\t\t}\n\t\t`);\n    }\n    const prop_indexes = x `{\n\t\t${props.filter(v => v.export_name && !v.module).map(v => p `${v.export_name}: ${renderer.context_lookup.get(v.name).index}`)}\n\t}`;\n    let dirty;\n    if (renderer.context_overflow) {\n        dirty = x `[]`;\n        for (let i = 0; i < renderer.context.length; i += 31) {\n            dirty.elements.push(x `-1`);\n        }\n    }\n    if (options.customElement) {\n        let init_props = x `@attribute_to_object(this.attributes)`;\n        if (uses_slots) {\n            init_props = x `{ ...${init_props}, $$slots: @get_custom_elements_slots(this) }`;\n        }\n        const declaration = b `\n\t\t\tclass ${name} extends @SvelteElement {\n\t\t\t\tconstructor(options) {\n\t\t\t\t\tsuper();\n\n\t\t\t\t\t${css.code && b `this.shadowRoot.innerHTML = \\`<style>${css.code.replace(/\\\\/g, '\\\\\\\\')}${css_sourcemap_enabled && options.dev ? `\\n/*# sourceMappingURL=${css.map.toUrl()} */` : ''}</style>\\`;`}\n\n\t\t\t\t\t@init(this, { target: this.shadowRoot, props: ${init_props}, customElement: true }, ${definition}, ${has_create_fragment ? 'create_fragment' : 'null'}, ${not_equal}, ${prop_indexes}, null, ${dirty});\n\n\t\t\t\t\t${dev_props_check}\n\n\t\t\t\t\tif (options) {\n\t\t\t\t\t\tif (options.target) {\n\t\t\t\t\t\t\t@insert(options.target, this, options.anchor);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t${(props.length > 0 || uses_props || uses_rest) && b `\n\t\t\t\t\t\tif (options.props) {\n\t\t\t\t\t\t\tthis.$set(options.props);\n\t\t\t\t\t\t\t@flush();\n\t\t\t\t\t\t}`}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`[0];\n        if (props.length > 0) {\n            declaration.body.body.push({\n                type: 'MethodDefinition',\n                kind: 'get',\n                static: true,\n                computed: false,\n                key: { type: 'Identifier', name: 'observedAttributes' },\n                value: x `function() {\n\t\t\t\t\treturn [${props.map(prop => x `\"${prop.export_name}\"`)}];\n\t\t\t\t}`\n            });\n        }\n        push_array$1(declaration.body.body, accessors);\n        body.push(declaration);\n        if (component.tag != null) {\n            body.push(b `\n\t\t\t\t@_customElements.define(\"${component.tag}\", ${name});\n\t\t\t`);\n        }\n    }\n    else {\n        const superclass = {\n            type: 'Identifier',\n            name: options.dev ? '@SvelteComponentDev' : '@SvelteComponent'\n        };\n        const optional_parameters = [];\n        if (should_add_css) {\n            optional_parameters.push(add_css);\n        }\n        else if (dirty) {\n            optional_parameters.push(x `null`);\n        }\n        if (dirty) {\n            optional_parameters.push(dirty);\n        }\n        const declaration = b `\n\t\t\tclass ${name} extends ${superclass} {\n\t\t\t\tconstructor(options) {\n\t\t\t\t\tsuper(${options.dev && 'options'});\n\t\t\t\t\t@init(this, options, ${definition}, ${has_create_fragment ? 'create_fragment' : 'null'}, ${not_equal}, ${prop_indexes}, ${optional_parameters});\n\t\t\t\t\t${options.dev && b `@dispatch_dev(\"SvelteRegisterComponent\", { component: this, tagName: \"${name.name}\", options, id: create_fragment.name });`}\n\n\t\t\t\t\t${dev_props_check}\n\t\t\t\t}\n\t\t\t}\n\t\t`[0];\n        push_array$1(declaration.body.body, accessors);\n        body.push(declaration);\n    }\n    return { js: flatten(body), css };\n}\n\nfunction get_const_tags$1(const_tags) {\n    if (const_tags.length === 0)\n        return null;\n    return {\n        type: 'VariableDeclaration',\n        kind: 'let',\n        declarations: const_tags.map(const_tag => {\n            const assignment = const_tag.node.expression;\n            return {\n                type: 'VariableDeclarator',\n                id: assignment.left,\n                init: assignment.right\n            };\n        })\n    };\n}\n\nfunction AwaitBlock$1 (node, renderer, options) {\n    renderer.push();\n    renderer.render(node.pending.children, options);\n    const pending = renderer.pop();\n    renderer.push();\n    renderer.render(node.then.children, options);\n    const then = renderer.pop();\n    renderer.add_expression(x `\n\t\tfunction(__value) {\n\t\t\tif (@is_promise(__value)) {\n\t\t\t\t__value.then(null, @noop);\n\t\t\t\treturn ${pending};\n\t\t\t}\n\t\t\treturn (function(${node.then_node ? node.then_node : ''}) { ${get_const_tags$1(node.then.const_tags)}; return ${then}; }(__value));\n\t\t}(${node.expression.node})\n\t`);\n}\n\nfunction Comment$2 (node, renderer, options) {\n    if (options.preserveComments) {\n        renderer.add_string(`<!--${node.data}-->`);\n    }\n}\n\nfunction DebugTag$1 (node, renderer, options) {\n    if (!options.dev)\n        return;\n    const filename = options.filename || null;\n    const { line, column } = options.locate(node.start + 1);\n    const obj = x `{\n\t\t${node.expressions.map(e => p `${e.node.name}`)}\n\t}`;\n    renderer.add_expression(x `@debug(${filename ? x `\"${filename}\"` : x `null`}, ${line - 1}, ${column}, ${obj})`);\n}\n\nfunction EachBlock$1 (node, renderer, options) {\n    const args = [node.context_node];\n    if (node.index)\n        args.push({ type: 'Identifier', name: node.index });\n    renderer.push();\n    renderer.render(node.children, options);\n    const result = renderer.pop();\n    const consequent = x `@each(${node.expression.node}, (${args}) => { ${get_const_tags$1(node.const_tags)}; return ${result} })`;\n    if (node.else) {\n        renderer.push();\n        renderer.render(node.else.children, options);\n        const alternate = renderer.pop();\n        renderer.add_expression(x `${node.expression.node}.length ? ${consequent} : ${alternate}`);\n    }\n    else {\n        renderer.add_expression(consequent);\n    }\n}\n\nfunction get_class_attribute_value(attribute) {\n    // handle special case — `class={possiblyUndefined}` with scoped CSS\n    if (attribute.chunks.length === 2 && attribute.chunks[1].synthetic) {\n        const value = attribute.chunks[0].node;\n        return x `@escape(@null_to_empty(${value})) + \"${attribute.chunks[1].data}\"`;\n    }\n    return get_attribute_value(attribute);\n}\nfunction get_attribute_value(attribute) {\n    if (attribute.chunks.length === 0)\n        return x `\"\"`;\n    return attribute.chunks\n        .map((chunk) => {\n        return chunk.type === 'Text'\n            ? string_literal(chunk.data.replace(/\"/g, '&quot;'))\n            : x `@escape(${chunk.node})`;\n    })\n        .reduce((lhs, rhs) => x `${lhs} + ${rhs}`);\n}\nfunction get_attribute_expression(attribute) {\n    if (attribute.chunks.length === 1 && attribute.chunks[0].type === 'Expression') {\n        return attribute.chunks[0].node;\n    }\n    return get_attribute_value(attribute);\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n// similar logic from `compile/render_dom/wrappers/Fragment`\n// We want to remove trailing whitespace inside an element/component/block,\n// *unless* there is no whitespace between this node and its next sibling\nfunction remove_whitespace_children(children, next) {\n    const nodes = [];\n    let last_child;\n    let i = children.length;\n    while (i--) {\n        const child = children[i];\n        if (child.type === 'Text') {\n            if (child.should_skip()) {\n                continue;\n            }\n            let { data } = child;\n            if (nodes.length === 0) {\n                const should_trim = next\n                    ? next.type === 'Text' &&\n                        /^\\s/.test(next.data) &&\n                        trimmable_at$1(child, next)\n                    : !child.has_ancestor('EachBlock');\n                if (should_trim && !child.keep_space()) {\n                    data = trim_end(data);\n                    if (!data)\n                        continue;\n                }\n            }\n            // glue text nodes (which could e.g. be separated by comments) together\n            if (last_child && last_child.type === 'Text') {\n                last_child.data = data + last_child.data;\n                continue;\n            }\n            nodes.unshift(child);\n            link(last_child, last_child = child);\n        }\n        else {\n            nodes.unshift(child);\n            link(last_child, last_child = child);\n        }\n    }\n    const first = nodes[0];\n    if (first && first.type === 'Text' && !first.keep_space()) {\n        first.data = trim_start(first.data);\n        if (!first.data) {\n            first.var = null;\n            nodes.shift();\n            if (nodes[0]) {\n                nodes[0].prev = null;\n            }\n        }\n    }\n    return nodes;\n}\nfunction trimmable_at$1(child, next_sibling) {\n    // Whitespace is trimmable if one of the following is true:\n    // The child and its sibling share a common nearest each block (not at an each block boundary)\n    // The next sibling's previous node is an each block\n    return (next_sibling.find_nearest(/EachBlock/) ===\n        child.find_nearest(/EachBlock/) || next_sibling.prev.type === 'EachBlock');\n}\n\nfunction Element$1 (node, renderer, options) {\n    const children = remove_whitespace_children(node.children, node.next);\n    // awkward special case\n    let node_contents;\n    const contenteditable = (node.name !== 'textarea' &&\n        node.name !== 'input' &&\n        node.attributes.some((attribute) => attribute.name === 'contenteditable'));\n    renderer.add_string(`<${node.name}`);\n    const class_expression_list = node.classes.map(class_directive => {\n        const { expression, name } = class_directive;\n        const snippet = expression ? expression.node : x `#ctx.${name}`; // TODO is this right?\n        return x `${snippet} ? \"${name}\" : \"\"`;\n    });\n    if (node.needs_manual_style_scoping) {\n        class_expression_list.push(x `\"${node.component.stylesheet.id}\"`);\n    }\n    const class_expression = class_expression_list.length > 0 &&\n        class_expression_list.reduce((lhs, rhs) => x `${lhs} + ' ' + ${rhs}`);\n    const style_expression_list = node.styles.map(style_directive => {\n        const { name, expression: { node: expression } } = style_directive;\n        return p `\"${name}\": ${expression}`;\n    });\n    const style_expression = style_expression_list.length > 0 &&\n        x `{ ${style_expression_list} }`;\n    if (node.attributes.some(attr => attr.is_spread)) {\n        // TODO dry this out\n        const args = [];\n        node.attributes.forEach(attribute => {\n            if (attribute.is_spread) {\n                args.push(x `@escape_object(${attribute.expression.node})`);\n            }\n            else {\n                const attr_name = node.namespace === namespaces.foreign ? attribute.name : fix_attribute_casing(attribute.name);\n                const name = attribute.name.toLowerCase();\n                if (name === 'value' && node.name.toLowerCase() === 'textarea') {\n                    node_contents = get_attribute_value(attribute);\n                }\n                else if (attribute.is_true) {\n                    args.push(x `{ ${attr_name}: true }`);\n                }\n                else if (boolean_attributes.has(name) &&\n                    attribute.chunks.length === 1 &&\n                    attribute.chunks[0].type !== 'Text') {\n                    // a boolean attribute with one non-Text chunk\n                    args.push(x `{ ${attr_name}: ${attribute.chunks[0].node} || null }`);\n                }\n                else if (attribute.chunks.length === 1 && attribute.chunks[0].type !== 'Text') {\n                    const snippet = attribute.chunks[0].node;\n                    args.push(x `{ ${attr_name}: @escape_attribute_value(${snippet}) }`);\n                }\n                else {\n                    args.push(x `{ ${attr_name}: ${get_attribute_value(attribute)} }`);\n                }\n            }\n        });\n        renderer.add_expression(x `@spread([${args}], { classes: ${class_expression}, styles: ${style_expression} })`);\n    }\n    else {\n        let add_class_attribute = !!class_expression;\n        let add_style_attribute = !!style_expression;\n        node.attributes.forEach(attribute => {\n            const name = attribute.name.toLowerCase();\n            const attr_name = node.namespace === namespaces.foreign ? attribute.name : fix_attribute_casing(attribute.name);\n            if (name === 'value' && node.name.toLowerCase() === 'textarea') {\n                node_contents = get_attribute_value(attribute);\n            }\n            else if (attribute.is_true) {\n                renderer.add_string(` ${attr_name}`);\n            }\n            else if (boolean_attributes.has(name) &&\n                attribute.chunks.length === 1 &&\n                attribute.chunks[0].type !== 'Text') {\n                // a boolean attribute with one non-Text chunk\n                renderer.add_string(' ');\n                renderer.add_expression(x `${attribute.chunks[0].node} ? \"${attr_name}\" : \"\"`);\n            }\n            else if (name === 'class' && class_expression) {\n                add_class_attribute = false;\n                renderer.add_string(` ${attr_name}=\"`);\n                renderer.add_expression(x `[${get_class_attribute_value(attribute)}, ${class_expression}].join(' ').trim()`);\n                renderer.add_string('\"');\n            }\n            else if (name === 'style' && style_expression) {\n                add_style_attribute = false;\n                renderer.add_expression(x `@add_styles(@merge_ssr_styles(${get_attribute_value(attribute)}, ${style_expression}))`);\n            }\n            else if (attribute.chunks.length === 1 && attribute.chunks[0].type !== 'Text') {\n                const snippet = attribute.chunks[0].node;\n                renderer.add_expression(x `@add_attribute(\"${attr_name}\", ${snippet}, ${boolean_attributes.has(name) ? 1 : 0})`);\n            }\n            else {\n                renderer.add_string(` ${attr_name}=\"`);\n                renderer.add_expression((name === 'class' ? get_class_attribute_value : get_attribute_value)(attribute));\n                renderer.add_string('\"');\n            }\n        });\n        if (add_class_attribute) {\n            renderer.add_expression(x `@add_classes((${class_expression}).trim())`);\n        }\n        if (add_style_attribute) {\n            renderer.add_expression(x `@add_styles(${style_expression})`);\n        }\n    }\n    node.bindings.forEach(binding => {\n        const { name, expression } = binding;\n        if (binding.is_readonly) {\n            return;\n        }\n        if (name === 'group') {\n            const value_attribute = node.attributes.find(({ name }) => name === 'value');\n            if (value_attribute) {\n                const value = get_attribute_expression(value_attribute);\n                const type = node.get_static_attribute_value('type');\n                const bound = expression.node;\n                const condition = type === 'checkbox' ? x `~${bound}.indexOf(${value})` : x `${value} === ${bound}`;\n                renderer.add_expression(x `${condition} ? @add_attribute(\"checked\", true, 1) : \"\"`);\n            }\n        }\n        else if (contenteditable && (name === 'textContent' || name === 'innerHTML')) {\n            node_contents = expression.node;\n            // TODO where was this used?\n            // value = name === 'textContent' ? x`@escape($$value)` : x`$$value`;\n        }\n        else if (binding.name === 'value' && node.name === 'textarea') {\n            const snippet = expression.node;\n            node_contents = x `${snippet} || \"\"`;\n        }\n        else if (binding.name === 'value' && node.name === 'select') ;\n        else {\n            const snippet = expression.node;\n            renderer.add_expression(x `@add_attribute(\"${name}\", ${snippet}, ${boolean_attributes.has(name) ? 1 : 0})`);\n        }\n    });\n    if (options.hydratable && options.head_id) {\n        renderer.add_string(` data-svelte=\"${options.head_id}\"`);\n    }\n    renderer.add_string('>');\n    if (node_contents !== undefined) {\n        if (contenteditable) {\n            renderer.push();\n            renderer.render(children, options);\n            const result = renderer.pop();\n            renderer.add_expression(x `($$value => $$value === void 0 ? ${result} : $$value)(${node_contents})`);\n        }\n        else {\n            renderer.add_expression(node_contents);\n        }\n        if (!is_void(node.name)) {\n            renderer.add_string(`</${node.name}>`);\n        }\n    }\n    else {\n        renderer.render(children, options);\n        if (!is_void(node.name)) {\n            renderer.add_string(`</${node.name}>`);\n        }\n    }\n}\n\nfunction Head$1 (node, renderer, options) {\n    const head_options = Object.assign(Object.assign({}, options), { head_id: node.id });\n    renderer.push();\n    renderer.render(node.children, head_options);\n    const result = renderer.pop();\n    renderer.add_expression(x `$$result.head += ${result}, \"\"`);\n}\n\nfunction HtmlTag (node, renderer, options) {\n    if (options.hydratable)\n        renderer.add_string('<!-- HTML_TAG_START -->');\n    renderer.add_expression(node.expression.node);\n    if (options.hydratable)\n        renderer.add_string('<!-- HTML_TAG_END -->');\n}\n\nfunction IfBlock$1 (node, renderer, options) {\n    const condition = node.expression.node;\n    renderer.push();\n    renderer.render(node.children, options);\n    const consequent = renderer.pop();\n    renderer.push();\n    if (node.else)\n        renderer.render(node.else.children, options);\n    const alternate = renderer.pop();\n    renderer.add_expression(x `${condition} ? ${consequent} : ${alternate}`);\n}\n\nfunction get_prop_value(attribute) {\n    if (attribute.is_true)\n        return x `true`;\n    if (attribute.chunks.length === 0)\n        return x `''`;\n    return attribute.chunks\n        .map(chunk => {\n        if (chunk.type === 'Text')\n            return string_literal(chunk.data);\n        return chunk.node;\n    })\n        .reduce((lhs, rhs) => x `${lhs} + ${rhs}`);\n}\nfunction InlineComponent$1 (node, renderer, options) {\n    const binding_props = [];\n    const binding_fns = [];\n    node.bindings.forEach(binding => {\n        renderer.has_bindings = true;\n        // TODO this probably won't work for contextual bindings\n        const snippet = binding.expression.node;\n        binding_props.push(p `${binding.name}: ${snippet}`);\n        binding_fns.push(p `${binding.name}: $$value => { ${snippet} = $$value; $$settled = false }`);\n    });\n    const uses_spread = node.attributes.find(attr => attr.is_spread);\n    let props;\n    if (uses_spread) {\n        props = x `@_Object.assign(${node.attributes\n            .map(attribute => {\n            if (attribute.is_spread) {\n                return attribute.expression.node;\n            }\n            else {\n                return x `{ ${attribute.name}: ${get_prop_value(attribute)} }`;\n            }\n        })\n            .concat(binding_props.map(p => x `{ ${p} }`))})`;\n    }\n    else {\n        props = x `{\n\t\t\t${node.attributes.map(attribute => p `${attribute.name}: ${get_prop_value(attribute)}`)},\n\t\t\t${binding_props}\n\t\t}`;\n    }\n    const bindings = x `{\n\t\t${binding_fns}\n\t}`;\n    const expression = (node.name === 'svelte:self'\n        ? renderer.name\n        : node.name === 'svelte:component'\n            ? x `(${node.expression.node}) || @missing_component`\n            : node.name.split('.').reduce(((lhs, rhs) => x `${lhs}.${rhs}`)));\n    const slot_fns = [];\n    const children = node.children;\n    if (children.length) {\n        const slot_scopes = new Map();\n        renderer.render(children, Object.assign({}, options, {\n            slot_scopes\n        }));\n        slot_scopes.forEach(({ input, output, statements }, name) => {\n            slot_fns.push(p `${name}: (${input}) => { ${statements}; return ${output}; }`);\n        });\n    }\n    const slots = x `{\n\t\t${slot_fns}\n\t}`;\n    if (node.css_custom_properties.length > 0) {\n        renderer.add_string('<div style=\"display: contents;');\n        node.css_custom_properties.forEach(attr => {\n            renderer.add_string(` ${attr.name}:`);\n            renderer.add_expression(get_attribute_value(attr));\n            renderer.add_string(';');\n        });\n        renderer.add_string('\">');\n    }\n    renderer.add_expression(x `@validate_component(${expression}, \"${node.name}\").$$render($$result, ${props}, ${bindings}, ${slots})`);\n    if (node.css_custom_properties.length > 0) {\n        renderer.add_string('</div>');\n    }\n}\n\nfunction KeyBlock$1 (node, renderer, options) {\n    renderer.render(node.children, options);\n}\n\nfunction get_slot_scope(lets) {\n    if (lets.length === 0)\n        return null;\n    return {\n        type: 'ObjectPattern',\n        properties: lets.map(l => {\n            return {\n                type: 'Property',\n                kind: 'init',\n                method: false,\n                shorthand: false,\n                computed: false,\n                key: l.name,\n                value: l.value || l.name\n            };\n        })\n    };\n}\n\nfunction Slot$1 (node, renderer, options) {\n    const slot_data = get_slot_data(node.values);\n    const slot = node.get_static_attribute_value('slot');\n    const nearest_inline_component = node.find_nearest(/InlineComponent/);\n    if (slot && nearest_inline_component) {\n        renderer.push();\n    }\n    renderer.push();\n    renderer.render(node.children, options);\n    const result = renderer.pop();\n    renderer.add_expression(x `\n\t\t#slots.${node.slot_name}\n\t\t\t? #slots.${node.slot_name}(${slot_data})\n\t\t\t: ${result}\n\t`);\n    if (slot && nearest_inline_component) {\n        const lets = node.lets;\n        const seen = new Set(lets.map(l => l.name.name));\n        nearest_inline_component.lets.forEach(l => {\n            if (!seen.has(l.name.name))\n                lets.push(l);\n        });\n        options.slot_scopes.set(slot, {\n            input: get_slot_scope(node.lets),\n            output: renderer.pop()\n        });\n    }\n}\n\nfunction SlotTemplate$1 (node, renderer, options) {\n    const parent_inline_component = node.parent;\n    const children = remove_whitespace_children(node instanceof SlotTemplate ? node.children : [node], node.next);\n    renderer.push();\n    renderer.render(children, options);\n    const lets = node.lets;\n    const seen = new Set(lets.map(l => l.name.name));\n    parent_inline_component.lets.forEach(l => {\n        if (!seen.has(l.name.name))\n            lets.push(l);\n    });\n    const slot_fragment_content = renderer.pop();\n    if (!is_empty_template_literal(slot_fragment_content)) {\n        if (options.slot_scopes.has(node.slot_template_name)) {\n            if (node.slot_template_name === 'default') {\n                throw new Error('Found elements without slot attribute when using slot=\"default\"');\n            }\n            throw new Error(`Duplicate slot name \"${node.slot_template_name}\" in <${parent_inline_component.name}>`);\n        }\n        options.slot_scopes.set(node.slot_template_name, {\n            input: get_slot_scope(node.lets),\n            output: slot_fragment_content,\n            statements: get_const_tags$1(node.const_tags)\n        });\n    }\n}\nfunction is_empty_template_literal(template_literal) {\n    return (template_literal.expressions.length === 0 &&\n        template_literal.quasis.length === 1 &&\n        template_literal.quasis[0].value.raw === '');\n}\n\nfunction Tag$2 (node, renderer, _options) {\n    const snippet = node.expression.node;\n    renderer.add_expression(node.parent &&\n        node.parent.type === 'Element' &&\n        node.parent.name === 'style'\n        ? snippet\n        : x `@escape(${snippet})`);\n}\n\nfunction Text$1 (node, renderer, _options) {\n    let text = node.data;\n    if (!node.parent ||\n        node.parent.type !== 'Element' ||\n        (node.parent.name !== 'script' && node.parent.name !== 'style')) {\n        // unless this Text node is inside a <script> or <style> element, escape &,<,>\n        text = escape_html(text);\n    }\n    renderer.add_string(text);\n}\n\nfunction Title$1 (node, renderer, options) {\n    renderer.push();\n    renderer.add_string('<title>');\n    renderer.render(node.children, options);\n    renderer.add_string('</title>');\n    const result = renderer.pop();\n    renderer.add_expression(x `$$result.title = ${result}, \"\"`);\n}\n\nfunction noop$1() { }\nconst handlers$1 = {\n    AwaitBlock: AwaitBlock$1,\n    Body: noop$1,\n    Comment: Comment$2,\n    DebugTag: DebugTag$1,\n    EachBlock: EachBlock$1,\n    Element: Element$1,\n    Head: Head$1,\n    IfBlock: IfBlock$1,\n    InlineComponent: InlineComponent$1,\n    KeyBlock: KeyBlock$1,\n    MustacheTag: Tag$2,\n    Options: noop$1,\n    RawMustacheTag: HtmlTag,\n    Slot: Slot$1,\n    SlotTemplate: SlotTemplate$1,\n    Text: Text$1,\n    Title: Title$1,\n    Window: noop$1\n};\nclass Renderer$1 {\n    constructor({ name }) {\n        this.has_bindings = false;\n        this.stack = [];\n        this.targets = [];\n        this.name = name;\n        this.push();\n    }\n    add_string(str) {\n        this.current.value += escape_template(str);\n    }\n    add_expression(node) {\n        this.literal.quasis.push({\n            type: 'TemplateElement',\n            value: { raw: this.current.value, cooked: null },\n            tail: false\n        });\n        this.literal.expressions.push(node);\n        this.current.value = '';\n    }\n    push() {\n        const current = this.current = { value: '' };\n        const literal = this.literal = {\n            type: 'TemplateLiteral',\n            expressions: [],\n            quasis: []\n        };\n        this.stack.push({ current, literal });\n    }\n    pop() {\n        this.literal.quasis.push({\n            type: 'TemplateElement',\n            value: { raw: this.current.value, cooked: null },\n            tail: true\n        });\n        const popped = this.stack.pop();\n        const last = this.stack[this.stack.length - 1];\n        if (last) {\n            this.literal = last.literal;\n            this.current = last.current;\n        }\n        return popped.literal;\n    }\n    render(nodes, options) {\n        nodes.forEach(node => {\n            const handler = handlers$1[node.type];\n            if (!handler) {\n                throw new Error(`No handler for '${node.type}' nodes`);\n            }\n            handler(node, this, options);\n        });\n    }\n}\n\nfunction ssr(component, options) {\n    const renderer = new Renderer$1({\n        name: component.name\n    });\n    const { name } = component;\n    // create $$render function\n    renderer.render(trim(component.fragment.children), Object.assign({\n        locate: component.locate\n    }, options));\n    // TODO put this inside the Renderer class\n    const literal = renderer.pop();\n    // TODO concatenate CSS maps\n    const css = options.customElement ?\n        { code: null, map: null } :\n        component.stylesheet.render(options.filename, true);\n    const uses_rest = component.var_lookup.has('$$restProps');\n    const props = component.vars.filter(variable => !variable.module && variable.export_name);\n    const rest = uses_rest ? b `let $$restProps = @compute_rest_props($$props, [${props.map(prop => `\"${prop.export_name}\"`).join(',')}]);` : null;\n    const uses_slots = component.var_lookup.has('$$slots');\n    const slots = uses_slots ? b `let $$slots = @compute_slots(#slots);` : null;\n    const reactive_stores = component.vars.filter(variable => variable.name[0] === '$' && variable.name[1] !== '$');\n    const reactive_store_subscriptions = reactive_stores\n        .filter(store => {\n        const variable = component.var_lookup.get(store.name.slice(1));\n        return !variable || variable.hoistable;\n    })\n        .map(({ name }) => {\n        const store_name = name.slice(1);\n        return b `\n\t\t\t\t${component.compile_options.dev && b `@validate_store(${store_name}, '${store_name}');`}\n\t\t\t\t${`$$unsubscribe_${store_name}`} = @subscribe(${store_name}, #value => ${name} = #value)\n\t\t\t`;\n    });\n    const reactive_store_unsubscriptions = reactive_stores.map(({ name }) => b `${`$$unsubscribe_${name.slice(1)}`}()`);\n    const reactive_store_declarations = reactive_stores\n        .map(({ name }) => {\n        const store_name = name.slice(1);\n        const store = component.var_lookup.get(store_name);\n        if (store && store.reassigned) {\n            const unsubscribe = `$$unsubscribe_${store_name}`;\n            const subscribe = `$$subscribe_${store_name}`;\n            return b `let ${name}, ${unsubscribe} = @noop, ${subscribe} = () => (${unsubscribe}(), ${unsubscribe} = @subscribe(${store_name}, $$value => ${name} = $$value), ${store_name})`;\n        }\n        return b `let ${name}, ${`$$unsubscribe_${store_name}`};`;\n    });\n    // instrument get/set store value\n    if (component.ast.instance) {\n        let scope = component.instance_scope;\n        const map = component.instance_scope_map;\n        walk(component.ast.instance.content, {\n            enter(node) {\n                if (map.has(node)) {\n                    scope = map.get(node);\n                }\n            },\n            leave(node) {\n                if (map.has(node)) {\n                    scope = scope.parent;\n                }\n                if (node.type === 'AssignmentExpression' || node.type === 'UpdateExpression') {\n                    const assignee = node.type === 'AssignmentExpression' ? node.left : node.argument;\n                    const names = new Set(extract_names(assignee));\n                    const to_invalidate = new Set();\n                    for (const name of names) {\n                        const variable = component.var_lookup.get(name);\n                        if (variable &&\n                            !variable.hoistable &&\n                            !variable.global &&\n                            !variable.module &&\n                            (variable.subscribable || variable.name[0] === '$')) {\n                            to_invalidate.add(variable.name);\n                        }\n                    }\n                    if (to_invalidate.size) {\n                        this.replace(invalidate({ component }, scope, node, to_invalidate, true));\n                    }\n                }\n            }\n        });\n    }\n    component.rewrite_props(({ name, reassigned }) => {\n        const value = `$${name}`;\n        let insert = reassigned\n            ? b `${`$$subscribe_${name}`}()`\n            : b `${`$$unsubscribe_${name}`} = @subscribe(${name}, #value => $${value} = #value)`;\n        if (component.compile_options.dev) {\n            insert = b `@validate_store(${name}, '${name}'); ${insert}`;\n        }\n        return insert;\n    });\n    const instance_javascript = component.extract_javascript(component.ast.instance);\n    // TODO only do this for props with a default value\n    const parent_bindings = instance_javascript\n        ? component.vars\n            .filter(variable => !variable.module && variable.export_name)\n            .map(prop => {\n            return b `if ($$props.${prop.export_name} === void 0 && $$bindings.${prop.export_name} && ${prop.name} !== void 0) $$bindings.${prop.export_name}(${prop.name});`;\n        })\n        : [];\n    const injected = Array.from(component.injected_reactive_declaration_vars).filter(name => {\n        const variable = component.var_lookup.get(name);\n        return variable.injected;\n    });\n    const reactive_declarations = component.reactive_declarations.map(d => {\n        const body = d.node.body;\n        let statement = b `${body}`;\n        if (!d.declaration) { // TODO do not add label if it's not referenced\n            statement = b `$: { ${statement} }`;\n        }\n        return statement;\n    });\n    const main = renderer.has_bindings\n        ? b `\n\t\t\tlet $$settled;\n\t\t\tlet $$rendered;\n\n\t\t\tdo {\n\t\t\t\t$$settled = true;\n\n\t\t\t\t${reactive_declarations}\n\n\t\t\t\t$$rendered = ${literal};\n\t\t\t} while (!$$settled);\n\n\t\t\t${reactive_store_unsubscriptions}\n\n\t\t\treturn $$rendered;\n\t\t`\n        : b `\n\t\t\t${reactive_declarations}\n\n\t\t\t${reactive_store_unsubscriptions}\n\n\t\t\treturn ${literal};`;\n    const blocks = [\n        ...injected.map(name => b `let ${name};`),\n        rest,\n        slots,\n        ...reactive_store_declarations,\n        ...reactive_store_subscriptions,\n        instance_javascript,\n        ...parent_bindings,\n        css.code && b `$$result.css.add(#css);`,\n        main\n    ].filter(Boolean);\n    const css_sourcemap_enabled = check_enable_sourcemap(options.enableSourcemap, 'css');\n    const js = b `\n\t\t${css.code ? b `\n\t\tconst #css = {\n\t\t\tcode: \"${css.code}\",\n\t\t\tmap: ${css_sourcemap_enabled && css.map ? string_literal(css.map.toString()) : 'null'}\n\t\t};` : null}\n\n\t\t${component.extract_javascript(component.ast.module)}\n\n\t\t${component.fully_hoisted}\n\n\t\tconst ${name} = @create_ssr_component(($$result, $$props, $$bindings, #slots) => {\n\t\t\t${blocks}\n\t\t});\n\t`;\n    return { js, css };\n}\nfunction trim(nodes) {\n    let start = 0;\n    for (; start < nodes.length; start += 1) {\n        const node = nodes[start];\n        if (node.type !== 'Text')\n            break;\n        node.data = node.data.replace(/^\\s+/, '');\n        if (node.data)\n            break;\n    }\n    let end = nodes.length;\n    for (; end > start; end -= 1) {\n        const node = nodes[end - 1];\n        if (node.type !== 'Text')\n            break;\n        node.data = node.data.replace(/\\s+$/, '');\n        if (node.data)\n            break;\n    }\n    return nodes.slice(start, end);\n}\n\nconst wrappers$1 = { esm, cjs };\nfunction create_module(program, format, name, banner, sveltePath = 'svelte', helpers, globals, imports, module_exports, exports_from) {\n    const internal_path = `${sveltePath}/internal`;\n    helpers.sort((a, b) => (a.name < b.name) ? -1 : 1);\n    globals.sort((a, b) => (a.name < b.name) ? -1 : 1);\n    const formatter = wrappers$1[format];\n    if (!formatter) {\n        throw new Error(`options.format is invalid (must be ${list(Object.keys(wrappers$1))})`);\n    }\n    return formatter(program, name, banner, sveltePath, internal_path, helpers, globals, imports, module_exports, exports_from);\n}\nfunction edit_source(source, sveltePath) {\n    return source === 'svelte' || source.startsWith('svelte/')\n        ? source.replace('svelte', sveltePath)\n        : source;\n}\nfunction get_internal_globals(globals, helpers) {\n    return globals.length > 0 && {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'ObjectPattern',\n                    properties: globals.map(g => ({\n                        type: 'Property',\n                        method: false,\n                        shorthand: false,\n                        computed: false,\n                        key: { type: 'Identifier', name: g.name },\n                        value: g.alias,\n                        kind: 'init'\n                    }))\n                },\n                init: helpers.find(({ name }) => name === 'globals').alias\n            }]\n    };\n}\nfunction esm(program, name, banner, sveltePath, internal_path, helpers, globals, imports, module_exports, exports_from) {\n    const import_declaration = {\n        type: 'ImportDeclaration',\n        specifiers: helpers.map(h => ({\n            type: 'ImportSpecifier',\n            local: h.alias,\n            imported: { type: 'Identifier', name: h.name }\n        })),\n        source: { type: 'Literal', value: internal_path }\n    };\n    const internal_globals = get_internal_globals(globals, helpers);\n    // edit user imports\n    function rewrite_import(node) {\n        const value = edit_source(node.source.value, sveltePath);\n        if (node.source.value !== value) {\n            node.source.value = value;\n            node.source.raw = null;\n        }\n    }\n    imports.forEach(rewrite_import);\n    exports_from.forEach(rewrite_import);\n    const exports = module_exports.length > 0 && {\n        type: 'ExportNamedDeclaration',\n        specifiers: module_exports.map(x => ({\n            type: 'Specifier',\n            local: { type: 'Identifier', name: x.name },\n            exported: { type: 'Identifier', name: x.as }\n        }))\n    };\n    program.body = b `\n\t\t/* ${banner} */\n\n\t\t${import_declaration}\n\t\t${internal_globals}\n\t\t${imports}\n\t\t${exports_from}\n\n\t\t${program.body}\n\n\t\texport default ${name};\n\t\t${exports}\n\t`;\n}\nfunction cjs(program, name, banner, sveltePath, internal_path, helpers, globals, imports, module_exports, exports_from) {\n    const internal_requires = {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: [{\n                type: 'VariableDeclarator',\n                id: {\n                    type: 'ObjectPattern',\n                    properties: helpers.map(h => ({\n                        type: 'Property',\n                        method: false,\n                        shorthand: false,\n                        computed: false,\n                        key: { type: 'Identifier', name: h.name },\n                        value: h.alias,\n                        kind: 'init'\n                    }))\n                },\n                init: x `require(\"${internal_path}\")`\n            }]\n    };\n    const internal_globals = get_internal_globals(globals, helpers);\n    const user_requires = imports.map(node => {\n        const init = x `require(\"${edit_source(node.source.value, sveltePath)}\")`;\n        if (node.specifiers.length === 0) {\n            return b `${init};`;\n        }\n        return {\n            type: 'VariableDeclaration',\n            kind: 'const',\n            declarations: [{\n                    type: 'VariableDeclarator',\n                    id: node.specifiers[0].type === 'ImportNamespaceSpecifier'\n                        ? { type: 'Identifier', name: node.specifiers[0].local.name }\n                        : {\n                            type: 'ObjectPattern',\n                            properties: node.specifiers.map(s => ({\n                                type: 'Property',\n                                method: false,\n                                shorthand: false,\n                                computed: false,\n                                key: s.type === 'ImportSpecifier' ? s.imported : { type: 'Identifier', name: 'default' },\n                                value: s.local,\n                                kind: 'init'\n                            }))\n                        },\n                    init\n                }]\n        };\n    });\n    const exports = module_exports.map(x => b `exports.${{ type: 'Identifier', name: x.as }} = ${{ type: 'Identifier', name: x.name }};`);\n    const user_exports_from = exports_from.map(node => {\n        const init = x `require(\"${edit_source(node.source.value, sveltePath)}\")`;\n        return node.specifiers.map(specifier => {\n            return b `exports.${specifier.exported} = ${init}.${specifier.local};`;\n        });\n    });\n    program.body = b `\n\t\t/* ${banner} */\n\n\t\t\"use strict\";\n\t\t${internal_requires}\n\t\t${internal_globals}\n\t\t${user_requires}\n\t\t${user_exports_from}\n\n\t\t${program.body}\n\n\t\texports.default = ${name};\n\t\t${exports}\n\t`;\n}\n\nvar Chunk = function Chunk(start, end, content) {\n\tthis.start = start;\n\tthis.end = end;\n\tthis.original = content;\n\n\tthis.intro = '';\n\tthis.outro = '';\n\n\tthis.content = content;\n\tthis.storeName = false;\n\tthis.edited = false;\n\n\t// we make these non-enumerable, for sanity while debugging\n\tObject.defineProperties(this, {\n\t\tprevious: { writable: true, value: null },\n\t\tnext:     { writable: true, value: null }\n\t});\n};\n\nChunk.prototype.appendLeft = function appendLeft (content) {\n\tthis.outro += content;\n};\n\nChunk.prototype.appendRight = function appendRight (content) {\n\tthis.intro = this.intro + content;\n};\n\nChunk.prototype.clone = function clone () {\n\tvar chunk = new Chunk(this.start, this.end, this.original);\n\n\tchunk.intro = this.intro;\n\tchunk.outro = this.outro;\n\tchunk.content = this.content;\n\tchunk.storeName = this.storeName;\n\tchunk.edited = this.edited;\n\n\treturn chunk;\n};\n\nChunk.prototype.contains = function contains (index) {\n\treturn this.start < index && index < this.end;\n};\n\nChunk.prototype.eachNext = function eachNext (fn) {\n\tvar chunk = this;\n\twhile (chunk) {\n\t\tfn(chunk);\n\t\tchunk = chunk.next;\n\t}\n};\n\nChunk.prototype.eachPrevious = function eachPrevious (fn) {\n\tvar chunk = this;\n\twhile (chunk) {\n\t\tfn(chunk);\n\t\tchunk = chunk.previous;\n\t}\n};\n\nChunk.prototype.edit = function edit (content, storeName, contentOnly) {\n\tthis.content = content;\n\tif (!contentOnly) {\n\t\tthis.intro = '';\n\t\tthis.outro = '';\n\t}\n\tthis.storeName = storeName;\n\n\tthis.edited = true;\n\n\treturn this;\n};\n\nChunk.prototype.prependLeft = function prependLeft (content) {\n\tthis.outro = content + this.outro;\n};\n\nChunk.prototype.prependRight = function prependRight (content) {\n\tthis.intro = content + this.intro;\n};\n\nChunk.prototype.split = function split (index) {\n\tvar sliceIndex = index - this.start;\n\n\tvar originalBefore = this.original.slice(0, sliceIndex);\n\tvar originalAfter = this.original.slice(sliceIndex);\n\n\tthis.original = originalBefore;\n\n\tvar newChunk = new Chunk(index, this.end, originalAfter);\n\tnewChunk.outro = this.outro;\n\tthis.outro = '';\n\n\tthis.end = index;\n\n\tif (this.edited) {\n\t\t// TODO is this block necessary?...\n\t\tnewChunk.edit('', false);\n\t\tthis.content = '';\n\t} else {\n\t\tthis.content = originalBefore;\n\t}\n\n\tnewChunk.next = this.next;\n\tif (newChunk.next) { newChunk.next.previous = newChunk; }\n\tnewChunk.previous = this;\n\tthis.next = newChunk;\n\n\treturn newChunk;\n};\n\nChunk.prototype.toString = function toString () {\n\treturn this.intro + this.content + this.outro;\n};\n\nChunk.prototype.trimEnd = function trimEnd (rx) {\n\tthis.outro = this.outro.replace(rx, '');\n\tif (this.outro.length) { return true; }\n\n\tvar trimmed = this.content.replace(rx, '');\n\n\tif (trimmed.length) {\n\t\tif (trimmed !== this.content) {\n\t\t\tthis.split(this.start + trimmed.length).edit('', undefined, true);\n\t\t}\n\t\treturn true;\n\n\t} else {\n\t\tthis.edit('', undefined, true);\n\n\t\tthis.intro = this.intro.replace(rx, '');\n\t\tif (this.intro.length) { return true; }\n\t}\n};\n\nChunk.prototype.trimStart = function trimStart (rx) {\n\tthis.intro = this.intro.replace(rx, '');\n\tif (this.intro.length) { return true; }\n\n\tvar trimmed = this.content.replace(rx, '');\n\n\tif (trimmed.length) {\n\t\tif (trimmed !== this.content) {\n\t\t\tthis.split(this.end - trimmed.length);\n\t\t\tthis.edit('', undefined, true);\n\t\t}\n\t\treturn true;\n\n\t} else {\n\t\tthis.edit('', undefined, true);\n\n\t\tthis.outro = this.outro.replace(rx, '');\n\t\tif (this.outro.length) { return true; }\n\t}\n};\n\nvar btoa$2 = function () {\n\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n};\nif (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n\tbtoa$2 = function (str) { return window.btoa(unescape(encodeURIComponent(str))); };\n} else if (typeof Buffer === 'function') {\n\tbtoa$2 = function (str) { return Buffer.from(str, 'utf-8').toString('base64'); };\n}\n\nvar SourceMap$1 = function SourceMap(properties) {\n\tthis.version = 3;\n\tthis.file = properties.file;\n\tthis.sources = properties.sources;\n\tthis.sourcesContent = properties.sourcesContent;\n\tthis.names = properties.names;\n\tthis.mappings = encode(properties.mappings);\n};\n\nSourceMap$1.prototype.toString = function toString () {\n\treturn JSON.stringify(this);\n};\n\nSourceMap$1.prototype.toUrl = function toUrl () {\n\treturn 'data:application/json;charset=utf-8;base64,' + btoa$2(this.toString());\n};\n\nfunction guessIndent(code) {\n\tvar lines = code.split('\\n');\n\n\tvar tabbed = lines.filter(function (line) { return /^\\t+/.test(line); });\n\tvar spaced = lines.filter(function (line) { return /^ {2,}/.test(line); });\n\n\tif (tabbed.length === 0 && spaced.length === 0) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif (tabbed.length >= spaced.length) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tvar min = spaced.reduce(function (previous, current) {\n\t\tvar numSpaces = /^ +/.exec(current)[0].length;\n\t\treturn Math.min(numSpaces, previous);\n\t}, Infinity);\n\n\treturn new Array(min + 1).join(' ');\n}\n\nfunction getRelativePath(from, to) {\n\tvar fromParts = from.split(/[/\\\\]/);\n\tvar toParts = to.split(/[/\\\\]/);\n\n\tfromParts.pop(); // get dirname\n\n\twhile (fromParts[0] === toParts[0]) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif (fromParts.length) {\n\t\tvar i = fromParts.length;\n\t\twhile (i--) { fromParts[i] = '..'; }\n\t}\n\n\treturn fromParts.concat(toParts).join('/');\n}\n\nvar toString$1 = Object.prototype.toString;\n\nfunction isObject(thing) {\n\treturn toString$1.call(thing) === '[object Object]';\n}\n\nfunction getLocator$1(source) {\n\tvar originalLines = source.split('\\n');\n\tvar lineOffsets = [];\n\n\tfor (var i = 0, pos = 0; i < originalLines.length; i++) {\n\t\tlineOffsets.push(pos);\n\t\tpos += originalLines[i].length + 1;\n\t}\n\n\treturn function locate(index) {\n\t\tvar i = 0;\n\t\tvar j = lineOffsets.length;\n\t\twhile (i < j) {\n\t\t\tvar m = (i + j) >> 1;\n\t\t\tif (index < lineOffsets[m]) {\n\t\t\t\tj = m;\n\t\t\t} else {\n\t\t\t\ti = m + 1;\n\t\t\t}\n\t\t}\n\t\tvar line = i - 1;\n\t\tvar column = index - lineOffsets[line];\n\t\treturn { line: line, column: column };\n\t};\n}\n\nvar Mappings = function Mappings(hires) {\n\tthis.hires = hires;\n\tthis.generatedCodeLine = 0;\n\tthis.generatedCodeColumn = 0;\n\tthis.raw = [];\n\tthis.rawSegments = this.raw[this.generatedCodeLine] = [];\n\tthis.pending = null;\n};\n\nMappings.prototype.addEdit = function addEdit (sourceIndex, content, loc, nameIndex) {\n\tif (content.length) {\n\t\tvar segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];\n\t\tif (nameIndex >= 0) {\n\t\t\tsegment.push(nameIndex);\n\t\t}\n\t\tthis.rawSegments.push(segment);\n\t} else if (this.pending) {\n\t\tthis.rawSegments.push(this.pending);\n\t}\n\n\tthis.advance(content);\n\tthis.pending = null;\n};\n\nMappings.prototype.addUneditedChunk = function addUneditedChunk (sourceIndex, chunk, original, loc, sourcemapLocations) {\n\tvar originalCharIndex = chunk.start;\n\tvar first = true;\n\n\twhile (originalCharIndex < chunk.end) {\n\t\tif (this.hires || first || sourcemapLocations[originalCharIndex]) {\n\t\t\tthis.rawSegments.push([this.generatedCodeColumn, sourceIndex, loc.line, loc.column]);\n\t\t}\n\n\t\tif (original[originalCharIndex] === '\\n') {\n\t\t\tloc.line += 1;\n\t\t\tloc.column = 0;\n\t\t\tthis.generatedCodeLine += 1;\n\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t\tthis.generatedCodeColumn = 0;\n\t\t} else {\n\t\t\tloc.column += 1;\n\t\t\tthis.generatedCodeColumn += 1;\n\t\t}\n\n\t\toriginalCharIndex += 1;\n\t\tfirst = false;\n\t}\n\n\tthis.pending = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];\n};\n\nMappings.prototype.advance = function advance (str) {\n\tif (!str) { return; }\n\n\tvar lines = str.split('\\n');\n\n\tif (lines.length > 1) {\n\t\tfor (var i = 0; i < lines.length - 1; i++) {\n\t\t\tthis.generatedCodeLine++;\n\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t}\n\t\tthis.generatedCodeColumn = 0;\n\t}\n\n\tthis.generatedCodeColumn += lines[lines.length - 1].length;\n};\n\nvar n = '\\n';\n\nvar warned = {\n\tinsertLeft: false,\n\tinsertRight: false,\n\tstoreName: false\n};\n\nvar MagicString = function MagicString(string, options) {\n\tif ( options === void 0 ) options = {};\n\n\tvar chunk = new Chunk(0, string.length, string);\n\n\tObject.defineProperties(this, {\n\t\toriginal:              { writable: true, value: string },\n\t\toutro:                 { writable: true, value: '' },\n\t\tintro:                 { writable: true, value: '' },\n\t\tfirstChunk:            { writable: true, value: chunk },\n\t\tlastChunk:             { writable: true, value: chunk },\n\t\tlastSearchedChunk:     { writable: true, value: chunk },\n\t\tbyStart:               { writable: true, value: {} },\n\t\tbyEnd:                 { writable: true, value: {} },\n\t\tfilename:              { writable: true, value: options.filename },\n\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\tsourcemapLocations:    { writable: true, value: {} },\n\t\tstoredNames:           { writable: true, value: {} },\n\t\tindentStr:             { writable: true, value: guessIndent(string) }\n\t});\n\n\tthis.byStart[0] = chunk;\n\tthis.byEnd[string.length] = chunk;\n};\n\nMagicString.prototype.addSourcemapLocation = function addSourcemapLocation (char) {\n\tthis.sourcemapLocations[char] = true;\n};\n\nMagicString.prototype.append = function append (content) {\n\tif (typeof content !== 'string') { throw new TypeError('outro content must be a string'); }\n\n\tthis.outro += content;\n\treturn this;\n};\n\nMagicString.prototype.appendLeft = function appendLeft (index, content) {\n\tif (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }\n\n\tthis._split(index);\n\n\tvar chunk = this.byEnd[index];\n\n\tif (chunk) {\n\t\tchunk.appendLeft(content);\n\t} else {\n\t\tthis.intro += content;\n\t}\n\treturn this;\n};\n\nMagicString.prototype.appendRight = function appendRight (index, content) {\n\tif (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }\n\n\tthis._split(index);\n\n\tvar chunk = this.byStart[index];\n\n\tif (chunk) {\n\t\tchunk.appendRight(content);\n\t} else {\n\t\tthis.outro += content;\n\t}\n\treturn this;\n};\n\nMagicString.prototype.clone = function clone () {\n\tvar cloned = new MagicString(this.original, { filename: this.filename });\n\n\tvar originalChunk = this.firstChunk;\n\tvar clonedChunk = (cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone());\n\n\twhile (originalChunk) {\n\t\tcloned.byStart[clonedChunk.start] = clonedChunk;\n\t\tcloned.byEnd[clonedChunk.end] = clonedChunk;\n\n\t\tvar nextOriginalChunk = originalChunk.next;\n\t\tvar nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\tif (nextClonedChunk) {\n\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\tclonedChunk = nextClonedChunk;\n\t\t}\n\n\t\toriginalChunk = nextOriginalChunk;\n\t}\n\n\tcloned.lastChunk = clonedChunk;\n\n\tif (this.indentExclusionRanges) {\n\t\tcloned.indentExclusionRanges = this.indentExclusionRanges.slice();\n\t}\n\n\tObject.keys(this.sourcemapLocations).forEach(function (loc) {\n\t\tcloned.sourcemapLocations[loc] = true;\n\t});\n\n\treturn cloned;\n};\n\nMagicString.prototype.generateDecodedMap = function generateDecodedMap (options) {\n\t\tvar this$1 = this;\n\n\toptions = options || {};\n\n\tvar sourceIndex = 0;\n\tvar names = Object.keys(this.storedNames);\n\tvar mappings = new Mappings(options.hires);\n\n\tvar locate = getLocator$1(this.original);\n\n\tif (this.intro) {\n\t\tmappings.advance(this.intro);\n\t}\n\n\tthis.firstChunk.eachNext(function (chunk) {\n\t\tvar loc = locate(chunk.start);\n\n\t\tif (chunk.intro.length) { mappings.advance(chunk.intro); }\n\n\t\tif (chunk.edited) {\n\t\t\tmappings.addEdit(\n\t\t\t\tsourceIndex,\n\t\t\t\tchunk.content,\n\t\t\t\tloc,\n\t\t\t\tchunk.storeName ? names.indexOf(chunk.original) : -1\n\t\t\t);\n\t\t} else {\n\t\t\tmappings.addUneditedChunk(sourceIndex, chunk, this$1.original, loc, this$1.sourcemapLocations);\n\t\t}\n\n\t\tif (chunk.outro.length) { mappings.advance(chunk.outro); }\n\t});\n\n\treturn {\n\t\tfile: options.file ? options.file.split(/[/\\\\]/).pop() : null,\n\t\tsources: [options.source ? getRelativePath(options.file || '', options.source) : null],\n\t\tsourcesContent: options.includeContent ? [this.original] : [null],\n\t\tnames: names,\n\t\tmappings: mappings.raw\n\t};\n};\n\nMagicString.prototype.generateMap = function generateMap (options) {\n\treturn new SourceMap$1(this.generateDecodedMap(options));\n};\n\nMagicString.prototype.getIndentString = function getIndentString () {\n\treturn this.indentStr === null ? '\\t' : this.indentStr;\n};\n\nMagicString.prototype.indent = function indent (indentStr, options) {\n\tvar pattern = /^[^\\r\\n]/gm;\n\n\tif (isObject(indentStr)) {\n\t\toptions = indentStr;\n\t\tindentStr = undefined;\n\t}\n\n\tindentStr = indentStr !== undefined ? indentStr : this.indentStr || '\\t';\n\n\tif (indentStr === '') { return this; } // noop\n\n\toptions = options || {};\n\n\t// Process exclusion ranges\n\tvar isExcluded = {};\n\n\tif (options.exclude) {\n\t\tvar exclusions =\n\t\t\ttypeof options.exclude[0] === 'number' ? [options.exclude] : options.exclude;\n\t\texclusions.forEach(function (exclusion) {\n\t\t\tfor (var i = exclusion[0]; i < exclusion[1]; i += 1) {\n\t\t\t\tisExcluded[i] = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tvar shouldIndentNextCharacter = options.indentStart !== false;\n\tvar replacer = function (match) {\n\t\tif (shouldIndentNextCharacter) { return (\"\" + indentStr + match); }\n\t\tshouldIndentNextCharacter = true;\n\t\treturn match;\n\t};\n\n\tthis.intro = this.intro.replace(pattern, replacer);\n\n\tvar charIndex = 0;\n\tvar chunk = this.firstChunk;\n\n\twhile (chunk) {\n\t\tvar end = chunk.end;\n\n\t\tif (chunk.edited) {\n\t\t\tif (!isExcluded[charIndex]) {\n\t\t\t\tchunk.content = chunk.content.replace(pattern, replacer);\n\n\t\t\t\tif (chunk.content.length) {\n\t\t\t\t\tshouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === '\\n';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tcharIndex = chunk.start;\n\n\t\t\twhile (charIndex < end) {\n\t\t\t\tif (!isExcluded[charIndex]) {\n\t\t\t\t\tvar char = this.original[charIndex];\n\n\t\t\t\t\tif (char === '\\n') {\n\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t} else if (char !== '\\r' && shouldIndentNextCharacter) {\n\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\tif (charIndex === chunk.start) {\n\t\t\t\t\t\t\tchunk.prependRight(indentStr);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._splitChunk(chunk, charIndex);\n\t\t\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t\t\t\tchunk.prependRight(indentStr);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcharIndex += 1;\n\t\t\t}\n\t\t}\n\n\t\tcharIndex = chunk.end;\n\t\tchunk = chunk.next;\n\t}\n\n\tthis.outro = this.outro.replace(pattern, replacer);\n\n\treturn this;\n};\n\nMagicString.prototype.insert = function insert () {\n\tthrow new Error('magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)');\n};\n\nMagicString.prototype.insertLeft = function insertLeft (index, content) {\n\tif (!warned.insertLeft) {\n\t\tconsole.warn('magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead'); // eslint-disable-line no-console\n\t\twarned.insertLeft = true;\n\t}\n\n\treturn this.appendLeft(index, content);\n};\n\nMagicString.prototype.insertRight = function insertRight (index, content) {\n\tif (!warned.insertRight) {\n\t\tconsole.warn('magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead'); // eslint-disable-line no-console\n\t\twarned.insertRight = true;\n\t}\n\n\treturn this.prependRight(index, content);\n};\n\nMagicString.prototype.move = function move (start, end, index) {\n\tif (index >= start && index <= end) { throw new Error('Cannot move a selection inside itself'); }\n\n\tthis._split(start);\n\tthis._split(end);\n\tthis._split(index);\n\n\tvar first = this.byStart[start];\n\tvar last = this.byEnd[end];\n\n\tvar oldLeft = first.previous;\n\tvar oldRight = last.next;\n\n\tvar newRight = this.byStart[index];\n\tif (!newRight && last === this.lastChunk) { return this; }\n\tvar newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\tif (oldLeft) { oldLeft.next = oldRight; }\n\tif (oldRight) { oldRight.previous = oldLeft; }\n\n\tif (newLeft) { newLeft.next = first; }\n\tif (newRight) { newRight.previous = last; }\n\n\tif (!first.previous) { this.firstChunk = last.next; }\n\tif (!last.next) {\n\t\tthis.lastChunk = first.previous;\n\t\tthis.lastChunk.next = null;\n\t}\n\n\tfirst.previous = newLeft;\n\tlast.next = newRight || null;\n\n\tif (!newLeft) { this.firstChunk = first; }\n\tif (!newRight) { this.lastChunk = last; }\n\treturn this;\n};\n\nMagicString.prototype.overwrite = function overwrite (start, end, content, options) {\n\tif (typeof content !== 'string') { throw new TypeError('replacement content must be a string'); }\n\n\twhile (start < 0) { start += this.original.length; }\n\twhile (end < 0) { end += this.original.length; }\n\n\tif (end > this.original.length) { throw new Error('end is out of bounds'); }\n\tif (start === end)\n\t\t{ throw new Error('Cannot overwrite a zero-length range – use appendLeft or prependRight instead'); }\n\n\tthis._split(start);\n\tthis._split(end);\n\n\tif (options === true) {\n\t\tif (!warned.storeName) {\n\t\t\tconsole.warn('The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string'); // eslint-disable-line no-console\n\t\t\twarned.storeName = true;\n\t\t}\n\n\t\toptions = { storeName: true };\n\t}\n\tvar storeName = options !== undefined ? options.storeName : false;\n\tvar contentOnly = options !== undefined ? options.contentOnly : false;\n\n\tif (storeName) {\n\t\tvar original = this.original.slice(start, end);\n\t\tthis.storedNames[original] = true;\n\t}\n\n\tvar first = this.byStart[start];\n\tvar last = this.byEnd[end];\n\n\tif (first) {\n\t\tif (end > first.end && first.next !== this.byStart[first.end]) {\n\t\t\tthrow new Error('Cannot overwrite across a split point');\n\t\t}\n\n\t\tfirst.edit(content, storeName, contentOnly);\n\n\t\tif (first !== last) {\n\t\t\tvar chunk = first.next;\n\t\t\twhile (chunk !== last) {\n\t\t\t\tchunk.edit('', false);\n\t\t\t\tchunk = chunk.next;\n\t\t\t}\n\n\t\t\tchunk.edit('', false);\n\t\t}\n\t} else {\n\t\t// must be inserting at the end\n\t\tvar newChunk = new Chunk(start, end, '').edit(content, storeName);\n\n\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\tlast.next = newChunk;\n\t\tnewChunk.previous = last;\n\t}\n\treturn this;\n};\n\nMagicString.prototype.prepend = function prepend (content) {\n\tif (typeof content !== 'string') { throw new TypeError('outro content must be a string'); }\n\n\tthis.intro = content + this.intro;\n\treturn this;\n};\n\nMagicString.prototype.prependLeft = function prependLeft (index, content) {\n\tif (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }\n\n\tthis._split(index);\n\n\tvar chunk = this.byEnd[index];\n\n\tif (chunk) {\n\t\tchunk.prependLeft(content);\n\t} else {\n\t\tthis.intro = content + this.intro;\n\t}\n\treturn this;\n};\n\nMagicString.prototype.prependRight = function prependRight (index, content) {\n\tif (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }\n\n\tthis._split(index);\n\n\tvar chunk = this.byStart[index];\n\n\tif (chunk) {\n\t\tchunk.prependRight(content);\n\t} else {\n\t\tthis.outro = content + this.outro;\n\t}\n\treturn this;\n};\n\nMagicString.prototype.remove = function remove (start, end) {\n\twhile (start < 0) { start += this.original.length; }\n\twhile (end < 0) { end += this.original.length; }\n\n\tif (start === end) { return this; }\n\n\tif (start < 0 || end > this.original.length) { throw new Error('Character is out of bounds'); }\n\tif (start > end) { throw new Error('end must be greater than start'); }\n\n\tthis._split(start);\n\tthis._split(end);\n\n\tvar chunk = this.byStart[start];\n\n\twhile (chunk) {\n\t\tchunk.intro = '';\n\t\tchunk.outro = '';\n\t\tchunk.edit('');\n\n\t\tchunk = end > chunk.end ? this.byStart[chunk.end] : null;\n\t}\n\treturn this;\n};\n\nMagicString.prototype.lastChar = function lastChar () {\n\tif (this.outro.length)\n\t\t{ return this.outro[this.outro.length - 1]; }\n\tvar chunk = this.lastChunk;\n\tdo {\n\t\tif (chunk.outro.length)\n\t\t\t{ return chunk.outro[chunk.outro.length - 1]; }\n\t\tif (chunk.content.length)\n\t\t\t{ return chunk.content[chunk.content.length - 1]; }\n\t\tif (chunk.intro.length)\n\t\t\t{ return chunk.intro[chunk.intro.length - 1]; }\n\t} while (chunk = chunk.previous);\n\tif (this.intro.length)\n\t\t{ return this.intro[this.intro.length - 1]; }\n\treturn '';\n};\n\nMagicString.prototype.lastLine = function lastLine () {\n\tvar lineIndex = this.outro.lastIndexOf(n);\n\tif (lineIndex !== -1)\n\t\t{ return this.outro.substr(lineIndex + 1); }\n\tvar lineStr = this.outro;\n\tvar chunk = this.lastChunk;\n\tdo {\n\t\tif (chunk.outro.length > 0) {\n\t\t\tlineIndex = chunk.outro.lastIndexOf(n);\n\t\t\tif (lineIndex !== -1)\n\t\t\t\t{ return chunk.outro.substr(lineIndex + 1) + lineStr; }\n\t\t\tlineStr = chunk.outro + lineStr;\n\t\t}\n\n\t\tif (chunk.content.length > 0) {\n\t\t\tlineIndex = chunk.content.lastIndexOf(n);\n\t\t\tif (lineIndex !== -1)\n\t\t\t\t{ return chunk.content.substr(lineIndex + 1) + lineStr; }\n\t\t\tlineStr = chunk.content + lineStr;\n\t\t}\n\n\t\tif (chunk.intro.length > 0) {\n\t\t\tlineIndex = chunk.intro.lastIndexOf(n);\n\t\t\tif (lineIndex !== -1)\n\t\t\t\t{ return chunk.intro.substr(lineIndex + 1) + lineStr; }\n\t\t\tlineStr = chunk.intro + lineStr;\n\t\t}\n\t} while (chunk = chunk.previous);\n\tlineIndex = this.intro.lastIndexOf(n);\n\tif (lineIndex !== -1)\n\t\t{ return this.intro.substr(lineIndex + 1) + lineStr; }\n\treturn this.intro + lineStr;\n};\n\nMagicString.prototype.slice = function slice (start, end) {\n\t\tif ( start === void 0 ) start = 0;\n\t\tif ( end === void 0 ) end = this.original.length;\n\n\twhile (start < 0) { start += this.original.length; }\n\twhile (end < 0) { end += this.original.length; }\n\n\tvar result = '';\n\n\t// find start chunk\n\tvar chunk = this.firstChunk;\n\twhile (chunk && (chunk.start > start || chunk.end <= start)) {\n\t\t// found end chunk before start\n\t\tif (chunk.start < end && chunk.end >= end) {\n\t\t\treturn result;\n\t\t}\n\n\t\tchunk = chunk.next;\n\t}\n\n\tif (chunk && chunk.edited && chunk.start !== start)\n\t\t{ throw new Error((\"Cannot use replaced character \" + start + \" as slice start anchor.\")); }\n\n\tvar startChunk = chunk;\n\twhile (chunk) {\n\t\tif (chunk.intro && (startChunk !== chunk || chunk.start === start)) {\n\t\t\tresult += chunk.intro;\n\t\t}\n\n\t\tvar containsEnd = chunk.start < end && chunk.end >= end;\n\t\tif (containsEnd && chunk.edited && chunk.end !== end)\n\t\t\t{ throw new Error((\"Cannot use replaced character \" + end + \" as slice end anchor.\")); }\n\n\t\tvar sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\tvar sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\tresult += chunk.content.slice(sliceStart, sliceEnd);\n\n\t\tif (chunk.outro && (!containsEnd || chunk.end === end)) {\n\t\t\tresult += chunk.outro;\n\t\t}\n\n\t\tif (containsEnd) {\n\t\t\tbreak;\n\t\t}\n\n\t\tchunk = chunk.next;\n\t}\n\n\treturn result;\n};\n\n// TODO deprecate this? not really very useful\nMagicString.prototype.snip = function snip (start, end) {\n\tvar clone = this.clone();\n\tclone.remove(0, start);\n\tclone.remove(end, clone.original.length);\n\n\treturn clone;\n};\n\nMagicString.prototype._split = function _split (index) {\n\tif (this.byStart[index] || this.byEnd[index]) { return; }\n\n\tvar chunk = this.lastSearchedChunk;\n\tvar searchForward = index > chunk.end;\n\n\twhile (chunk) {\n\t\tif (chunk.contains(index)) { return this._splitChunk(chunk, index); }\n\n\t\tchunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];\n\t}\n};\n\nMagicString.prototype._splitChunk = function _splitChunk (chunk, index) {\n\tif (chunk.edited && chunk.content.length) {\n\t\t// zero-length edited chunks are a special case (overlapping replacements)\n\t\tvar loc = getLocator$1(this.original)(index);\n\t\tthrow new Error(\n\t\t\t(\"Cannot split a chunk that has already been edited (\" + (loc.line) + \":\" + (loc.column) + \" – \\\"\" + (chunk.original) + \"\\\")\")\n\t\t);\n\t}\n\n\tvar newChunk = chunk.split(index);\n\n\tthis.byEnd[index] = chunk;\n\tthis.byStart[index] = newChunk;\n\tthis.byEnd[newChunk.end] = newChunk;\n\n\tif (chunk === this.lastChunk) { this.lastChunk = newChunk; }\n\n\tthis.lastSearchedChunk = chunk;\n\treturn true;\n};\n\nMagicString.prototype.toString = function toString () {\n\tvar str = this.intro;\n\n\tvar chunk = this.firstChunk;\n\twhile (chunk) {\n\t\tstr += chunk.toString();\n\t\tchunk = chunk.next;\n\t}\n\n\treturn str + this.outro;\n};\n\nMagicString.prototype.isEmpty = function isEmpty () {\n\tvar chunk = this.firstChunk;\n\tdo {\n\t\tif (chunk.intro.length && chunk.intro.trim() ||\n\t\t\t\tchunk.content.length && chunk.content.trim() ||\n\t\t\t\tchunk.outro.length && chunk.outro.trim())\n\t\t\t{ return false; }\n\t} while (chunk = chunk.next);\n\treturn true;\n};\n\nMagicString.prototype.length = function length () {\n\tvar chunk = this.firstChunk;\n\tvar length = 0;\n\tdo {\n\t\tlength += chunk.intro.length + chunk.content.length + chunk.outro.length;\n\t} while (chunk = chunk.next);\n\treturn length;\n};\n\nMagicString.prototype.trimLines = function trimLines () {\n\treturn this.trim('[\\\\r\\\\n]');\n};\n\nMagicString.prototype.trim = function trim (charType) {\n\treturn this.trimStart(charType).trimEnd(charType);\n};\n\nMagicString.prototype.trimEndAborted = function trimEndAborted (charType) {\n\tvar rx = new RegExp((charType || '\\\\s') + '+$');\n\n\tthis.outro = this.outro.replace(rx, '');\n\tif (this.outro.length) { return true; }\n\n\tvar chunk = this.lastChunk;\n\n\tdo {\n\t\tvar end = chunk.end;\n\t\tvar aborted = chunk.trimEnd(rx);\n\n\t\t// if chunk was trimmed, we have a new lastChunk\n\t\tif (chunk.end !== end) {\n\t\t\tif (this.lastChunk === chunk) {\n\t\t\t\tthis.lastChunk = chunk.next;\n\t\t\t}\n\n\t\t\tthis.byEnd[chunk.end] = chunk;\n\t\t\tthis.byStart[chunk.next.start] = chunk.next;\n\t\t\tthis.byEnd[chunk.next.end] = chunk.next;\n\t\t}\n\n\t\tif (aborted) { return true; }\n\t\tchunk = chunk.previous;\n\t} while (chunk);\n\n\treturn false;\n};\n\nMagicString.prototype.trimEnd = function trimEnd (charType) {\n\tthis.trimEndAborted(charType);\n\treturn this;\n};\nMagicString.prototype.trimStartAborted = function trimStartAborted (charType) {\n\tvar rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\n\tthis.intro = this.intro.replace(rx, '');\n\tif (this.intro.length) { return true; }\n\n\tvar chunk = this.firstChunk;\n\n\tdo {\n\t\tvar end = chunk.end;\n\t\tvar aborted = chunk.trimStart(rx);\n\n\t\tif (chunk.end !== end) {\n\t\t\t// special case...\n\t\t\tif (chunk === this.lastChunk) { this.lastChunk = chunk.next; }\n\n\t\t\tthis.byEnd[chunk.end] = chunk;\n\t\t\tthis.byStart[chunk.next.start] = chunk.next;\n\t\t\tthis.byEnd[chunk.next.end] = chunk.next;\n\t\t}\n\n\t\tif (aborted) { return true; }\n\t\tchunk = chunk.next;\n\t} while (chunk);\n\n\treturn false;\n};\n\nMagicString.prototype.trimStart = function trimStart (charType) {\n\tthis.trimStartAborted(charType);\n\treturn this;\n};\n\nconst UNKNOWN = {};\nfunction gather_possible_values(node, set) {\n    if (node.type === 'Literal') {\n        set.add(node.value);\n    }\n    else if (node.type === 'ConditionalExpression') {\n        gather_possible_values(node.consequent, set);\n        gather_possible_values(node.alternate, set);\n    }\n    else {\n        set.add(UNKNOWN);\n    }\n}\n\nvar BlockAppliesToNode;\n(function (BlockAppliesToNode) {\n    BlockAppliesToNode[BlockAppliesToNode[\"NotPossible\"] = 0] = \"NotPossible\";\n    BlockAppliesToNode[BlockAppliesToNode[\"Possible\"] = 1] = \"Possible\";\n    BlockAppliesToNode[BlockAppliesToNode[\"UnknownSelectorType\"] = 2] = \"UnknownSelectorType\";\n})(BlockAppliesToNode || (BlockAppliesToNode = {}));\nvar NodeExist;\n(function (NodeExist) {\n    NodeExist[NodeExist[\"Probably\"] = 1] = \"Probably\";\n    NodeExist[NodeExist[\"Definitely\"] = 2] = \"Definitely\";\n})(NodeExist || (NodeExist = {}));\nconst whitelist_attribute_selector = new Map([\n    ['details', new Set(['open'])]\n]);\nclass Selector$1 {\n    constructor(node, stylesheet) {\n        this.node = node;\n        this.stylesheet = stylesheet;\n        this.blocks = group_selectors(node);\n        // take trailing :global(...) selectors out of consideration\n        let i = this.blocks.length;\n        while (i > 0) {\n            if (!this.blocks[i - 1].global)\n                break;\n            i -= 1;\n        }\n        this.local_blocks = this.blocks.slice(0, i);\n        const host_only = this.blocks.length === 1 && this.blocks[0].host;\n        const root_only = this.blocks.length === 1 && this.blocks[0].root;\n        this.used = this.local_blocks.length === 0 || host_only || root_only;\n    }\n    apply(node) {\n        const to_encapsulate = [];\n        apply_selector(this.local_blocks.slice(), node, to_encapsulate);\n        if (to_encapsulate.length > 0) {\n            to_encapsulate.forEach(({ node, block }) => {\n                this.stylesheet.nodes_with_css_class.add(node);\n                block.should_encapsulate = true;\n            });\n            this.used = true;\n        }\n    }\n    minify(code) {\n        let c = null;\n        this.blocks.forEach((block, i) => {\n            if (i > 0) {\n                if (block.start - c > 1) {\n                    code.overwrite(c, block.start, block.combinator.name || ' ');\n                }\n            }\n            c = block.end;\n        });\n    }\n    transform(code, attr, max_amount_class_specificity_increased) {\n        const amount_class_specificity_to_increase = max_amount_class_specificity_increased - this.blocks.filter(block => block.should_encapsulate).length;\n        function remove_global_pseudo_class(selector) {\n            const first = selector.children[0];\n            const last = selector.children[selector.children.length - 1];\n            code.remove(selector.start, first.start).remove(last.end, selector.end);\n        }\n        function encapsulate_block(block, attr) {\n            for (const selector of block.selectors) {\n                if (selector.type === 'PseudoClassSelector' && selector.name === 'global') {\n                    remove_global_pseudo_class(selector);\n                }\n            }\n            let i = block.selectors.length;\n            while (i--) {\n                const selector = block.selectors[i];\n                if (selector.type === 'PseudoElementSelector' || selector.type === 'PseudoClassSelector') {\n                    if (selector.name !== 'root' && selector.name !== 'host') {\n                        if (i === 0)\n                            code.prependRight(selector.start, attr);\n                    }\n                    continue;\n                }\n                if (selector.type === 'TypeSelector' && selector.name === '*') {\n                    code.overwrite(selector.start, selector.end, attr);\n                }\n                else {\n                    code.appendLeft(selector.end, attr);\n                }\n                break;\n            }\n        }\n        this.blocks.forEach((block, index) => {\n            if (block.global) {\n                remove_global_pseudo_class(block.selectors[0]);\n            }\n            if (block.should_encapsulate)\n                encapsulate_block(block, index === this.blocks.length - 1 ? attr.repeat(amount_class_specificity_to_increase + 1) : attr);\n        });\n    }\n    validate(component) {\n        let start = 0;\n        let end = this.blocks.length;\n        for (; start < end; start += 1) {\n            if (!this.blocks[start].global)\n                break;\n        }\n        for (; end > start; end -= 1) {\n            if (!this.blocks[end - 1].global)\n                break;\n        }\n        for (let i = start; i < end; i += 1) {\n            if (this.blocks[i].global) {\n                return component.error(this.blocks[i].selectors[0], compiler_errors.css_invalid_global);\n            }\n        }\n        this.validate_global_with_multiple_selectors(component);\n    }\n    validate_global_with_multiple_selectors(component) {\n        if (this.blocks.length === 1 && this.blocks[0].selectors.length === 1) {\n            // standalone :global() with multiple selectors is OK\n            return;\n        }\n        for (const block of this.blocks) {\n            for (const selector of block.selectors) {\n                if (selector.type === 'PseudoClassSelector' && selector.name === 'global') {\n                    if (/[^\\\\],(?!([^([]+[^\\\\]|[^([\\\\])[)\\]])/.test(selector.children[0].value)) {\n                        component.error(selector, compiler_errors.css_invalid_global_selector);\n                    }\n                }\n            }\n        }\n    }\n    get_amount_class_specificity_increased() {\n        let count = 0;\n        for (const block of this.blocks) {\n            if (block.should_encapsulate) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\nfunction apply_selector(blocks, node, to_encapsulate) {\n    const block = blocks.pop();\n    if (!block)\n        return false;\n    if (!node) {\n        return ((block.global && blocks.every(block => block.global)) ||\n            (block.host && blocks.length === 0));\n    }\n    switch (block_might_apply_to_node(block, node)) {\n        case BlockAppliesToNode.NotPossible:\n            return false;\n        case BlockAppliesToNode.UnknownSelectorType:\n            // bail. TODO figure out what these could be\n            to_encapsulate.push({ node, block });\n            return true;\n    }\n    if (block.combinator) {\n        if (block.combinator.type === 'WhiteSpace') {\n            for (const ancestor_block of blocks) {\n                if (ancestor_block.global) {\n                    continue;\n                }\n                if (ancestor_block.host) {\n                    to_encapsulate.push({ node, block });\n                    return true;\n                }\n                let parent = node;\n                while (parent = get_element_parent(parent)) {\n                    if (block_might_apply_to_node(ancestor_block, parent) !== BlockAppliesToNode.NotPossible) {\n                        to_encapsulate.push({ node: parent, block: ancestor_block });\n                    }\n                }\n                if (to_encapsulate.length) {\n                    to_encapsulate.push({ node, block });\n                    return true;\n                }\n            }\n            if (blocks.every(block => block.global)) {\n                to_encapsulate.push({ node, block });\n                return true;\n            }\n            return false;\n        }\n        else if (block.combinator.name === '>') {\n            const has_global_parent = blocks.every(block => block.global);\n            if (has_global_parent || apply_selector(blocks, get_element_parent(node), to_encapsulate)) {\n                to_encapsulate.push({ node, block });\n                return true;\n            }\n            return false;\n        }\n        else if (block.combinator.name === '+' || block.combinator.name === '~') {\n            const siblings = get_possible_element_siblings(node, block.combinator.name === '+');\n            let has_match = false;\n            // NOTE: if we have :global(), we couldn't figure out what is selected within `:global` due to the\n            // css-tree limitation that does not parse the inner selector of :global\n            // so unless we are sure there will be no sibling to match, we will consider it as matched\n            const has_global = blocks.some(block => block.global);\n            if (has_global) {\n                if (siblings.size === 0 && get_element_parent(node) !== null) {\n                    return false;\n                }\n                to_encapsulate.push({ node, block });\n                return true;\n            }\n            for (const possible_sibling of siblings.keys()) {\n                if (apply_selector(blocks.slice(), possible_sibling, to_encapsulate)) {\n                    to_encapsulate.push({ node, block });\n                    has_match = true;\n                }\n            }\n            return has_match;\n        }\n        // TODO other combinators\n        to_encapsulate.push({ node, block });\n        return true;\n    }\n    to_encapsulate.push({ node, block });\n    return true;\n}\nfunction block_might_apply_to_node(block, node) {\n    let i = block.selectors.length;\n    while (i--) {\n        const selector = block.selectors[i];\n        const name = typeof selector.name === 'string' && selector.name.replace(/\\\\(.)/g, '$1');\n        if (selector.type === 'PseudoClassSelector' && (name === 'host' || name === 'root')) {\n            return BlockAppliesToNode.NotPossible;\n        }\n        if (block.selectors.length === 1 && selector.type === 'PseudoClassSelector' && name === 'global') {\n            return BlockAppliesToNode.NotPossible;\n        }\n        if (selector.type === 'PseudoClassSelector' || selector.type === 'PseudoElementSelector') {\n            continue;\n        }\n        if (selector.type === 'ClassSelector') {\n            if (!attribute_matches(node, 'class', name, '~=', false) && !node.classes.some(c => c.name === name))\n                return BlockAppliesToNode.NotPossible;\n        }\n        else if (selector.type === 'IdSelector') {\n            if (!attribute_matches(node, 'id', name, '=', false))\n                return BlockAppliesToNode.NotPossible;\n        }\n        else if (selector.type === 'AttributeSelector') {\n            if (!(whitelist_attribute_selector.has(node.name.toLowerCase()) && whitelist_attribute_selector.get(node.name.toLowerCase()).has(selector.name.name.toLowerCase())) &&\n                !attribute_matches(node, selector.name.name, selector.value && unquote(selector.value), selector.matcher, selector.flags)) {\n                return BlockAppliesToNode.NotPossible;\n            }\n        }\n        else if (selector.type === 'TypeSelector') {\n            if (node.name.toLowerCase() !== name.toLowerCase() && name !== '*')\n                return BlockAppliesToNode.NotPossible;\n        }\n        else {\n            return BlockAppliesToNode.UnknownSelectorType;\n        }\n    }\n    return BlockAppliesToNode.Possible;\n}\nfunction test_attribute(operator, expected_value, case_insensitive, value) {\n    if (case_insensitive) {\n        expected_value = expected_value.toLowerCase();\n        value = value.toLowerCase();\n    }\n    switch (operator) {\n        case '=': return value === expected_value;\n        case '~=': return value.split(/\\s/).includes(expected_value);\n        case '|=': return `${value}-`.startsWith(`${expected_value}-`);\n        case '^=': return value.startsWith(expected_value);\n        case '$=': return value.endsWith(expected_value);\n        case '*=': return value.includes(expected_value);\n        default: throw new Error(\"this shouldn't happen\");\n    }\n}\nfunction attribute_matches(node, name, expected_value, operator, case_insensitive) {\n    const spread = node.attributes.find(attr => attr.type === 'Spread');\n    if (spread)\n        return true;\n    if (node.bindings.some((binding) => binding.name === name))\n        return true;\n    const attr = node.attributes.find((attr) => attr.name === name);\n    if (!attr)\n        return false;\n    if (attr.is_true)\n        return operator === null;\n    if (!expected_value)\n        return true;\n    if (attr.chunks.length === 1) {\n        const value = attr.chunks[0];\n        if (!value)\n            return false;\n        if (value.type === 'Text')\n            return test_attribute(operator, expected_value, case_insensitive, value.data);\n    }\n    const possible_values = new Set();\n    let prev_values = [];\n    for (const chunk of attr.chunks) {\n        const current_possible_values = new Set();\n        if (chunk.type === 'Text') {\n            current_possible_values.add(chunk.data);\n        }\n        else {\n            gather_possible_values(chunk.node, current_possible_values);\n        }\n        // impossible to find out all combinations\n        if (current_possible_values.has(UNKNOWN))\n            return true;\n        if (prev_values.length > 0) {\n            const start_with_space = [];\n            const remaining = [];\n            current_possible_values.forEach((current_possible_value) => {\n                if (/^\\s/.test(current_possible_value)) {\n                    start_with_space.push(current_possible_value);\n                }\n                else {\n                    remaining.push(current_possible_value);\n                }\n            });\n            if (remaining.length > 0) {\n                if (start_with_space.length > 0) {\n                    prev_values.forEach(prev_value => possible_values.add(prev_value));\n                }\n                const combined = [];\n                prev_values.forEach((prev_value) => {\n                    remaining.forEach((value) => {\n                        combined.push(prev_value + value);\n                    });\n                });\n                prev_values = combined;\n                start_with_space.forEach((value) => {\n                    if (/\\s$/.test(value)) {\n                        possible_values.add(value);\n                    }\n                    else {\n                        prev_values.push(value);\n                    }\n                });\n                continue;\n            }\n            else {\n                prev_values.forEach(prev_value => possible_values.add(prev_value));\n                prev_values = [];\n            }\n        }\n        current_possible_values.forEach((current_possible_value) => {\n            if (/\\s$/.test(current_possible_value)) {\n                possible_values.add(current_possible_value);\n            }\n            else {\n                prev_values.push(current_possible_value);\n            }\n        });\n        if (prev_values.length < current_possible_values.size) {\n            prev_values.push(' ');\n        }\n        if (prev_values.length > 20) {\n            // might grow exponentially, bail out\n            return true;\n        }\n    }\n    prev_values.forEach(prev_value => possible_values.add(prev_value));\n    if (possible_values.has(UNKNOWN))\n        return true;\n    for (const value of possible_values) {\n        if (test_attribute(operator, expected_value, case_insensitive, value))\n            return true;\n    }\n    return false;\n}\nfunction unquote(value) {\n    if (value.type === 'Identifier')\n        return value.name;\n    const str = value.value;\n    if (str[0] === str[str.length - 1] && str[0] === \"'\" || str[0] === '\"') {\n        return str.slice(1, str.length - 1);\n    }\n    return str;\n}\nfunction get_element_parent(node) {\n    let parent = node;\n    while ((parent = parent.parent) && parent.type !== 'Element')\n        ;\n    return parent;\n}\nfunction get_possible_element_siblings(node, adjacent_only) {\n    const result = new Map();\n    let prev = node;\n    while (prev = prev.prev) {\n        if (prev.type === 'Element') {\n            if (!prev.attributes.find(attr => attr.type === 'Attribute' && attr.name.toLowerCase() === 'slot')) {\n                result.set(prev, NodeExist.Definitely);\n            }\n            if (adjacent_only) {\n                break;\n            }\n        }\n        else if (prev.type === 'EachBlock' || prev.type === 'IfBlock' || prev.type === 'AwaitBlock') {\n            const possible_last_child = get_possible_last_child(prev, adjacent_only);\n            add_to_map(possible_last_child, result);\n            if (adjacent_only && has_definite_elements(possible_last_child)) {\n                return result;\n            }\n        }\n    }\n    if (!prev || !adjacent_only) {\n        let parent = node;\n        let skip_each_for_last_child = node.type === 'ElseBlock';\n        while ((parent = parent.parent) && (parent.type === 'EachBlock' || parent.type === 'IfBlock' || parent.type === 'ElseBlock' || parent.type === 'AwaitBlock')) {\n            const possible_siblings = get_possible_element_siblings(parent, adjacent_only);\n            add_to_map(possible_siblings, result);\n            if (parent.type === 'EachBlock') {\n                // first child of each block can select the last child of each block as previous sibling\n                if (skip_each_for_last_child) {\n                    skip_each_for_last_child = false;\n                }\n                else {\n                    add_to_map(get_possible_last_child(parent, adjacent_only), result);\n                }\n            }\n            else if (parent.type === 'ElseBlock') {\n                skip_each_for_last_child = true;\n                parent = parent.parent;\n            }\n            if (adjacent_only && has_definite_elements(possible_siblings)) {\n                break;\n            }\n        }\n    }\n    return result;\n}\nfunction get_possible_last_child(block, adjacent_only) {\n    const result = new Map();\n    if (block.type === 'EachBlock') {\n        const each_result = loop_child(block.children, adjacent_only);\n        const else_result = block.else ? loop_child(block.else.children, adjacent_only) : new Map();\n        const not_exhaustive = !has_definite_elements(else_result);\n        if (not_exhaustive) {\n            mark_as_probably(each_result);\n            mark_as_probably(else_result);\n        }\n        add_to_map(each_result, result);\n        add_to_map(else_result, result);\n    }\n    else if (block.type === 'IfBlock') {\n        const if_result = loop_child(block.children, adjacent_only);\n        const else_result = block.else ? loop_child(block.else.children, adjacent_only) : new Map();\n        const not_exhaustive = !has_definite_elements(if_result) || !has_definite_elements(else_result);\n        if (not_exhaustive) {\n            mark_as_probably(if_result);\n            mark_as_probably(else_result);\n        }\n        add_to_map(if_result, result);\n        add_to_map(else_result, result);\n    }\n    else if (block.type === 'AwaitBlock') {\n        const pending_result = block.pending ? loop_child(block.pending.children, adjacent_only) : new Map();\n        const then_result = block.then ? loop_child(block.then.children, adjacent_only) : new Map();\n        const catch_result = block.catch ? loop_child(block.catch.children, adjacent_only) : new Map();\n        const not_exhaustive = !has_definite_elements(pending_result) || !has_definite_elements(then_result) || !has_definite_elements(catch_result);\n        if (not_exhaustive) {\n            mark_as_probably(pending_result);\n            mark_as_probably(then_result);\n            mark_as_probably(catch_result);\n        }\n        add_to_map(pending_result, result);\n        add_to_map(then_result, result);\n        add_to_map(catch_result, result);\n    }\n    return result;\n}\nfunction has_definite_elements(result) {\n    if (result.size === 0)\n        return false;\n    for (const exist of result.values()) {\n        if (exist === NodeExist.Definitely) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction add_to_map(from, to) {\n    from.forEach((exist, element) => {\n        to.set(element, higher_existence(exist, to.get(element)));\n    });\n}\nfunction higher_existence(exist1, exist2) {\n    if (exist1 === undefined || exist2 === undefined)\n        return exist1 || exist2;\n    return exist1 > exist2 ? exist1 : exist2;\n}\nfunction mark_as_probably(result) {\n    for (const key of result.keys()) {\n        result.set(key, NodeExist.Probably);\n    }\n}\nfunction loop_child(children, adjacent_only) {\n    const result = new Map();\n    for (let i = children.length - 1; i >= 0; i--) {\n        const child = children[i];\n        if (child.type === 'Element') {\n            result.set(child, NodeExist.Definitely);\n            if (adjacent_only) {\n                break;\n            }\n        }\n        else if (child.type === 'EachBlock' || child.type === 'IfBlock' || child.type === 'AwaitBlock') {\n            const child_result = get_possible_last_child(child, adjacent_only);\n            add_to_map(child_result, result);\n            if (adjacent_only && has_definite_elements(child_result)) {\n                break;\n            }\n        }\n    }\n    return result;\n}\nclass Block$2 {\n    constructor(combinator) {\n        this.combinator = combinator;\n        this.host = false;\n        this.root = false;\n        this.selectors = [];\n        this.start = null;\n        this.end = null;\n        this.should_encapsulate = false;\n    }\n    add(selector) {\n        if (this.selectors.length === 0) {\n            this.start = selector.start;\n            this.host = selector.type === 'PseudoClassSelector' && selector.name === 'host';\n        }\n        this.root = this.root || selector.type === 'PseudoClassSelector' && selector.name === 'root';\n        this.selectors.push(selector);\n        this.end = selector.end;\n    }\n    get global() {\n        return (this.selectors.length >= 1 &&\n            this.selectors[0].type === 'PseudoClassSelector' &&\n            this.selectors[0].name === 'global' &&\n            this.selectors.every((selector) => selector.type === 'PseudoClassSelector' || selector.type === 'PseudoElementSelector'));\n    }\n}\nfunction group_selectors(selector) {\n    let block = new Block$2(null);\n    const blocks = [block];\n    selector.children.forEach((child) => {\n        if (child.type === 'WhiteSpace' || child.type === 'Combinator') {\n            block = new Block$2(child);\n            blocks.push(block);\n        }\n        else {\n            block.add(child);\n        }\n    });\n    return blocks;\n}\n\nfunction remove_css_prefix(name) {\n    return name.replace(/^-((webkit)|(moz)|(o)|(ms))-/, '');\n}\nconst is_keyframes_node = (node) => remove_css_prefix(node.name) === 'keyframes';\nconst at_rule_has_declaration = ({ block }) => block &&\n    block.children &&\n    block.children.find((node) => node.type === 'Declaration');\nfunction minify_declarations(code, start, declarations) {\n    let c = start;\n    declarations.forEach((declaration, i) => {\n        const separator = i > 0 ? ';' : '';\n        if ((declaration.node.start - c) > separator.length) {\n            code.overwrite(c, declaration.node.start, separator);\n        }\n        declaration.minify(code);\n        c = declaration.node.end;\n    });\n    return c;\n}\nclass Rule$1 {\n    constructor(node, stylesheet, parent) {\n        this.node = node;\n        this.parent = parent;\n        this.selectors = node.prelude.children.map((node) => new Selector$1(node, stylesheet));\n        this.declarations = node.block.children.map((node) => new Declaration$1(node));\n    }\n    apply(node) {\n        this.selectors.forEach(selector => selector.apply(node)); // TODO move the logic in here?\n    }\n    is_used(dev) {\n        if (this.parent && this.parent.node.type === 'Atrule' && is_keyframes_node(this.parent.node))\n            return true;\n        if (this.declarations.length === 0)\n            return dev;\n        return this.selectors.some(s => s.used);\n    }\n    minify(code, _dev) {\n        let c = this.node.start;\n        let started = false;\n        this.selectors.forEach((selector) => {\n            if (selector.used) {\n                const separator = started ? ',' : '';\n                if ((selector.node.start - c) > separator.length) {\n                    code.overwrite(c, selector.node.start, separator);\n                }\n                selector.minify(code);\n                c = selector.node.end;\n                started = true;\n            }\n        });\n        code.remove(c, this.node.block.start);\n        c = this.node.block.start + 1;\n        c = minify_declarations(code, c, this.declarations);\n        code.remove(c, this.node.block.end - 1);\n    }\n    transform(code, id, keyframes, max_amount_class_specificity_increased) {\n        if (this.parent && this.parent.node.type === 'Atrule' && is_keyframes_node(this.parent.node))\n            return true;\n        const attr = `.${id}`;\n        this.selectors.forEach(selector => selector.transform(code, attr, max_amount_class_specificity_increased));\n        this.declarations.forEach(declaration => declaration.transform(code, keyframes));\n    }\n    validate(component) {\n        this.selectors.forEach(selector => {\n            selector.validate(component);\n        });\n    }\n    warn_on_unused_selector(handler) {\n        this.selectors.forEach(selector => {\n            if (!selector.used)\n                handler(selector);\n        });\n    }\n    get_max_amount_class_specificity_increased() {\n        return Math.max(...this.selectors.map(selector => selector.get_amount_class_specificity_increased()));\n    }\n}\nclass Declaration$1 {\n    constructor(node) {\n        this.node = node;\n    }\n    transform(code, keyframes) {\n        const property = this.node.property && remove_css_prefix(this.node.property.toLowerCase());\n        if (property === 'animation' || property === 'animation-name') {\n            this.node.value.children.forEach((block) => {\n                if (block.type === 'Identifier') {\n                    const name = block.name;\n                    if (keyframes.has(name)) {\n                        code.overwrite(block.start, block.end, keyframes.get(name));\n                    }\n                }\n            });\n        }\n    }\n    minify(code) {\n        if (!this.node.property)\n            return; // @apply, and possibly other weird cases?\n        const c = this.node.start + this.node.property.length;\n        const first = this.node.value.children\n            ? this.node.value.children[0]\n            : this.node.value;\n        let start = first.start;\n        while (/\\s/.test(code.original[start]))\n            start += 1;\n        if (start - c > 1) {\n            code.overwrite(c, start, ':');\n        }\n    }\n}\nclass Atrule$1 {\n    constructor(node) {\n        this.node = node;\n        this.children = [];\n        this.declarations = [];\n    }\n    apply(node) {\n        if (this.node.name === 'media' || this.node.name === 'supports') {\n            this.children.forEach(child => {\n                child.apply(node);\n            });\n        }\n        else if (is_keyframes_node(this.node)) {\n            this.children.forEach((rule) => {\n                rule.selectors.forEach(selector => {\n                    selector.used = true;\n                });\n            });\n        }\n    }\n    is_used(_dev) {\n        return true; // TODO\n    }\n    minify(code, dev) {\n        if (this.node.name === 'media') {\n            const expression_char = code.original[this.node.prelude.start];\n            let c = this.node.start + (expression_char === '(' ? 6 : 7);\n            if (this.node.prelude.start > c)\n                code.remove(c, this.node.prelude.start);\n            this.node.prelude.children.forEach((query) => {\n                // TODO minify queries\n                c = query.end;\n            });\n            code.remove(c, this.node.block.start);\n        }\n        else if (this.node.name === 'supports') {\n            let c = this.node.start + 9;\n            if (this.node.prelude.start - c > 1)\n                code.overwrite(c, this.node.prelude.start, ' ');\n            this.node.prelude.children.forEach((query) => {\n                // TODO minify queries\n                c = query.end;\n            });\n            code.remove(c, this.node.block.start);\n        }\n        else {\n            let c = this.node.start + this.node.name.length + 1;\n            if (this.node.prelude) {\n                if (this.node.prelude.start - c > 1)\n                    code.overwrite(c, this.node.prelude.start, ' ');\n                c = this.node.prelude.end;\n            }\n            if (this.node.block && this.node.block.start - c > 0) {\n                code.remove(c, this.node.block.start);\n            }\n        }\n        // TODO other atrules\n        if (this.node.block) {\n            let c = this.node.block.start + 1;\n            if (this.declarations.length) {\n                c = minify_declarations(code, c, this.declarations);\n                // if the atrule has children, leave the last declaration semicolon alone\n                if (this.children.length)\n                    c++;\n            }\n            this.children.forEach(child => {\n                if (child.is_used(dev)) {\n                    code.remove(c, child.node.start);\n                    child.minify(code, dev);\n                    c = child.node.end;\n                }\n            });\n            code.remove(c, this.node.block.end - 1);\n        }\n    }\n    transform(code, id, keyframes, max_amount_class_specificity_increased) {\n        if (is_keyframes_node(this.node)) {\n            this.node.prelude.children.forEach(({ type, name, start, end }) => {\n                if (type === 'Identifier') {\n                    if (name.startsWith('-global-')) {\n                        code.remove(start, start + 8);\n                        this.children.forEach((rule) => {\n                            rule.selectors.forEach(selector => {\n                                selector.used = true;\n                            });\n                        });\n                    }\n                    else {\n                        code.overwrite(start, end, keyframes.get(name));\n                    }\n                }\n            });\n        }\n        this.children.forEach(child => {\n            child.transform(code, id, keyframes, max_amount_class_specificity_increased);\n        });\n    }\n    validate(component) {\n        this.children.forEach(child => {\n            child.validate(component);\n        });\n    }\n    warn_on_unused_selector(handler) {\n        if (this.node.name !== 'media')\n            return;\n        this.children.forEach(child => {\n            child.warn_on_unused_selector(handler);\n        });\n    }\n    get_max_amount_class_specificity_increased() {\n        return Math.max(...this.children.map(rule => rule.get_max_amount_class_specificity_increased()));\n    }\n}\nconst get_default_css_hash = ({ css, hash }) => {\n    return `svelte-${hash(css)}`;\n};\nclass Stylesheet {\n    constructor({ source, ast, component_name, filename, dev, get_css_hash = get_default_css_hash }) {\n        this.children = [];\n        this.keyframes = new Map();\n        this.nodes_with_css_class = new Set();\n        this.source = source;\n        this.ast = ast;\n        this.filename = filename;\n        this.dev = dev;\n        if (ast.css && ast.css.children.length) {\n            this.id = get_css_hash({\n                filename,\n                name: component_name,\n                css: ast.css.content.styles,\n                hash\n            });\n            this.has_styles = true;\n            const stack = [];\n            let depth = 0;\n            let current_atrule = null;\n            walk(ast.css, {\n                enter: (node) => {\n                    if (node.type === 'Atrule') {\n                        const atrule = new Atrule$1(node);\n                        stack.push(atrule);\n                        if (current_atrule) {\n                            current_atrule.children.push(atrule);\n                        }\n                        else if (depth <= 1) {\n                            this.children.push(atrule);\n                        }\n                        if (is_keyframes_node(node)) {\n                            node.prelude.children.forEach((expression) => {\n                                if (expression.type === 'Identifier' && !expression.name.startsWith('-global-')) {\n                                    this.keyframes.set(expression.name, `${this.id}-${expression.name}`);\n                                }\n                            });\n                        }\n                        else if (at_rule_has_declaration(node)) {\n                            const at_rule_declarations = node.block.children\n                                .filter(node => node.type === 'Declaration')\n                                .map(node => new Declaration$1(node));\n                            push_array$1(atrule.declarations, at_rule_declarations);\n                        }\n                        current_atrule = atrule;\n                    }\n                    if (node.type === 'Rule') {\n                        const rule = new Rule$1(node, this, current_atrule);\n                        if (current_atrule) {\n                            current_atrule.children.push(rule);\n                        }\n                        else if (depth <= 1) {\n                            this.children.push(rule);\n                        }\n                    }\n                    depth += 1;\n                },\n                leave: (node) => {\n                    if (node.type === 'Atrule') {\n                        stack.pop();\n                        current_atrule = stack[stack.length - 1];\n                    }\n                    depth -= 1;\n                }\n            });\n        }\n        else {\n            this.has_styles = false;\n        }\n    }\n    apply(node) {\n        if (!this.has_styles)\n            return;\n        for (let i = 0; i < this.children.length; i += 1) {\n            const child = this.children[i];\n            child.apply(node);\n        }\n    }\n    reify() {\n        this.nodes_with_css_class.forEach((node) => {\n            node.add_css_class();\n        });\n    }\n    render(file, should_transform_selectors) {\n        if (!this.has_styles) {\n            return { code: null, map: null };\n        }\n        const code = new MagicString(this.source);\n        walk(this.ast.css, {\n            enter: (node) => {\n                code.addSourcemapLocation(node.start);\n                code.addSourcemapLocation(node.end);\n            }\n        });\n        if (should_transform_selectors) {\n            const max = Math.max(...this.children.map(rule => rule.get_max_amount_class_specificity_increased()));\n            this.children.forEach((child) => {\n                child.transform(code, this.id, this.keyframes, max);\n            });\n        }\n        let c = 0;\n        this.children.forEach(child => {\n            if (child.is_used(this.dev)) {\n                code.remove(c, child.node.start);\n                child.minify(code, this.dev);\n                c = child.node.end;\n            }\n        });\n        code.remove(c, this.source.length);\n        return {\n            code: code.toString(),\n            map: code.generateMap({\n                includeContent: true,\n                source: this.filename,\n                file\n            })\n        };\n    }\n    validate(component) {\n        this.children.forEach(child => {\n            child.validate(component);\n        });\n    }\n    warn_on_unused_selectors(component) {\n        const ignores = !this.ast.css ? [] : extract_ignores_above_position(this.ast.css.start, this.ast.html.children);\n        component.push_ignores(ignores);\n        this.children.forEach(child => {\n            child.warn_on_unused_selector((selector) => {\n                component.warn(selector.node, compiler_warnings.css_unused_selector(this.source.slice(selector.node.start, selector.node.end)));\n            });\n        });\n        component.pop_ignores();\n    }\n}\n\nconst test = typeof process !== 'undefined' && process.env.TEST;\n\nclass TemplateScope {\n    constructor(parent) {\n        this.owners = new Map();\n        this.parent = parent;\n        this.names = new Set(parent ? parent.names : []);\n        this.dependencies_for_name = new Map(parent ? parent.dependencies_for_name : []);\n    }\n    add(name, dependencies, owner) {\n        this.names.add(name);\n        this.dependencies_for_name.set(name, dependencies);\n        this.owners.set(name, owner);\n        return this;\n    }\n    child() {\n        const child = new TemplateScope(this);\n        return child;\n    }\n    is_top_level(name) {\n        return !this.parent || !this.names.has(name) && this.parent.is_top_level(name);\n    }\n    get_owner(name) {\n        return this.owners.get(name) || (this.parent && this.parent.get_owner(name));\n    }\n    is_let(name) {\n        const owner = this.get_owner(name);\n        return owner && (owner.type === 'Element' || owner.type === 'InlineComponent' || owner.type === 'SlotTemplate');\n    }\n    is_await(name) {\n        const owner = this.get_owner(name);\n        return owner && (owner.type === 'ThenBlock' || owner.type === 'CatchBlock');\n    }\n    is_const(name) {\n        const owner = this.get_owner(name);\n        return owner && owner.type === 'ConstTag';\n    }\n}\n\nclass Fragment extends Node$1 {\n    constructor(component, info) {\n        const scope = new TemplateScope();\n        super(component, null, scope, info);\n        this.scope = scope;\n        this.children = map_children(component, this, scope, info.children);\n    }\n}\n\n// This file is automatically generated\nvar internal_exports = new Set([\"HtmlTag\", \"HtmlTagHydration\", \"SvelteComponent\", \"SvelteComponentDev\", \"SvelteComponentTyped\", \"SvelteElement\", \"action_destroyer\", \"add_attribute\", \"add_classes\", \"add_flush_callback\", \"add_location\", \"add_render_callback\", \"add_resize_listener\", \"add_styles\", \"add_transform\", \"afterUpdate\", \"append\", \"append_dev\", \"append_empty_stylesheet\", \"append_hydration\", \"append_hydration_dev\", \"append_styles\", \"assign\", \"attr\", \"attr_dev\", \"attribute_to_object\", \"beforeUpdate\", \"bind\", \"binding_callbacks\", \"blank_object\", \"bubble\", \"check_outros\", \"children\", \"claim_component\", \"claim_element\", \"claim_html_tag\", \"claim_space\", \"claim_svg_element\", \"claim_text\", \"clear_loops\", \"component_subscribe\", \"compute_rest_props\", \"compute_slots\", \"createEventDispatcher\", \"create_animation\", \"create_bidirectional_transition\", \"create_component\", \"create_in_transition\", \"create_out_transition\", \"create_slot\", \"create_ssr_component\", \"current_component\", \"custom_event\", \"dataset_dev\", \"debug\", \"destroy_block\", \"destroy_component\", \"destroy_each\", \"detach\", \"detach_after_dev\", \"detach_before_dev\", \"detach_between_dev\", \"detach_dev\", \"dirty_components\", \"dispatch_dev\", \"each\", \"element\", \"element_is\", \"empty\", \"end_hydrating\", \"escape\", \"escape_attribute_value\", \"escape_object\", \"escaped\", \"exclude_internal_props\", \"fix_and_destroy_block\", \"fix_and_outro_and_destroy_block\", \"fix_position\", \"flush\", \"getAllContexts\", \"getContext\", \"get_all_dirty_from_scope\", \"get_binding_group_value\", \"get_current_component\", \"get_custom_elements_slots\", \"get_root_for_style\", \"get_slot_changes\", \"get_spread_object\", \"get_spread_update\", \"get_store_value\", \"globals\", \"group_outros\", \"handle_promise\", \"hasContext\", \"has_prop\", \"identity\", \"init\", \"insert\", \"insert_dev\", \"insert_hydration\", \"insert_hydration_dev\", \"intros\", \"invalid_attribute_name_character\", \"is_client\", \"is_crossorigin\", \"is_empty\", \"is_function\", \"is_promise\", \"listen\", \"listen_dev\", \"loop\", \"loop_guard\", \"merge_ssr_styles\", \"missing_component\", \"mount_component\", \"noop\", \"not_equal\", \"now\", \"null_to_empty\", \"object_without_properties\", \"onDestroy\", \"onMount\", \"once\", \"outro_and_destroy_block\", \"prevent_default\", \"prop_dev\", \"query_selector_all\", \"raf\", \"run\", \"run_all\", \"safe_not_equal\", \"schedule_update\", \"select_multiple_value\", \"select_option\", \"select_options\", \"select_value\", \"self\", \"setContext\", \"set_attributes\", \"set_current_component\", \"set_custom_element_data\", \"set_data\", \"set_data_dev\", \"set_input_type\", \"set_input_value\", \"set_now\", \"set_raf\", \"set_store_value\", \"set_style\", \"set_svg_attributes\", \"space\", \"spread\", \"src_url_equal\", \"start_hydrating\", \"stop_propagation\", \"subscribe\", \"svg_element\", \"text\", \"tick\", \"time_ranges_to_array\", \"to_number\", \"toggle_class\", \"transition_in\", \"transition_out\", \"trusted\", \"update_await_block_branch\", \"update_keyed_each\", \"update_slot\", \"update_slot_base\", \"validate_component\", \"validate_each_argument\", \"validate_each_keys\", \"validate_slots\", \"validate_store\", \"xlink_attr\"]);\n\nfunction is_used_as_reference(node, parent) {\n    if (!is_reference(node, parent)) {\n        return false;\n    }\n    if (!parent) {\n        return true;\n    }\n    /* eslint-disable no-fallthrough */\n    switch (parent.type) {\n        // disregard the `foo` in `const foo = bar`\n        case 'VariableDeclarator':\n            return node !== parent.id;\n        // disregard the `foo`, `bar` in `function foo(bar){}`\n        case 'FunctionDeclaration':\n        // disregard the `foo` in `import { foo } from 'foo'`\n        case 'ImportSpecifier':\n        // disregard the `foo` in `import foo from 'foo'`\n        case 'ImportDefaultSpecifier':\n        // disregard the `foo` in `import * as foo from 'foo'`\n        case 'ImportNamespaceSpecifier':\n        // disregard the `foo` in `export { foo }`\n        case 'ExportSpecifier':\n            return false;\n        default:\n            return true;\n    }\n}\n\nclass Component {\n    constructor(ast, source, name, compile_options, stats, warnings) {\n        this.ignore_stack = [];\n        this.vars = [];\n        this.var_lookup = new Map();\n        this.imports = [];\n        this.exports_from = [];\n        this.instance_exports_from = [];\n        this.hoistable_nodes = new Set();\n        this.node_for_declaration = new Map();\n        this.partly_hoisted = [];\n        this.fully_hoisted = [];\n        this.reactive_declarations = [];\n        this.reactive_declaration_nodes = new Set();\n        this.has_reactive_assignments = false;\n        this.injected_reactive_declaration_vars = new Set();\n        this.helpers = new Map();\n        this.globals = new Map();\n        this.indirect_dependencies = new Map();\n        this.elements = [];\n        this.aliases = new Map();\n        this.used_names = new Set();\n        this.globally_used_names = new Set();\n        this.slots = new Map();\n        this.slot_outlets = new Set();\n        this.name = { type: 'Identifier', name };\n        this.stats = stats;\n        this.warnings = warnings;\n        this.ast = ast;\n        this.source = source;\n        this.compile_options = compile_options;\n        // the instance JS gets mutated, so we park\n        // a copy here for later. TODO this feels gross\n        this.original_ast = clone({\n            html: ast.html,\n            css: ast.css,\n            instance: ast.instance,\n            module: ast.module\n        });\n        this.file =\n            compile_options.filename &&\n                (typeof process !== 'undefined'\n                    ? compile_options.filename\n                        .replace(process.cwd(), '')\n                        .replace(/^[/\\\\]/, '')\n                    : compile_options.filename);\n        this.locate = getLocator(this.source, { offsetLine: 1 });\n        // styles\n        this.stylesheet = new Stylesheet({\n            source,\n            ast,\n            filename: compile_options.filename,\n            component_name: name,\n            dev: compile_options.dev,\n            get_css_hash: compile_options.cssHash\n        });\n        this.stylesheet.validate(this);\n        this.component_options = process_component_options(this, this.ast.html.children);\n        this.namespace =\n            namespaces[this.component_options.namespace] ||\n                this.component_options.namespace;\n        if (compile_options.customElement) {\n            if (this.component_options.tag === undefined &&\n                compile_options.tag === undefined) {\n                const svelteOptions = ast.html.children.find(child => child.name === 'svelte:options') || { start: 0, end: 0 };\n                this.warn(svelteOptions, compiler_warnings.custom_element_no_tag);\n            }\n            this.tag = this.component_options.tag || compile_options.tag;\n        }\n        else {\n            this.tag = this.name.name;\n        }\n        this.walk_module_js();\n        this.push_ignores(this.ast.instance ? extract_ignores_above_position(this.ast.instance.start, this.ast.html.children) : []);\n        this.walk_instance_js_pre_template();\n        this.pop_ignores();\n        this.fragment = new Fragment(this, ast.html);\n        this.name = this.get_unique_name(name);\n        this.push_ignores(this.ast.instance ? extract_ignores_above_position(this.ast.instance.start, this.ast.html.children) : []);\n        this.walk_instance_js_post_template();\n        this.pop_ignores();\n        this.elements.forEach(element => this.stylesheet.apply(element));\n        if (!compile_options.customElement)\n            this.stylesheet.reify();\n        this.stylesheet.warn_on_unused_selectors(this);\n    }\n    add_var(node, variable, add_to_lookup = true) {\n        this.vars.push(variable);\n        if (add_to_lookup) {\n            if (this.var_lookup.has(variable.name)) {\n                const exists_var = this.var_lookup.get(variable.name);\n                if (exists_var.module && exists_var.imported) {\n                    this.error(node, compiler_errors.illegal_variable_declaration);\n                }\n            }\n            this.var_lookup.set(variable.name, variable);\n        }\n    }\n    add_reference(node, name) {\n        const variable = this.var_lookup.get(name);\n        if (variable) {\n            variable.referenced = true;\n        }\n        else if (is_reserved_keyword(name)) {\n            this.add_var(node, {\n                name,\n                injected: true,\n                referenced: true\n            });\n        }\n        else if (name[0] === '$') {\n            this.add_var(node, {\n                name,\n                injected: true,\n                referenced: true,\n                mutated: true,\n                writable: true\n            });\n            const subscribable_name = name.slice(1);\n            const variable = this.var_lookup.get(subscribable_name);\n            if (variable) {\n                variable.referenced = true;\n                variable.subscribable = true;\n            }\n        }\n        else {\n            if (this.compile_options.varsReport === 'full') {\n                this.add_var(node, { name, referenced: true }, false);\n            }\n            this.used_names.add(name);\n        }\n    }\n    alias(name) {\n        if (!this.aliases.has(name)) {\n            this.aliases.set(name, this.get_unique_name(name));\n        }\n        return this.aliases.get(name);\n    }\n    apply_stylesheet(element) {\n        this.elements.push(element);\n    }\n    global(name) {\n        const alias = this.alias(name);\n        this.globals.set(name, alias);\n        return alias;\n    }\n    generate(result) {\n        let js = null;\n        let css = null;\n        if (result) {\n            const { compile_options, name } = this;\n            const { format = 'esm' } = compile_options;\n            const banner = `${this.file ? `${this.file} ` : ''}generated by Svelte v${'3.46.4'}`;\n            const program = { type: 'Program', body: result.js };\n            walk(program, {\n                enter: (node, parent, key) => {\n                    if (node.type === 'Identifier') {\n                        if (node.name[0] === '@') {\n                            if (node.name[1] === '_') {\n                                const alias = this.global(node.name.slice(2));\n                                node.name = alias.name;\n                            }\n                            else {\n                                let name = node.name.slice(1);\n                                if (compile_options.hydratable) {\n                                    if (internal_exports.has(`${name}_hydration`)) {\n                                        name += '_hydration';\n                                    }\n                                    else if (internal_exports.has(`${name}Hydration`)) {\n                                        name += 'Hydration';\n                                    }\n                                }\n                                if (compile_options.dev) {\n                                    if (internal_exports.has(`${name}_dev`)) {\n                                        name += '_dev';\n                                    }\n                                    else if (internal_exports.has(`${name}Dev`)) {\n                                        name += 'Dev';\n                                    }\n                                }\n                                const alias = this.alias(name);\n                                this.helpers.set(name, alias);\n                                node.name = alias.name;\n                            }\n                        }\n                        else if (node.name[0] !== '#' && !is_valid(node.name)) {\n                            // this hack allows x`foo.${bar}` where bar could be invalid\n                            const literal = { type: 'Literal', value: node.name };\n                            if (parent.type === 'Property' && key === 'key') {\n                                parent.key = literal;\n                            }\n                            else if (parent.type === 'MemberExpression' && key === 'property') {\n                                parent.property = literal;\n                                parent.computed = true;\n                            }\n                        }\n                    }\n                }\n            });\n            const referenced_globals = Array.from(this.globals, ([name, alias]) => name !== alias.name && { name, alias }).filter(Boolean);\n            if (referenced_globals.length) {\n                this.helpers.set('globals', this.alias('globals'));\n            }\n            const imported_helpers = Array.from(this.helpers, ([name, alias]) => ({\n                name,\n                alias\n            }));\n            create_module(program, format, name, banner, compile_options.sveltePath, imported_helpers, referenced_globals, this.imports, this.vars\n                .filter(variable => variable.module && variable.export_name)\n                .map(variable => ({\n                name: variable.name,\n                as: variable.export_name\n            })), this.exports_from);\n            css = compile_options.customElement\n                ? { code: null, map: null }\n                : result.css;\n            const js_sourcemap_enabled = check_enable_sourcemap(compile_options.enableSourcemap, 'js');\n            if (!js_sourcemap_enabled) {\n                js = print(program);\n                js.map = null;\n            }\n            else {\n                const sourcemap_source_filename = get_sourcemap_source_filename(compile_options);\n                js = print(program, {\n                    sourceMapSource: sourcemap_source_filename\n                });\n                js.map.sources = [\n                    sourcemap_source_filename\n                ];\n                js.map.sourcesContent = [\n                    this.source\n                ];\n                js.map = apply_preprocessor_sourcemap(sourcemap_source_filename, js.map, compile_options.sourcemap);\n            }\n        }\n        return {\n            js,\n            css,\n            ast: this.original_ast,\n            warnings: this.warnings,\n            vars: this.get_vars_report(),\n            stats: this.stats.render()\n        };\n    }\n    get_unique_name(name, scope) {\n        if (test)\n            name = `${name}$`;\n        let alias = name;\n        for (let i = 1; reserved.has(alias) ||\n            this.var_lookup.has(alias) ||\n            this.used_names.has(alias) ||\n            this.globally_used_names.has(alias) ||\n            (scope && scope.has(alias)); alias = `${name}_${i++}`)\n            ;\n        this.used_names.add(alias);\n        return { type: 'Identifier', name: alias };\n    }\n    get_unique_name_maker() {\n        const local_used_names = new Set();\n        function add(name) {\n            local_used_names.add(name);\n        }\n        reserved.forEach(add);\n        internal_exports.forEach(add);\n        this.var_lookup.forEach((_value, key) => add(key));\n        return (name) => {\n            if (test)\n                name = `${name}$`;\n            let alias = name;\n            for (let i = 1; this.used_names.has(alias) || local_used_names.has(alias); alias = `${name}_${i++}`)\n                ;\n            local_used_names.add(alias);\n            this.globally_used_names.add(alias);\n            return {\n                type: 'Identifier',\n                name: alias\n            };\n        };\n    }\n    get_vars_report() {\n        const { compile_options, vars } = this;\n        const vars_report = compile_options.varsReport === false\n            ? []\n            : compile_options.varsReport === 'full'\n                ? vars\n                : vars.filter(v => !v.global && !v.internal);\n        return vars_report.map(v => ({\n            name: v.name,\n            export_name: v.export_name || null,\n            injected: v.injected || false,\n            module: v.module || false,\n            mutated: v.mutated || false,\n            reassigned: v.reassigned || false,\n            referenced: v.referenced || false,\n            writable: v.writable || false,\n            referenced_from_script: v.referenced_from_script || false\n        }));\n    }\n    error(pos, e) {\n        if (this.compile_options.errorMode === 'warn') {\n            this.warn(pos, e);\n        }\n        else {\n            error(e.message, {\n                name: 'ValidationError',\n                code: e.code,\n                source: this.source,\n                start: pos.start,\n                end: pos.end,\n                filename: this.compile_options.filename\n            });\n        }\n    }\n    warn(pos, warning) {\n        if (this.ignores && this.ignores.has(warning.code)) {\n            return;\n        }\n        const start = this.locate(pos.start);\n        const end = this.locate(pos.end);\n        const frame = get_code_frame(this.source, start.line - 1, start.column);\n        this.warnings.push({\n            code: warning.code,\n            message: warning.message,\n            frame,\n            start,\n            end,\n            pos: pos.start,\n            filename: this.compile_options.filename,\n            toString: () => `${warning.message} (${start.line}:${start.column})\\n${frame}`\n        });\n    }\n    extract_imports(node) {\n        this.imports.push(node);\n    }\n    extract_exports(node, module_script = false) {\n        const ignores = extract_svelte_ignore_from_comments(node);\n        if (ignores.length)\n            this.push_ignores(ignores);\n        const result = this._extract_exports(node, module_script);\n        if (ignores.length)\n            this.pop_ignores();\n        return result;\n    }\n    _extract_exports(node, module_script) {\n        if (node.type === 'ExportDefaultDeclaration') {\n            return this.error(node, compiler_errors.default_export);\n        }\n        if (node.type === 'ExportNamedDeclaration') {\n            if (node.source) {\n                if (module_script) {\n                    this.exports_from.push(node);\n                }\n                else {\n                    this.instance_exports_from.push(node);\n                }\n                return null;\n            }\n            if (node.declaration) {\n                if (node.declaration.type === 'VariableDeclaration') {\n                    node.declaration.declarations.forEach(declarator => {\n                        extract_names(declarator.id).forEach(name => {\n                            const variable = this.var_lookup.get(name);\n                            variable.export_name = name;\n                            if (variable.writable && !(variable.referenced || variable.referenced_from_script || variable.subscribable)) {\n                                this.warn(declarator, compiler_warnings.unused_export_let(this.name.name, name));\n                            }\n                        });\n                    });\n                }\n                else {\n                    const { name } = node.declaration.id;\n                    const variable = this.var_lookup.get(name);\n                    variable.export_name = name;\n                }\n                return node.declaration;\n            }\n            else {\n                node.specifiers.forEach(specifier => {\n                    const variable = this.var_lookup.get(specifier.local.name);\n                    if (variable) {\n                        variable.export_name = specifier.exported.name;\n                        if (variable.writable && !(variable.referenced || variable.referenced_from_script || variable.subscribable)) {\n                            this.warn(specifier, compiler_warnings.unused_export_let(this.name.name, specifier.exported.name));\n                        }\n                    }\n                });\n                return null;\n            }\n        }\n    }\n    extract_javascript(script) {\n        if (!script)\n            return null;\n        return script.content.body.filter(node => {\n            if (!node)\n                return false;\n            if (this.hoistable_nodes.has(node))\n                return false;\n            if (this.reactive_declaration_nodes.has(node))\n                return false;\n            if (node.type === 'ImportDeclaration')\n                return false;\n            if (node.type === 'ExportDeclaration' && node.specifiers.length > 0)\n                return false;\n            return true;\n        });\n    }\n    walk_module_js() {\n        const component = this;\n        const script = this.ast.module;\n        if (!script)\n            return;\n        walk(script.content, {\n            enter(node) {\n                if (node.type === 'LabeledStatement' && node.label.name === '$') {\n                    component.warn(node, compiler_warnings.module_script_reactive_declaration);\n                }\n            }\n        });\n        const { scope, globals } = create_scopes(script.content);\n        this.module_scope = scope;\n        scope.declarations.forEach((node, name) => {\n            if (name[0] === '$') {\n                return this.error(node, compiler_errors.illegal_declaration);\n            }\n            const writable = node.type === 'VariableDeclaration' && (node.kind === 'var' || node.kind === 'let');\n            const imported = node.type.startsWith('Import');\n            this.add_var(node, {\n                name,\n                module: true,\n                hoistable: true,\n                writable,\n                imported\n            });\n        });\n        globals.forEach((node, name) => {\n            if (name[0] === '$') {\n                return this.error(node, compiler_errors.illegal_subscription);\n            }\n            else {\n                this.add_var(node, {\n                    name,\n                    global: true,\n                    hoistable: true\n                });\n            }\n        });\n        const { body } = script.content;\n        let i = body.length;\n        while (--i >= 0) {\n            const node = body[i];\n            if (node.type === 'ImportDeclaration') {\n                this.extract_imports(node);\n                body.splice(i, 1);\n            }\n            if (/^Export/.test(node.type)) {\n                const replacement = this.extract_exports(node, true);\n                if (replacement) {\n                    body[i] = replacement;\n                }\n                else {\n                    body.splice(i, 1);\n                }\n            }\n        }\n    }\n    walk_instance_js_pre_template() {\n        const script = this.ast.instance;\n        if (!script)\n            return;\n        // inject vars for reactive declarations\n        script.content.body.forEach(node => {\n            if (node.type !== 'LabeledStatement')\n                return;\n            if (node.body.type !== 'ExpressionStatement')\n                return;\n            const { expression } = node.body;\n            if (expression.type !== 'AssignmentExpression')\n                return;\n            if (expression.left.type === 'MemberExpression')\n                return;\n            extract_names(expression.left).forEach(name => {\n                if (!this.var_lookup.has(name) && name[0] !== '$') {\n                    this.injected_reactive_declaration_vars.add(name);\n                }\n            });\n        });\n        const { scope: instance_scope, map, globals } = create_scopes(script.content);\n        this.instance_scope = instance_scope;\n        this.instance_scope_map = map;\n        instance_scope.declarations.forEach((node, name) => {\n            if (name[0] === '$') {\n                return this.error(node, compiler_errors.illegal_declaration);\n            }\n            const writable = node.type === 'VariableDeclaration' && (node.kind === 'var' || node.kind === 'let');\n            const imported = node.type.startsWith('Import');\n            this.add_var(node, {\n                name,\n                initialised: instance_scope.initialised_declarations.has(name),\n                writable,\n                imported\n            });\n            this.node_for_declaration.set(name, node);\n        });\n        // NOTE: add store variable first, then only $store value\n        // as `$store` will mark `store` variable as referenced and subscribable\n        const global_keys = Array.from(globals.keys());\n        const sorted_globals = [\n            ...global_keys.filter(key => key[0] !== '$'),\n            ...global_keys.filter(key => key[0] === '$')\n        ];\n        sorted_globals.forEach(name => {\n            if (this.var_lookup.has(name))\n                return;\n            const node = globals.get(name);\n            if (this.injected_reactive_declaration_vars.has(name)) {\n                this.add_var(node, {\n                    name,\n                    injected: true,\n                    writable: true,\n                    reassigned: true,\n                    initialised: true\n                });\n            }\n            else if (is_reserved_keyword(name)) {\n                this.add_var(node, {\n                    name,\n                    injected: true\n                });\n            }\n            else if (name[0] === '$') {\n                if (name === '$' || name[1] === '$') {\n                    return this.error(node, compiler_errors.illegal_global(name));\n                }\n                this.add_var(node, {\n                    name,\n                    injected: true,\n                    mutated: true,\n                    writable: true\n                });\n                this.add_reference(node, name.slice(1));\n                const variable = this.var_lookup.get(name.slice(1));\n                if (variable) {\n                    variable.subscribable = true;\n                    variable.referenced_from_script = true;\n                }\n            }\n            else {\n                this.add_var(node, {\n                    name,\n                    global: true,\n                    hoistable: true\n                });\n            }\n        });\n        this.track_references_and_mutations();\n    }\n    walk_instance_js_post_template() {\n        const script = this.ast.instance;\n        if (!script)\n            return;\n        this.post_template_walk();\n        this.hoist_instance_declarations();\n        this.extract_reactive_declarations();\n    }\n    post_template_walk() {\n        const script = this.ast.instance;\n        if (!script)\n            return;\n        const component = this;\n        const { content } = script;\n        const { instance_scope, instance_scope_map: map } = this;\n        let scope = instance_scope;\n        const to_remove = [];\n        const remove = (parent, prop, index) => {\n            to_remove.unshift([parent, prop, index]);\n        };\n        let scope_updated = false;\n        const current_function_stack = [];\n        let current_function = null;\n        walk(content, {\n            enter(node, parent, prop, index) {\n                if ((node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression')) {\n                    current_function_stack.push(current_function = node);\n                }\n                if (map.has(node)) {\n                    scope = map.get(node);\n                }\n                if (node.type === 'ImportDeclaration') {\n                    component.extract_imports(node);\n                    // TODO: to use actual remove\n                    remove(parent, prop, index);\n                    return this.skip();\n                }\n                if (/^Export/.test(node.type)) {\n                    const replacement = component.extract_exports(node);\n                    if (replacement) {\n                        this.replace(replacement);\n                    }\n                    else {\n                        // TODO: to use actual remove\n                        remove(parent, prop, index);\n                    }\n                    return this.skip();\n                }\n                component.warn_on_undefined_store_value_references(node, parent, prop, scope);\n            },\n            leave(node) {\n                if ((node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression')) {\n                    current_function_stack.pop();\n                    current_function = current_function_stack[current_function_stack.length - 1];\n                }\n                // do it on leave, to prevent infinite loop\n                if (component.compile_options.dev && component.compile_options.loopGuardTimeout > 0 && (!current_function || (!current_function.generator && !current_function.async))) {\n                    const to_replace_for_loop_protect = component.loop_protect(node, scope, component.compile_options.loopGuardTimeout);\n                    if (to_replace_for_loop_protect) {\n                        this.replace(to_replace_for_loop_protect);\n                        scope_updated = true;\n                    }\n                }\n                if (map.has(node)) {\n                    scope = scope.parent;\n                }\n            }\n        });\n        for (const [parent, prop, index] of to_remove) {\n            if (parent) {\n                if (index !== null) {\n                    parent[prop].splice(index, 1);\n                }\n                else {\n                    delete parent[prop];\n                }\n            }\n        }\n        if (scope_updated) {\n            const { scope, map } = create_scopes(script.content);\n            this.instance_scope = scope;\n            this.instance_scope_map = map;\n        }\n    }\n    track_references_and_mutations() {\n        const script = this.ast.instance;\n        if (!script)\n            return;\n        const component = this;\n        const { content } = script;\n        const { instance_scope, module_scope, instance_scope_map: map } = this;\n        let scope = instance_scope;\n        walk(content, {\n            enter(node, parent) {\n                if (map.has(node)) {\n                    scope = map.get(node);\n                }\n                if (node.type === 'AssignmentExpression' || node.type === 'UpdateExpression') {\n                    const assignee = node.type === 'AssignmentExpression' ? node.left : node.argument;\n                    const names = extract_names(assignee);\n                    const deep = assignee.type === 'MemberExpression';\n                    names.forEach(name => {\n                        const scope_owner = scope.find_owner(name);\n                        if (scope_owner !== null\n                            ? scope_owner === instance_scope\n                            : module_scope && module_scope.has(name)) {\n                            const variable = component.var_lookup.get(name);\n                            variable[deep ? 'mutated' : 'reassigned'] = true;\n                        }\n                    });\n                }\n                if (is_used_as_reference(node, parent)) {\n                    const object = get_object(node);\n                    if (scope.find_owner(object.name) === instance_scope) {\n                        const variable = component.var_lookup.get(object.name);\n                        variable.referenced_from_script = true;\n                    }\n                }\n            },\n            leave(node) {\n                if (map.has(node)) {\n                    scope = scope.parent;\n                }\n            }\n        });\n    }\n    warn_on_undefined_store_value_references(node, parent, prop, scope) {\n        if (node.type === 'LabeledStatement' &&\n            node.label.name === '$' &&\n            parent.type !== 'Program') {\n            this.warn(node, compiler_warnings.non_top_level_reactive_declaration);\n        }\n        if (is_reference(node, parent)) {\n            const object = get_object(node);\n            const { name } = object;\n            if (name[0] === '$') {\n                if (!scope.has(name)) {\n                    this.warn_if_undefined(name, object, null);\n                }\n                if (name[1] !== '$' && scope.has(name.slice(1)) && scope.find_owner(name.slice(1)) !== this.instance_scope) {\n                    if (!((/Function/.test(parent.type) && prop === 'params') || (parent.type === 'VariableDeclarator' && prop === 'id'))) {\n                        return this.error(node, compiler_errors.contextual_store);\n                    }\n                }\n            }\n        }\n    }\n    loop_protect(node, scope, timeout) {\n        if (node.type === 'WhileStatement' ||\n            node.type === 'ForStatement' ||\n            node.type === 'DoWhileStatement') {\n            const guard = this.get_unique_name('guard', scope);\n            this.used_names.add(guard.name);\n            const before = b `const ${guard} = @loop_guard(${timeout})`;\n            const inside = b `${guard}();`;\n            // wrap expression statement with BlockStatement\n            if (node.body.type !== 'BlockStatement') {\n                node.body = {\n                    type: 'BlockStatement',\n                    body: [node.body]\n                };\n            }\n            node.body.body.push(inside[0]);\n            return {\n                type: 'BlockStatement',\n                body: [\n                    before[0],\n                    node\n                ]\n            };\n        }\n        return null;\n    }\n    rewrite_props(get_insert) {\n        if (!this.ast.instance)\n            return;\n        const component = this;\n        const { instance_scope, instance_scope_map: map } = this;\n        let scope = instance_scope;\n        walk(this.ast.instance.content, {\n            enter(node) {\n                if (/Function/.test(node.type)) {\n                    return this.skip();\n                }\n                if (map.has(node)) {\n                    scope = map.get(node);\n                }\n                if (node.type === 'ExportNamedDeclaration' && node.declaration) {\n                    return this.replace(node.declaration);\n                }\n                if (node.type === 'VariableDeclaration') {\n                    // NOTE: `var` does not follow block scoping\n                    if (node.kind === 'var' || scope === instance_scope) {\n                        const inserts = [];\n                        const props = [];\n                        function add_new_props(exported, local, default_value) {\n                            props.push({\n                                type: 'Property',\n                                method: false,\n                                shorthand: false,\n                                computed: false,\n                                kind: 'init',\n                                key: exported,\n                                value: default_value\n                                    ? {\n                                        type: 'AssignmentPattern',\n                                        left: local,\n                                        right: default_value\n                                    }\n                                    : local\n                            });\n                        }\n                        // transform\n                        // ```\n                        // export let { x, y = 123 } = OBJ, z = 456\n                        // ```\n                        // into\n                        // ```\n                        // let { x: x$, y: y$ = 123 } = OBJ;\n                        // let { x = x$, y = y$, z = 456 } = $$props;\n                        // ```\n                        for (let index = 0; index < node.declarations.length; index++) {\n                            const declarator = node.declarations[index];\n                            if (declarator.id.type !== 'Identifier') {\n                                function get_new_name(local) {\n                                    const variable = component.var_lookup.get(local.name);\n                                    if (variable.subscribable) {\n                                        inserts.push(get_insert(variable));\n                                    }\n                                    if (variable.export_name && variable.writable) {\n                                        const alias_name = component.get_unique_name(local.name);\n                                        add_new_props({ type: 'Identifier', name: variable.export_name }, local, alias_name);\n                                        return alias_name;\n                                    }\n                                    return local;\n                                }\n                                function rename_identifiers(param) {\n                                    switch (param.type) {\n                                        case 'ObjectPattern': {\n                                            const handle_prop = (prop) => {\n                                                if (prop.type === 'RestElement') {\n                                                    rename_identifiers(prop);\n                                                }\n                                                else if (prop.value.type === 'Identifier') {\n                                                    prop.value = get_new_name(prop.value);\n                                                }\n                                                else {\n                                                    rename_identifiers(prop.value);\n                                                }\n                                            };\n                                            param.properties.forEach(handle_prop);\n                                            break;\n                                        }\n                                        case 'ArrayPattern': {\n                                            const handle_element = (element, index, array) => {\n                                                if (element) {\n                                                    if (element.type === 'Identifier') {\n                                                        array[index] = get_new_name(element);\n                                                    }\n                                                    else {\n                                                        rename_identifiers(element);\n                                                    }\n                                                }\n                                            };\n                                            param.elements.forEach(handle_element);\n                                            break;\n                                        }\n                                        case 'RestElement':\n                                            param.argument = get_new_name(param.argument);\n                                            break;\n                                        case 'AssignmentPattern':\n                                            if (param.left.type === 'Identifier') {\n                                                param.left = get_new_name(param.left);\n                                            }\n                                            else {\n                                                rename_identifiers(param.left);\n                                            }\n                                            break;\n                                    }\n                                }\n                                rename_identifiers(declarator.id);\n                            }\n                            else {\n                                const { name } = declarator.id;\n                                const variable = component.var_lookup.get(name);\n                                const is_props = variable.export_name && variable.writable;\n                                if (is_props) {\n                                    add_new_props({ type: 'Identifier', name: variable.export_name }, declarator.id, declarator.init);\n                                    node.declarations.splice(index--, 1);\n                                }\n                                if (variable.subscribable && (is_props || declarator.init)) {\n                                    inserts.push(get_insert(variable));\n                                }\n                            }\n                        }\n                        this.replace(b `\n\t\t\t\t\t\t\t${node.declarations.length ? node : null}\n\t\t\t\t\t\t\t${props.length > 0 && b `let { ${props} } = $$props;`}\n\t\t\t\t\t\t\t${inserts}\n\t\t\t\t\t\t`);\n                        return this.skip();\n                    }\n                }\n            },\n            leave(node) {\n                if (map.has(node)) {\n                    scope = scope.parent;\n                }\n            }\n        });\n    }\n    hoist_instance_declarations() {\n        // we can safely hoist variable declarations that are\n        // initialised to literals, and functions that don't\n        // reference instance variables other than other\n        // hoistable functions. TODO others?\n        const { hoistable_nodes, var_lookup, injected_reactive_declaration_vars, imports } = this;\n        const top_level_function_declarations = new Map();\n        const { body } = this.ast.instance.content;\n        for (let i = 0; i < body.length; i += 1) {\n            const node = body[i];\n            if (node.type === 'VariableDeclaration') {\n                const all_hoistable = node.declarations.every(d => {\n                    if (!d.init)\n                        return false;\n                    if (d.init.type !== 'Literal')\n                        return false;\n                    // everything except const values can be changed by e.g. svelte devtools\n                    // which means we can't hoist it\n                    if (node.kind !== 'const' && this.compile_options.dev)\n                        return false;\n                    const { name } = d.id;\n                    const v = this.var_lookup.get(name);\n                    if (v.reassigned)\n                        return false;\n                    if (v.export_name)\n                        return false;\n                    if (this.var_lookup.get(name).reassigned)\n                        return false;\n                    if (this.vars.find(variable => variable.name === name && variable.module)) {\n                        return false;\n                    }\n                    return true;\n                });\n                if (all_hoistable) {\n                    node.declarations.forEach(d => {\n                        const variable = this.var_lookup.get(d.id.name);\n                        variable.hoistable = true;\n                    });\n                    hoistable_nodes.add(node);\n                    body.splice(i--, 1);\n                    this.fully_hoisted.push(node);\n                }\n            }\n            if (node.type === 'ExportNamedDeclaration' &&\n                node.declaration &&\n                node.declaration.type === 'FunctionDeclaration') {\n                top_level_function_declarations.set(node.declaration.id.name, node);\n            }\n            if (node.type === 'FunctionDeclaration') {\n                top_level_function_declarations.set(node.id.name, node);\n            }\n        }\n        const checked = new Set();\n        const walking = new Set();\n        const is_hoistable = fn_declaration => {\n            if (fn_declaration.type === 'ExportNamedDeclaration') {\n                fn_declaration = fn_declaration.declaration;\n            }\n            const instance_scope = this.instance_scope;\n            let scope = this.instance_scope;\n            const map = this.instance_scope_map;\n            let hoistable = true;\n            // handle cycles\n            walking.add(fn_declaration);\n            walk(fn_declaration, {\n                enter(node, parent) {\n                    if (!hoistable)\n                        return this.skip();\n                    if (map.has(node)) {\n                        scope = map.get(node);\n                    }\n                    if (is_reference(node, parent)) {\n                        const { name } = flatten_reference(node);\n                        const owner = scope.find_owner(name);\n                        if (injected_reactive_declaration_vars.has(name)) {\n                            hoistable = false;\n                        }\n                        else if (name[0] === '$' && !owner) {\n                            hoistable = false;\n                        }\n                        else if (owner === instance_scope) {\n                            const variable = var_lookup.get(name);\n                            if (variable.reassigned || variable.mutated)\n                                hoistable = false;\n                            if (name === fn_declaration.id.name)\n                                return;\n                            if (variable.hoistable)\n                                return;\n                            if (top_level_function_declarations.has(name)) {\n                                const other_declaration = top_level_function_declarations.get(name);\n                                if (walking.has(other_declaration)) {\n                                    hoistable = false;\n                                }\n                                else if (other_declaration.type === 'ExportNamedDeclaration' &&\n                                    walking.has(other_declaration.declaration)) {\n                                    hoistable = false;\n                                }\n                                else if (!is_hoistable(other_declaration)) {\n                                    hoistable = false;\n                                }\n                            }\n                            else {\n                                hoistable = false;\n                            }\n                        }\n                        this.skip();\n                    }\n                },\n                leave(node) {\n                    if (map.has(node)) {\n                        scope = scope.parent;\n                    }\n                }\n            });\n            checked.add(fn_declaration);\n            walking.delete(fn_declaration);\n            return hoistable;\n        };\n        for (const [name, node] of top_level_function_declarations) {\n            if (is_hoistable(node)) {\n                const variable = this.var_lookup.get(name);\n                variable.hoistable = true;\n                hoistable_nodes.add(node);\n                const i = body.indexOf(node);\n                body.splice(i, 1);\n                this.fully_hoisted.push(node);\n            }\n        }\n        for (const { specifiers } of imports) {\n            for (const specifier of specifiers) {\n                const variable = var_lookup.get(specifier.local.name);\n                if (!variable.mutated || variable.subscribable) {\n                    variable.hoistable = true;\n                }\n            }\n        }\n    }\n    extract_reactive_declarations() {\n        const component = this;\n        const unsorted_reactive_declarations = [];\n        this.ast.instance.content.body.forEach(node => {\n            const ignores = extract_svelte_ignore_from_comments(node);\n            if (ignores.length)\n                this.push_ignores(ignores);\n            if (node.type === 'LabeledStatement' && node.label.name === '$') {\n                this.reactive_declaration_nodes.add(node);\n                const assignees = new Set();\n                const assignee_nodes = new Set();\n                const dependencies = new Set();\n                const module_dependencies = new Set();\n                let scope = this.instance_scope;\n                const map = this.instance_scope_map;\n                walk(node.body, {\n                    enter(node, parent) {\n                        if (map.has(node)) {\n                            scope = map.get(node);\n                        }\n                        if (node.type === 'AssignmentExpression') {\n                            const left = get_object(node.left);\n                            extract_identifiers(left).forEach(node => {\n                                assignee_nodes.add(node);\n                                assignees.add(node.name);\n                            });\n                            if (node.operator !== '=') {\n                                dependencies.add(left.name);\n                            }\n                        }\n                        else if (node.type === 'UpdateExpression') {\n                            const identifier = get_object(node.argument);\n                            assignees.add(identifier.name);\n                        }\n                        else if (is_reference(node, parent)) {\n                            const identifier = get_object(node);\n                            if (!assignee_nodes.has(identifier)) {\n                                const { name } = identifier;\n                                const owner = scope.find_owner(name);\n                                const variable = component.var_lookup.get(name);\n                                let should_add_as_dependency = true;\n                                if (variable) {\n                                    variable.is_reactive_dependency = true;\n                                    if (variable.module && variable.writable) {\n                                        should_add_as_dependency = false;\n                                        module_dependencies.add(name);\n                                    }\n                                }\n                                const is_writable_or_mutated = variable && (variable.writable || variable.mutated);\n                                if (should_add_as_dependency &&\n                                    (!owner || owner === component.instance_scope) &&\n                                    (name[0] === '$' || is_writable_or_mutated)) {\n                                    dependencies.add(name);\n                                }\n                            }\n                            this.skip();\n                        }\n                    },\n                    leave(node) {\n                        if (map.has(node)) {\n                            scope = scope.parent;\n                        }\n                    }\n                });\n                if (module_dependencies.size > 0 && dependencies.size === 0) {\n                    component.warn(node.body, compiler_warnings.module_script_variable_reactive_declaration(Array.from(module_dependencies)));\n                }\n                const { expression } = node.body;\n                const declaration = expression && expression.left;\n                unsorted_reactive_declarations.push({\n                    assignees,\n                    dependencies,\n                    node,\n                    declaration\n                });\n            }\n            if (ignores.length)\n                this.pop_ignores();\n        });\n        const lookup = new Map();\n        unsorted_reactive_declarations.forEach(declaration => {\n            declaration.assignees.forEach(name => {\n                if (!lookup.has(name)) {\n                    lookup.set(name, []);\n                }\n                // TODO warn or error if a name is assigned to in\n                // multiple reactive declarations?\n                lookup.get(name).push(declaration);\n            });\n        });\n        const cycle = check_graph_for_cycles(unsorted_reactive_declarations.reduce((acc, declaration) => {\n            declaration.assignees.forEach(v => {\n                declaration.dependencies.forEach(w => {\n                    if (!declaration.assignees.has(w)) {\n                        acc.push([v, w]);\n                    }\n                });\n            });\n            return acc;\n        }, []));\n        if (cycle && cycle.length) {\n            const declarationList = lookup.get(cycle[0]);\n            const declaration = declarationList[0];\n            return this.error(declaration.node, compiler_errors.cyclical_reactive_declaration(cycle));\n        }\n        const add_declaration = declaration => {\n            if (this.reactive_declarations.includes(declaration))\n                return;\n            declaration.dependencies.forEach(name => {\n                if (declaration.assignees.has(name))\n                    return;\n                const earlier_declarations = lookup.get(name);\n                if (earlier_declarations) {\n                    earlier_declarations.forEach(add_declaration);\n                }\n            });\n            this.reactive_declarations.push(declaration);\n        };\n        unsorted_reactive_declarations.forEach(add_declaration);\n    }\n    warn_if_undefined(name, node, template_scope) {\n        if (name[0] === '$') {\n            if (name === '$' || name[1] === '$' && !is_reserved_keyword(name)) {\n                return this.error(node, compiler_errors.illegal_global(name));\n            }\n            this.has_reactive_assignments = true; // TODO does this belong here?\n            if (is_reserved_keyword(name))\n                return;\n            name = name.slice(1);\n        }\n        if (this.var_lookup.has(name) && !this.var_lookup.get(name).global)\n            return;\n        if (template_scope && template_scope.names.has(name))\n            return;\n        if (globals.has(name) && node.type !== 'InlineComponent')\n            return;\n        this.warn(node, compiler_warnings.missing_declaration(name, !!this.ast.instance));\n    }\n    push_ignores(ignores) {\n        this.ignores = new Set(this.ignores || []);\n        add_to_set(this.ignores, ignores);\n        this.ignore_stack.push(this.ignores);\n    }\n    pop_ignores() {\n        this.ignore_stack.pop();\n        this.ignores = this.ignore_stack[this.ignore_stack.length - 1];\n    }\n}\nfunction process_component_options(component, nodes) {\n    const component_options = {\n        immutable: component.compile_options.immutable || false,\n        accessors: 'accessors' in component.compile_options\n            ? component.compile_options.accessors\n            : !!component.compile_options.customElement,\n        preserveWhitespace: !!component.compile_options.preserveWhitespace,\n        namespace: component.compile_options.namespace\n    };\n    const node = nodes.find(node => node.name === 'svelte:options');\n    function get_value(attribute, { code, message }) {\n        const { value } = attribute;\n        const chunk = value[0];\n        if (!chunk)\n            return true;\n        if (value.length > 1) {\n            return component.error(attribute, { code, message });\n        }\n        if (chunk.type === 'Text')\n            return chunk.data;\n        if (chunk.expression.type !== 'Literal') {\n            return component.error(attribute, { code, message });\n        }\n        return chunk.expression.value;\n    }\n    if (node) {\n        node.attributes.forEach(attribute => {\n            if (attribute.type === 'Attribute') {\n                const { name } = attribute;\n                switch (name) {\n                    case 'tag': {\n                        const tag = get_value(attribute, compiler_errors.invalid_tag_attribute);\n                        if (typeof tag !== 'string' && tag !== null) {\n                            return component.error(attribute, compiler_errors.invalid_tag_attribute);\n                        }\n                        if (tag && !/^[a-zA-Z][a-zA-Z0-9]*-[a-zA-Z0-9-]+$/.test(tag)) {\n                            return component.error(attribute, compiler_errors.invalid_tag_property);\n                        }\n                        if (tag && !component.compile_options.customElement) {\n                            component.warn(attribute, compiler_warnings.missing_custom_element_compile_options);\n                        }\n                        component_options.tag = tag;\n                        break;\n                    }\n                    case 'namespace': {\n                        const ns = get_value(attribute, compiler_errors.invalid_namespace_attribute);\n                        if (typeof ns !== 'string') {\n                            return component.error(attribute, compiler_errors.invalid_namespace_attribute);\n                        }\n                        if (valid_namespaces.indexOf(ns) === -1) {\n                            const match = fuzzymatch(ns, valid_namespaces);\n                            return component.error(attribute, compiler_errors.invalid_namespace_property(ns, match));\n                        }\n                        component_options.namespace = ns;\n                        break;\n                    }\n                    case 'accessors':\n                    case 'immutable':\n                    case 'preserveWhitespace': {\n                        const value = get_value(attribute, compiler_errors.invalid_attribute_value(name));\n                        if (typeof value !== 'boolean') {\n                            return component.error(attribute, compiler_errors.invalid_attribute_value(name));\n                        }\n                        component_options[name] = value;\n                        break;\n                    }\n                    default:\n                        return component.error(attribute, compiler_errors.invalid_options_attribute_unknown);\n                }\n            }\n            else {\n                return component.error(attribute, compiler_errors.invalid_options_attribute);\n            }\n        });\n    }\n    return component_options;\n}\nfunction get_relative_path(from, to) {\n    const from_parts = from.split(/[/\\\\]/);\n    const to_parts = to.split(/[/\\\\]/);\n    from_parts.pop(); // get dirname\n    while (from_parts[0] === to_parts[0]) {\n        from_parts.shift();\n        to_parts.shift();\n    }\n    if (from_parts.length) {\n        let i = from_parts.length;\n        while (i--)\n            from_parts[i] = '..';\n    }\n    return from_parts.concat(to_parts).join('/');\n}\nfunction get_basename(filename) {\n    return filename.split(/[/\\\\]/).pop();\n}\nfunction get_sourcemap_source_filename(compile_options) {\n    if (!compile_options.filename)\n        return null;\n    return compile_options.outputFilename\n        ? get_relative_path(compile_options.outputFilename, compile_options.filename)\n        : get_basename(compile_options.filename);\n}\n\nfunction get_name_from_filename(filename) {\n    if (!filename)\n        return null;\n    const parts = filename.split(/[/\\\\]/).map(encodeURI);\n    if (parts.length > 1) {\n        const index_match = parts[parts.length - 1].match(/^index(\\.\\w+)/);\n        if (index_match) {\n            parts.pop();\n            parts[parts.length - 1] += index_match[1];\n        }\n    }\n    const base = parts.pop()\n        .replace(/%/g, 'u')\n        .replace(/\\.[^.]+$/, '')\n        .replace(/[^a-zA-Z_$0-9]+/g, '_')\n        .replace(/^_/, '')\n        .replace(/_$/, '')\n        .replace(/^(\\d)/, '_$1');\n    if (!base) {\n        throw new Error(`Could not derive component name from file ${filename}`);\n    }\n    return base[0].toUpperCase() + base.slice(1);\n}\n\nconst valid_options = [\n    'format',\n    'name',\n    'filename',\n    'sourcemap',\n    'enableSourcemap',\n    'generate',\n    'errorMode',\n    'varsReport',\n    'outputFilename',\n    'cssOutputFilename',\n    'sveltePath',\n    'dev',\n    'accessors',\n    'immutable',\n    'hydratable',\n    'legacy',\n    'customElement',\n    'namespace',\n    'tag',\n    'css',\n    'loopGuardTimeout',\n    'preserveComments',\n    'preserveWhitespace',\n    'cssHash'\n];\nfunction validate_options(options, warnings) {\n    const { name, filename, loopGuardTimeout, dev, namespace } = options;\n    Object.keys(options).forEach(key => {\n        if (!valid_options.includes(key)) {\n            const match = fuzzymatch(key, valid_options);\n            let message = `Unrecognized option '${key}'`;\n            if (match)\n                message += ` (did you mean '${match}'?)`;\n            throw new Error(message);\n        }\n    });\n    if (name && !/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(name)) {\n        throw new Error(`options.name must be a valid identifier (got '${name}')`);\n    }\n    if (name && /^[a-z]/.test(name)) {\n        const message = 'options.name should be capitalised';\n        warnings.push({\n            code: 'options-lowercase-name',\n            message,\n            filename,\n            toString: () => message\n        });\n    }\n    if (loopGuardTimeout && !dev) {\n        const message = 'options.loopGuardTimeout is for options.dev = true only';\n        warnings.push({\n            code: 'options-loop-guard-timeout',\n            message,\n            filename,\n            toString: () => message\n        });\n    }\n    if (namespace && valid_namespaces.indexOf(namespace) === -1) {\n        const match = fuzzymatch(namespace, valid_namespaces);\n        if (match) {\n            throw new Error(`Invalid namespace '${namespace}' (did you mean '${match}'?)`);\n        }\n        else {\n            throw new Error(`Invalid namespace '${namespace}'`);\n        }\n    }\n}\nfunction compile(source, options = {}) {\n    options = Object.assign({ generate: 'dom', dev: false, enableSourcemap: true }, options);\n    const stats = new Stats();\n    const warnings = [];\n    validate_options(options, warnings);\n    stats.start('parse');\n    const ast = parse$3(source, options);\n    stats.stop('parse');\n    stats.start('create component');\n    const component = new Component(ast, source, options.name || get_name_from_filename(options.filename) || 'Component', options, stats, warnings);\n    stats.stop('create component');\n    const result = options.generate === false\n        ? null\n        : options.generate === 'ssr'\n            ? ssr(component, options)\n            : dom(component, options);\n    return component.generate(result);\n}\n\n/**\n * Import decoded sourcemap from mozilla/source-map/SourceMapGenerator\n * Forked from source-map/lib/source-map-generator.js\n * from methods _serializeMappings and toJSON.\n * We cannot use source-map.d.ts types, because we access hidden properties.\n */\nfunction decoded_sourcemap_from_generator(generator) {\n    let previous_generated_line = 1;\n    const converted_mappings = [[]];\n    let result_line;\n    let result_segment;\n    let mapping;\n    const source_idx = generator._sources.toArray()\n        .reduce((acc, val, idx) => (acc[val] = idx, acc), {});\n    const name_idx = generator._names.toArray()\n        .reduce((acc, val, idx) => (acc[val] = idx, acc), {});\n    const mappings = generator._mappings.toArray();\n    result_line = converted_mappings[0];\n    for (let i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        if (mapping.generatedLine > previous_generated_line) {\n            while (mapping.generatedLine > previous_generated_line) {\n                converted_mappings.push([]);\n                previous_generated_line++;\n            }\n            result_line = converted_mappings[mapping.generatedLine - 1]; // line is one-based\n        }\n        else if (i > 0) {\n            const previous_mapping = mappings[i - 1];\n            if (\n            // sorted by selectivity\n            mapping.generatedColumn === previous_mapping.generatedColumn &&\n                mapping.originalColumn === previous_mapping.originalColumn &&\n                mapping.name === previous_mapping.name &&\n                mapping.generatedLine === previous_mapping.generatedLine &&\n                mapping.originalLine === previous_mapping.originalLine &&\n                mapping.source === previous_mapping.source) {\n                continue;\n            }\n        }\n        result_line.push([mapping.generatedColumn]);\n        result_segment = result_line[result_line.length - 1];\n        if (mapping.source != null) {\n            result_segment.push(...[\n                source_idx[mapping.source],\n                mapping.originalLine - 1,\n                mapping.originalColumn\n            ]);\n            if (mapping.name != null) {\n                result_segment.push(name_idx[mapping.name]);\n            }\n        }\n    }\n    const map = {\n        version: generator._version,\n        sources: generator._sources.toArray(),\n        names: generator._names.toArray(),\n        mappings: converted_mappings\n    };\n    if (generator._file != null) {\n        map.file = generator._file;\n    }\n    // not needed: map.sourcesContent and map.sourceRoot\n    return map;\n}\nfunction decode_map(processed) {\n    let decoded_map = typeof processed.map === 'string' ? JSON.parse(processed.map) : processed.map;\n    if (typeof (decoded_map.mappings) === 'string') {\n        decoded_map.mappings = decode(decoded_map.mappings);\n    }\n    if (decoded_map._mappings && decoded_map.constructor.name === 'SourceMapGenerator') {\n        // import decoded sourcemap from mozilla/source-map/SourceMapGenerator\n        decoded_map = decoded_sourcemap_from_generator(decoded_map);\n    }\n    return decoded_map;\n}\n\nfunction slice_source(code_slice, offset, { file_basename, filename, get_location }) {\n    return {\n        source: code_slice,\n        get_location: (index) => get_location(index + offset),\n        file_basename,\n        filename\n    };\n}\nfunction calculate_replacements(re, get_replacement, source) {\n    const replacements = [];\n    source.replace(re, (...match) => {\n        replacements.push(get_replacement(...match).then(replacement => {\n            const matched_string = match[0];\n            const offset = match[match.length - 2];\n            return ({ offset, length: matched_string.length, replacement });\n        }));\n        return '';\n    });\n    return Promise.all(replacements);\n}\nfunction perform_replacements(replacements, source) {\n    const out = new MappedCode();\n    let last_end = 0;\n    for (const { offset, length, replacement } of replacements) {\n        const unchanged_prefix = MappedCode.from_source(slice_source(source.source.slice(last_end, offset), last_end, source));\n        out.concat(unchanged_prefix).concat(replacement);\n        last_end = offset + length;\n    }\n    const unchanged_suffix = MappedCode.from_source(slice_source(source.source.slice(last_end), last_end, source));\n    return out.concat(unchanged_suffix);\n}\nasync function replace_in_code(regex, get_replacement, location) {\n    const replacements = await calculate_replacements(regex, get_replacement, location.source);\n    return perform_replacements(replacements, location);\n}\n\nfunction get_file_basename(filename) {\n    return filename.split(/[/\\\\]/).pop();\n}\n/**\n * Represents intermediate states of the preprocessing.\n */\nclass PreprocessResult {\n    constructor(source, filename) {\n        this.source = source;\n        this.filename = filename;\n        // sourcemap_list is sorted in reverse order from last map (index 0) to first map (index -1)\n        // so we use sourcemap_list.unshift() to add new maps\n        // https://github.com/ampproject/remapping#multiple-transformations-of-a-file\n        this.sourcemap_list = [];\n        this.dependencies = [];\n        this.update_source({ string: source });\n        // preprocess source must be relative to itself or equal null\n        this.file_basename = filename == null ? null : get_file_basename(filename);\n    }\n    update_source({ string: source, map, dependencies }) {\n        if (source != null) {\n            this.source = source;\n            this.get_location = getLocator(source);\n        }\n        if (map) {\n            this.sourcemap_list.unshift(map);\n        }\n        if (dependencies) {\n            this.dependencies.push(...dependencies);\n        }\n    }\n    to_processed() {\n        // Combine all the source maps for each preprocessor function into one\n        const map = combine_sourcemaps(this.file_basename, this.sourcemap_list);\n        return {\n            // TODO return separated output, in future version where svelte.compile supports it:\n            // style: { code: styleCode, map: styleMap },\n            // script { code: scriptCode, map: scriptMap },\n            // markup { code: markupCode, map: markupMap },\n            code: this.source,\n            dependencies: [...new Set(this.dependencies)],\n            map: map,\n            toString: () => this.source\n        };\n    }\n}\n/**\n * Convert preprocessor output for the tag content into MappedCode\n */\nfunction processed_content_to_code(processed, location, file_basename) {\n    // Convert the preprocessed code and its sourcemap to a MappedCode\n    let decoded_map;\n    if (processed.map) {\n        decoded_map = decode_map(processed);\n        // decoded map may not have sources for empty maps like `{ mappings: '' }`\n        if (decoded_map.sources) {\n            // offset only segments pointing at original component source\n            const source_index = decoded_map.sources.indexOf(file_basename);\n            if (source_index !== -1) {\n                sourcemap_add_offset(decoded_map, location, source_index);\n            }\n        }\n    }\n    return MappedCode.from_processed(processed.code, decoded_map);\n}\n/**\n * Given the whole tag including content, return a `MappedCode`\n * representing the tag content replaced with `processed`.\n */\nfunction processed_tag_to_code(processed, tag_name, attributes, source) {\n    const { file_basename, get_location } = source;\n    const build_mapped_code = (code, offset) => MappedCode.from_source(slice_source(code, offset, source));\n    const tag_open = `<${tag_name}${attributes || ''}>`;\n    const tag_close = `</${tag_name}>`;\n    const tag_open_code = build_mapped_code(tag_open, 0);\n    const tag_close_code = build_mapped_code(tag_close, tag_open.length + source.source.length);\n    parse_attached_sourcemap(processed, tag_name);\n    const content_code = processed_content_to_code(processed, get_location(tag_open.length), file_basename);\n    return tag_open_code.concat(content_code).concat(tag_close_code);\n}\nfunction parse_tag_attributes(str) {\n    // note: won't work with attribute values containing spaces.\n    return str\n        .split(/\\s+/)\n        .filter(Boolean)\n        .reduce((attrs, attr) => {\n        var _a;\n        const i = attr.indexOf('=');\n        const [key, value] = i > 0 ? [attr.slice(0, i), attr.slice(i + 1)] : [attr];\n        const [, unquoted] = (value && value.match(/^['\"](.*)['\"]$/)) || [];\n        return Object.assign(Object.assign({}, attrs), { [key]: (_a = (unquoted !== null && unquoted !== void 0 ? unquoted : value), (_a !== null && _a !== void 0 ? _a : true)) });\n    }, {});\n}\n/**\n * Calculate the updates required to process all instances of the specified tag.\n */\nasync function process_tag(tag_name, preprocessor, source) {\n    const { filename, source: markup } = source;\n    const tag_regex = tag_name === 'style'\n        ? /<!--[^]*?-->|<style(\\s[^]*?)?(?:>([^]*?)<\\/style>|\\/>)/gi\n        : /<!--[^]*?-->|<script(\\s[^]*?)?(?:>([^]*?)<\\/script>|\\/>)/gi;\n    const dependencies = [];\n    async function process_single_tag(tag_with_content, attributes = '', content = '', tag_offset) {\n        const no_change = () => MappedCode.from_source(slice_source(tag_with_content, tag_offset, source));\n        if (!attributes && !content)\n            return no_change();\n        const processed = await preprocessor({\n            content: content || '',\n            attributes: parse_tag_attributes(attributes || ''),\n            markup,\n            filename\n        });\n        if (!processed)\n            return no_change();\n        if (processed.dependencies)\n            dependencies.push(...processed.dependencies);\n        if (!processed.map && processed.code === content)\n            return no_change();\n        return processed_tag_to_code(processed, tag_name, attributes, slice_source(content, tag_offset, source));\n    }\n    const { string, map } = await replace_in_code(tag_regex, process_single_tag, source);\n    return { string, map, dependencies };\n}\nasync function process_markup(process, source) {\n    const processed = await process({\n        content: source.source,\n        filename: source.filename\n    });\n    if (processed) {\n        return {\n            string: processed.code,\n            map: processed.map\n                ? // TODO: can we use decode_sourcemap?\n                    typeof processed.map === 'string'\n                        ? JSON.parse(processed.map)\n                        : processed.map\n                : undefined,\n            dependencies: processed.dependencies\n        };\n    }\n    else {\n        return {};\n    }\n}\nasync function preprocess(source, preprocessor, options) {\n    const filename = (options && options.filename) || preprocessor.filename; // legacy\n    const preprocessors = preprocessor ? (Array.isArray(preprocessor) ? preprocessor : [preprocessor]) : [];\n    const markup = preprocessors.map(p => p.markup).filter(Boolean);\n    const script = preprocessors.map(p => p.script).filter(Boolean);\n    const style = preprocessors.map(p => p.style).filter(Boolean);\n    const result = new PreprocessResult(source, filename);\n    // TODO keep track: what preprocessor generated what sourcemap?\n    // to make debugging easier = detect low-resolution sourcemaps in fn combine_mappings\n    for (const process of markup) {\n        result.update_source(await process_markup(process, result));\n    }\n    for (const process of script) {\n        result.update_source(await process_tag('script', process, result));\n    }\n    for (const preprocess of style) {\n        result.update_source(await process_tag('style', preprocess, result));\n    }\n    return result.to_processed();\n}\n\nconst VERSION = '3.46.4';\n\nexport { VERSION, compile, parse$3 as parse, preprocess, walk };\n//# sourceMappingURL=compiler.mjs.map\n","function lexer(str) {\n  var tokens = [];\n  var i = 0;\n  while (i < str.length) {\n    var char = str[i];\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({type: \"MODIFIER\", index: i, value: str[i++]});\n      continue;\n    }\n    if (char === \"\\\\\") {\n      tokens.push({type: \"ESCAPED_CHAR\", index: i++, value: str[i++]});\n      continue;\n    }\n    if (char === \"{\") {\n      tokens.push({type: \"OPEN\", index: i, value: str[i++]});\n      continue;\n    }\n    if (char === \"}\") {\n      tokens.push({type: \"CLOSE\", index: i, value: str[i++]});\n      continue;\n    }\n    if (char === \":\") {\n      var name = \"\";\n      var j = i + 1;\n      while (j < str.length) {\n        var code = str.charCodeAt(j);\n        if (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122 || code === 95) {\n          name += str[j++];\n          continue;\n        }\n        break;\n      }\n      if (!name)\n        throw new TypeError(\"Missing parameter name at \" + i);\n      tokens.push({type: \"NAME\", index: i, value: name});\n      i = j;\n      continue;\n    }\n    if (char === \"(\") {\n      var count = 1;\n      var pattern = \"\";\n      var j = i + 1;\n      if (str[j] === \"?\") {\n        throw new TypeError('Pattern cannot start with \"?\" at ' + j);\n      }\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(\"Capturing groups are not allowed at \" + j);\n          }\n        }\n        pattern += str[j++];\n      }\n      if (count)\n        throw new TypeError(\"Unbalanced pattern at \" + i);\n      if (!pattern)\n        throw new TypeError(\"Missing pattern at \" + i);\n      tokens.push({type: \"PATTERN\", index: i, value: pattern});\n      i = j;\n      continue;\n    }\n    tokens.push({type: \"CHAR\", index: i, value: str[i++]});\n  }\n  tokens.push({type: \"END\", index: i, value: \"\"});\n  return tokens;\n}\nfunction parse(str, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var tokens = lexer(str);\n  var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a;\n  var defaultPattern = \"[^\" + escapeString(options.delimiter || \"/#?\") + \"]+?\";\n  var result = [];\n  var key = 0;\n  var i = 0;\n  var path = \"\";\n  var tryConsume = function(type) {\n    if (i < tokens.length && tokens[i].type === type)\n      return tokens[i++].value;\n  };\n  var mustConsume = function(type) {\n    var value2 = tryConsume(type);\n    if (value2 !== void 0)\n      return value2;\n    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;\n    throw new TypeError(\"Unexpected \" + nextType + \" at \" + index + \", expected \" + type);\n  };\n  var consumeText = function() {\n    var result2 = \"\";\n    var value2;\n    while (value2 = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result2 += value2;\n    }\n    return result2;\n  };\n  while (i < tokens.length) {\n    var char = tryConsume(\"CHAR\");\n    var name = tryConsume(\"NAME\");\n    var pattern = tryConsume(\"PATTERN\");\n    if (name || pattern) {\n      var prefix = char || \"\";\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    var value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n    var open = tryConsume(\"OPEN\");\n    if (open) {\n      var prefix = consumeText();\n      var name_1 = tryConsume(\"NAME\") || \"\";\n      var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n      var suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      result.push({\n        name: name_1 || (pattern_1 ? key++ : \"\"),\n        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    mustConsume(\"END\");\n  }\n  return result;\n}\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options), options);\n}\nfunction tokensToFunction(tokens, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var reFlags = flags(options);\n  var _a = options.encode, encode = _a === void 0 ? function(x) {\n    return x;\n  } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;\n  var matches = tokens.map(function(token) {\n    if (typeof token === \"object\") {\n      return new RegExp(\"^(?:\" + token.pattern + \")$\", reFlags);\n    }\n  });\n  return function(data) {\n    var path = \"\";\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n      var value = data ? data[token.name] : void 0;\n      var optional = token.modifier === \"?\" || token.modifier === \"*\";\n      var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got an array');\n        }\n        if (value.length === 0) {\n          if (optional)\n            continue;\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n        }\n        for (var j = 0; j < value.length; j++) {\n          var segment = encode(value[j], token);\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"');\n          }\n          path += token.prefix + segment + token.suffix;\n        }\n        continue;\n      }\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        var segment = encode(String(value), token);\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"');\n        }\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n      if (optional)\n        continue;\n      var typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + typeOfMessage);\n    }\n    return path;\n  };\n}\nfunction match(str, options) {\n  var keys = [];\n  var re = pathToRegexp(str, keys, options);\n  return regexpToFunction(re, keys, options);\n}\nfunction regexpToFunction(re, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.decode, decode = _a === void 0 ? function(x) {\n    return x;\n  } : _a;\n  return function(pathname) {\n    var m = re.exec(pathname);\n    if (!m)\n      return false;\n    var path = m[0], index = m.index;\n    var params = Object.create(null);\n    var _loop_1 = function(i2) {\n      if (m[i2] === void 0)\n        return \"continue\";\n      var key = keys[i2 - 1];\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i2].split(key.prefix + key.suffix).map(function(value) {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i2], key);\n      }\n    };\n    for (var i = 1; i < m.length; i++) {\n      _loop_1(i);\n    }\n    return {path, index, params};\n  };\n}\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\nfunction flags(options) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\nfunction regexpToRegexp(path, keys) {\n  if (!keys)\n    return path;\n  var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n  var index = 0;\n  var execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\"\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n  return path;\n}\nfunction arrayToRegexp(paths, keys, options) {\n  var parts = paths.map(function(path) {\n    return pathToRegexp(path, keys, options).source;\n  });\n  return new RegExp(\"(?:\" + parts.join(\"|\") + \")\", flags(options));\n}\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\nfunction tokensToRegexp(tokens, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {\n    return x;\n  } : _d;\n  var endsWith = \"[\" + escapeString(options.endsWith || \"\") + \"]|$\";\n  var delimiter = \"[\" + escapeString(options.delimiter || \"/#?\") + \"]\";\n  var route = start ? \"^\" : \"\";\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      var prefix = escapeString(encode(token.prefix));\n      var suffix = escapeString(encode(token.suffix));\n      if (token.pattern) {\n        if (keys)\n          keys.push(token);\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            var mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += \"(?:\" + prefix + \"((?:\" + token.pattern + \")(?:\" + suffix + prefix + \"(?:\" + token.pattern + \"))*)\" + suffix + \")\" + mod;\n          } else {\n            route += \"(?:\" + prefix + \"(\" + token.pattern + \")\" + suffix + \")\" + token.modifier;\n          }\n        } else {\n          route += \"(\" + token.pattern + \")\" + token.modifier;\n        }\n      } else {\n        route += \"(?:\" + prefix + suffix + \")\" + token.modifier;\n      }\n    }\n  }\n  if (end) {\n    if (!strict)\n      route += delimiter + \"?\";\n    route += !options.endsWith ? \"$\" : \"(?=\" + endsWith + \")\";\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === \"string\" ? delimiter.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;\n    if (!strict) {\n      route += \"(?:\" + delimiter + \"(?=\" + endsWith + \"))?\";\n    }\n    if (!isEndDelimited) {\n      route += \"(?=\" + delimiter + \"|\" + endsWith + \")\";\n    }\n  }\n  return new RegExp(route, flags(options));\n}\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp)\n    return regexpToRegexp(path, keys);\n  if (Array.isArray(path))\n    return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\nexport {compile, match, parse, pathToRegexp, regexpToFunction, tokensToFunction, tokensToRegexp};\nexport default null;\n","/**\n * Copyright (c) Crew Dev.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ export const Env = {\n    Get (env) {\n        return Deno.env.get(env);\n    },\n    Delete (env) {\n        return Deno.env.delete(env);\n    },\n    Set (env, value) {\n        return Deno.env.set(env, value);\n    },\n    GetAsObject () {\n        return Deno.env.toObject();\n    }\n};\n","/**\n * Copyright (c) Crew Dev.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ import { match } from \"./imports/path_to_regexp.ts\";\n/**\n * Match route from path name.\n */ export function MatchRoute(path, route) {\n    const mtc = match(path, {\n        decode: decodeURIComponent\n    });\n    return !!mtc(route);\n}\nexport function GetParams(path, route) {\n    const mtc = match(path, {\n        decode: decodeURIComponent\n    });\n    return mtc(route);\n}\n/**\n * Normalize a pathname for matching, replaces multiple slashes with a single\n * slash and normalizes unicode characters to \"NFC\". When using this method,\n * `decode` should be an identity function so you don't decode strings twice.\n */ export function NormalizePathName(path) {\n    return decodeURI(path)// Replaces repeated slashes in the URL.\n    .replace(/\\/+/g, \"/\")// Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n    // Note: Missing native IE support, may want to skip this step.\n    .normalize();\n}\n","<script>\n  import Home from \"@/components/Home.svelte\";\n  import { Core } from \"snel\";\n\n  export let Request = {};\n\n  const { MatchRoute } = Core;\n</script>\n\n{#if MatchRoute(\"/\", Request?.PathName)}\n  <Home name={\"World\"} />\n{:else}\n  <main>\n    <h1>404 not found</h1>\n  </main>\n{/if}\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n"],"names":["global$1","global","self","window","noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","is_empty","obj","keys","length","Set","Map","current_component","set_current_component","component","Promise","resolve","globalThis","escaped","escape","html","String","replace","match","on_destroy","SvelteElement","create_ssr_component","$$render","result","props","bindings","slots","context","parent_component","$$","on_mount","before_update","after_update","callbacks","render","$$slots","title","head","css","code","Array","from","map","join","destroy_component","detaching","fragment","d","ctx","HTMLElement","constructor","super","this","attachShadow","mode","connectedCallback","on_disconnect","filter","key","slotted","appendChild","attributeChangedCallback","attr2","_oldValue","newValue","disconnectedCallback","$destroy","$on","type","callback","push","index","indexOf","splice","$set","$$props","$$set","skip_bound","name","process","hrtime","reservedWords","strict","strictBind","ecma5AndLessKeywords","keywords","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","set","pos","i","isIdentifierStart","astral","test","fromCharCode","isIdentifierChar","TokenType","label","conf","keyword","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","binop","updateContext","prec","keywords$1","kw","options","types","num","regexp","string","privateId","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","questionDot","arrow","template","invalidTemplate","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","coalesce","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","source","isNewLine","ecma2019String","nonASCIIwhitespace","skipWhiteSpace","ref","prototype","hasOwnProperty","toString","has","propName","call","isArray","wordsRegexp","words","Position","line","col","column","offset","n","SourceLocation","p","start","end","sourceFile","getLineInfo","input","cur","lastIndex","exec","defaultOptions","ecmaVersion","sourceType","onInsertedSemicolon","onTrailingComma","allowReserved","allowReturnOutsideFunction","allowImportExportEverywhere","allowAwaitOutsideFunction","allowSuperOutsideMethod","allowHashBang","locations","onToken","onComment","ranges","program","directSourceFile","preserveParens","warnedAboutEcmaVersion","getOptions","opts","opt","console","warn","tokens","token","array","block","text","startLoc","endLoc","comment","value","loc","range","pushComment","functionFlags","async","generator","Parser","startPos","reserved","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","lineStart","lastIndexOf","curLine","slice","split","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","initialContext","exprAllowed","inModule","strictDirective","potentialArrowAt","potentialArrowInForAwait","yieldPos","awaitPos","awaitIdentPos","labels","undefinedExports","skipLineComment","scopeStack","enterScope","regexpState","privateNameStack","prototypeAccessors","inFunction","configurable","inGenerator","inAsync","canAwait","allowSuper","allowDirectSuper","treatFunctionsAsVar","inNonArrowFunction","parse","node","startNode","nextToken","parseTopLevel","get","currentVarScope","flags","inClassFieldInit","scope","currentThisScope","treatFunctionsAsVarInScope","currentScope","extend","plugins","len","arguments","cls","parseExpressionAt","parser","parseExpression","tokenizer","defineProperties","pp","literal","DestructuringErrors","shorthandAssign","trailingComma","parenthesizedAssign","parenthesizedBind","doubleProto","spaceAfter","next","charAt","eat","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","notNext","expect","raise","checkPatternErrors","refDestructuringErrors","raiseRecoverable","parens","checkExpressionErrors","andThrow","checkYieldAwaitInDefaultParams","isSimpleAssignTarget","expr","expression","pp$1","exports","body","stmt","parseStatement","list","adaptDirectivePrologue","finishNode","loopLabel","kind","switchLabel","isLet","skip","nextCh","charCodeAt","ident","isAsyncFunction","after","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseExpressionStatement","parseImport","parseExport","maybeName","parseLabeledStatement","isBreak","parseIdent","lab","pop","parseParenExpression","awaitAt","parseFor","init$1","parseVar","declarations","await","parseForIn","init","toAssignable","checkLValPattern","isAsync","declarationPosition","parseFunction","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","exitScope","empty","handler","clause","param","parseBindingAtom","simple","finalizer","object","i$1","label$1","statementStart","createNewLexicalScope","exitStrict","update","isForIn","id","left","right","parseMaybeAssign","isFor","decl","parseVarId","isPrivateNameConflicted","privateNameMap","element","curr","static","checkKeyName","computed","statement","allowExpressionBody","initFunction","checkLValSimple","oldYieldPos","oldAwaitPos","oldAwaitIdentPos","parseFunctionParams","parseFunctionBody","params","parseBindingList","isStatement","oldStrict","parseClassId","parseClassSuper","enterClassBody","classBody","hadConstructor","parseClassElement","superClass","exitClassBody","constructorAllowsSuper","keyName","isGenerator","isClassElementNameStart","lastValue","startNodeAt","parseClassElementName","isConstructor","allowsDirectSuper","parseClassMethod","parseClassField","parsePrivateIdent","parsePropertyName","method","parseMethod","field","parseExprSubscripts","declared","used","parent","exported","checkExport","parseExprAtom","fNode","declaration","cNode","shouldParseExportStatement","checkVariableExport","specifiers","parseExportSpecifiers","spec","checkUnreserved","local","checkLocalExport","checkPatternExport","pat","properties","prop","list$1","elements","elt","decls","nodes","first","parseImportSpecifiers","node$1","node$2","imported","statements","isDirectiveCandidate","directive","raw","pp$2","isBinding","toAssignableList","operator","exprList","last","parseSpread","parseRestBinding","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","bindingType","checkClashes","isBind","declareName","checkLValInnerPattern","pp$3","isPrivateFieldAccess","property","checkPropClash","propHash","shorthand","proto","other","forInit","expressions","afterLeftParse","parseYield","ownDestructuringErrors","oldParenAssign","oldTrailingComma","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","op","buildBinary","sawUnary","parseAwait","parseSubscripts","base","noCalls","maybeAsyncArrow","optionalChained","parseSubscript","optional","chainNode","optionalSupported","parseExprList","parseArrowExpression","callee","tag","quasi","parseTemplate","isTagged","readRegexp","canBeArrow","parseLiteral","regex","pattern","parseParenAndDistinguishExpression","parseNew","parseExprImport","meta","parseDynamicImport","parseImportMeta","errorPos","bigint","val","spreadStart","innerStartPos","innerStartLoc","lastIsComma","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","par","item","empty$1","isImport","parseTemplateElement","cooked","tail","curElt","quasis","isAsyncProp","isPattern","parseProperty","parsePropertyValue","copyNode","paramCount","isArrowFunction","isMethod","isExpression","useStrict","checkParams","nonSimple","isSimpleParamList","oldLabels","undefined","allowDuplicates","nameHash","liberal","delegate","pp$4","message","err","SyntaxError","raisedAt","pp$5","Scope","var","lexical","functions","redeclared","scope$2","scope$3","SCOPE_TOP","Node","pp$6","newNode","TokContext","isExpr","preserveSpace","override","types$1","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","tryReadTemplateToken","f_stat","f_expr","f_expr_gen","f_gen","pp$7","braceIsBlock","prevType","curContext","inGeneratorContext","out","statementParens","allowed","ecma9BinaryProperties","ecma10BinaryProperties","unicodeBinaryProperties","ecma11BinaryProperties","unicodeGeneralCategoryValues","ecma9ScriptValues","ecma10ScriptValues","ecma11ScriptValues","unicodeScriptValues","data","buildUnicodeData","binary","nonBinary","General_Category","Script","Script_Extensions","gc","sc","scx","pp$8","RegExpValidationState","validFlags","unicodeProperties","switchU","switchN","lastIntValue","lastStringValue","lastAssertionIsQuantifiable","numCapturingParens","maxBackReference","groupNames","backReferenceNames","codePointToString","ch","isSyntaxCharacter","isControlLetter","isUnicodePropertyNameCharacter","isUnicodePropertyValueCharacter","isDecimalDigit","isHexDigit","hexToInt","isOctalDigit","reset","unicode","at","forceU","s","l","c","nextIndex","current","lookahead","advance","validateRegExpFlags","state","flag","validateRegExpPattern","regexp_pattern","regexp_disjunction","regexp_alternative","regexp_eatQuantifier","regexp_eatTerm","regexp_eatAssertion","regexp_eatAtom","regexp_eatExtendedAtom","lookbehind","noError","regexp_eatQuantifierPrefix","regexp_eatBracedQuantifier","min","max","regexp_eatDecimalDigits","regexp_eatPatternCharacters","regexp_eatReverseSolidusAtomEscape","regexp_eatCharacterClass","regexp_eatUncapturingGroup","regexp_eatCapturingGroup","regexp_eatAtomEscape","regexp_groupSpecifier","regexp_eatInvalidBracedQuantifier","regexp_eatExtendedPatternCharacter","regexp_eatSyntaxCharacter","regexp_eatGroupName","regexp_eatRegExpIdentifierName","regexp_eatRegExpIdentifierStart","regexp_eatRegExpIdentifierPart","regexp_eatRegExpUnicodeEscapeSequence","isRegExpIdentifierStart","isRegExpIdentifierPart","regexp_eatBackReference","regexp_eatCharacterClassEscape","regexp_eatCharacterEscape","regexp_eatKGroupName","regexp_eatDecimalEscape","regexp_eatControlEscape","regexp_eatCControlLetter","regexp_eatZero","regexp_eatHexEscapeSequence","regexp_eatLegacyOctalEscapeSequence","regexp_eatIdentityEscape","regexp_eatControlLetter","regexp_eatFixedHexDigits","lead","leadSurrogateEnd","trail","regexp_eatHexDigits","isCharacterClassEscape","regexp_eatUnicodePropertyValueExpression","regexp_eatUnicodePropertyName","regexp_eatUnicodePropertyValue","regexp_validateUnicodePropertyNameAndValue","regexp_eatLoneUnicodePropertyNameOrValue","nameOrValue","regexp_validateUnicodePropertyNameOrValue","regexp_classRanges","regexp_eatClassAtom","regexp_eatClassEscape","ch$1","regexp_eatClassControlLetter","regexp_eatOctalDigit","n1","n2","Token","pp$9","stringToBigInt","str","BigInt","codePointToString$1","ignoreEscapeSequenceInKeyword","getToken","Symbol","iterator","this$1","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","loop","readToken_dot","readNumber","next2","readToken_slash","finishOp","readToken_mult_modulo_exp","size","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readToken_question","readToken_numberSign","readWord1","readRadixNumber","readString","inClass","flagsStart","e","readInt","radix","maybeLegacyOctalNumericLiteral","allowSeparators","isLegacyOctalNumericLiteral","total","lastCode","Infinity","startsWithDot","octal","val$1","parseInt","parseFloat","readCodePoint","codePos","readHexChar","invalidStringToken","quote","chunkStart","readEscapedChar","INVALID_TEMPLATE_ESCAPE_ERROR","inTemplateElement","readTmplToken","readInvalidTemplateToken","position","inTemplate","octalStr","substr","word","escStart","esc","acorn","version","tokTypes","keywordTypes","tokContexts","items","conjunction","parser_errors","css_syntax_error","duplicate_attribute","duplicate_element","slug","duplicate_style","empty_attribute_shorthand","empty_directive_name","empty_global_selector","expected_block_type","expected_name","invalid_catch_placement_unclosed_block","invalid_catch_placement_without_await","invalid_component_definition","invalid_closing_tag_unopened","invalid_closing_tag_autoclosed","reason","invalid_debug_args","invalid_declaration","invalid_directive_value","invalid_elseif","invalid_elseif_placement_outside_if","invalid_elseif_placement_unclosed_block","invalid_else_placement_outside_if","invalid_else_placement_unclosed_block","invalid_element_content","invalid_element_placement","invalid_ref_directive","invalid_ref_selector","invalid_self_placement","invalid_script_instance","invalid_script_module","invalid_script_context_attribute","invalid_script_context_value","invalid_tag_name","invalid_tag_name_svelte_element","tags","invalid_then_placement_unclosed_block","invalid_then_placement_without_await","invalid_void_content","missing_component_definition","missing_attribute_value","unclosed_script","unclosed_style","unclosed_comment","unclosed_attribute_value","unexpected_block_close","unexpected_eof","unexpected_eof_token","unexpected_token","unexpected_token_destructure","SyncWalker","should_skip","should_remove","replacement","remove","enter","leave","visit","_should_skip","_should_remove","_replacement","skipped","removed","walk","ast","Math","round","random","re","get_comment_handlers","comments","a","b","indentation","shift","hash","has_trailing_newline","leadingComments","trailingComments","push_array","handle","handlers","Error","unshift","indent","content","has_newline","OPERATOR_PRECEDENCE","in","instanceof","EXPRESSIONS_PRECEDENCE","ArrayExpression","TaggedTemplateExpression","ThisExpression","Identifier","Literal","TemplateLiteral","Super","SequenceExpression","MemberExpression","CallExpression","NewExpression","AwaitExpression","ClassExpression","FunctionExpression","ObjectExpression","UpdateExpression","UnaryExpression","BinaryExpression","LogicalExpression","ConditionalExpression","ArrowFunctionExpression","AssignmentExpression","YieldExpression","RestElement","needs_parens","is_right","precedence","parent_precedence","chunks","get_length","sum","separator","joined","scoped","scope_map","handle_body","add_newline","needed_padding","needs_padding","handle_var_declaration","declarators","some","reduce","Program","BlockStatement","EmptyStatement","ParenthesizedExpression","ExpressionStatement","IfStatement","LabeledStatement","BreakStatement","ContinueStatement","WithStatement","SwitchStatement","ReturnStatement","contains_comment","ThrowStatement","TryStatement","WhileStatement","DoWhileStatement","ForStatement","ForInStatement","DebuggerStatement","FunctionDeclaration","multiple_lines","VariableDeclaration","concat","VariableDeclarator","ClassDeclaration","ImportDeclaration","specifier","as","ImportExpression","ExportDefaultDeclaration","ExportNamedDeclaration","ExportAllDeclaration","MethodDefinition","sparse_commas","has_inline_comment","Property","ObjectPattern","child_state","has_call_expression","args","arg","ChainExpression","MetaProperty","getName","owner","find_owner","deconflicted","deconflict_map","names","original","deconflict","references","JSON","stringify","_m","_i","ForOfStatement","ClassBody","SpreadElement","ArrayPattern","AssignmentPattern","charToInteger","chars","encode","decoded","sourceFileIndex","sourceCodeLine","sourceCodeColumn","nameIndex","mappings","generatedCodeColumn","lineMappings","line_1","segment","segmentMappings","encodeInteger","clamped","btoa$1","btoa","unescape","encodeURIComponent","Buffer","sigils","join$1","strings","sigil","flatten_body","target","EMPTY","flatten_properties","flatten$1","acorn_opts","inject","values","m","new_value","has_changed","x","handle_error","log","parse$2","parse$1","get_context","attributes","find","attribute","error","SafeUint32Array","Uint32Array","adoptBuffer","buffer","TYPE","EOF","Ident","Function","AtKeyword","Hash","BadString","Url","BadUrl","Delim","Number","Percentage","Dimension","WhiteSpace","CDO","CDC","Colon","Semicolon","Comma","LeftSquareBracket","RightSquareBracket","LeftParenthesis","RightParenthesis","LeftCurlyBracket","RightCurlyBracket","Comment","NAME","isDigit","isUppercaseLetter","isLowercaseLetter","isLetter","isNonAscii","isNameStart","isNonPrintable","isNewline","isWhiteSpace","isValidEscape","second","CATEGORY","charCodeCategory","Eof","Digit","NameStart","NonPrintable","charCodeDefinitions","isName","third","isNumberStart","isBOM","isDigit$1","isHexDigit$2","isUppercaseLetter$1","isName$1","isWhiteSpace$1","isValidEscape$1","getCharCode","getNewlineLength","cmpChar","testStr","referenceCode","findDecimalNumberEnd","consumeEscaped","maxOffset","utils","consumeName","consumeNumber","sign","consumeBadUrlRemnants","cmpStr","referenceStr","testCode","findWhiteSpaceStart","findWhiteSpaceEnd","TYPE$1","NAME$1","cmpStr$1","EOF$1","WHITESPACE","COMMENT","TokenStream","offsetAndType","balance","tokenIndex","tokenType","tokenStart","firstCharOffset","tokenEnd","lookupType","tokenCount","lookupOffset","lookupValue","getTokenStart","getRawLength","startToken","balanceEnd","cursor","isBalanceEdge","isDelim","getTokenValue","substring","getTokenLength","substrToCursor","skipWS","skipTokenCount","skipSC","forEachToken","dump","idx","chunk","TokenStream_1","TYPE$2","isNewline$1","isName$2","isValidEscape$2","isNumberStart$1","isIdentifierStart$2","charCodeCategory$1","isBOM$1","cmpStr$2","getNewlineLength$1","findWhiteSpaceEnd$1","consumeEscaped$1","consumeName$1","consumeNumber$1","consumeBadUrlRemnants$1","tokenize","stream","sourceLength","consumeNumericToken","consumeIdentLikeToken","nameStartOffset","consumeUrlToken","consumeStringToken","endingCodePoint","nextCode","balanceCloseType","balanceStart","balancePrev","isBOM$2","OffsetToLocation","lines","columns","linesAndColumnsComputed","setSource","startOffset","startLine","startColumn","ensureLinesAndColumnsComputed","host","computeLinesAndColumns","getLocation","filename","getLocationRange","OffsetToLocation_1","sourceFragment","extraLines","processLines","maxNumLength","endLine","cutLeft","OFFSET_CORRECTION","MAX_LINE_LENGTH","Boolean","_SyntaxError","errorStack","defineProperty","stack","createCustomError","isNaN","parseError","createItem","prev","allocateCursor","cursors","releaseCursor","List","updateCursors","prevOld","prevNew","nextOld","nextNew","getSize","fromArray","toArray","toJSON","isEmpty","each","eachRight","forEachRight","initialValue","acc","reduceRight","nextUntil","prevUntil","appendData","clear","copy","insert","prepend","prependData","append","before","insertData","prependList","insertList","appendList","oldItem","newItemOrList","List_1","TYPE$3","WHITESPACE$1","COMMENT$1","sequence","recognizer","children","createList","child","space","ignoreWS","ignoreWSAfter","scanner","getNode","findWhiteSpaceStart$1","cmpStr$3","TYPE$4","NAME$2","WHITESPACE$2","COMMENT$2","IDENT","FUNCTION","URL$1","HASH","PERCENTAGE","NUMBER","createParseContext","cmpChar$1","cmpStr$4","TYPE$5","IDENT$1","STRING","NUMBER$1","FUNCTION$1","URL$2","HASH$1","DIMENSION","PERCENTAGE$1","LEFTPARENTHESIS","LEFTSQUAREBRACKET","COMMA","DELIM","Operator","Parentheses","readSequence","Brackets","UnicodeRange","atrulePrelude","TYPE$6","DELIM$1","IDENT$2","DIMENSION$1","PERCENTAGE$2","NUMBER$2","HASH$2","COLON","LEFTSQUAREBRACKET$1","selector","AttributeSelector","IdSelector","PseudoElementSelector","PseudoClassSelector","TypeSelector","Combinator","ClassSelector","TYPE$7","getOffsetExcludeWS","Raw","structure","excludeWhiteSpace","endOffset","generate","default","leftCurlyBracket","leftCurlyBracketOrSemicolon","exclamationMarkOrSemicolon","semicolonIncluded","TYPE$8","rawMode","COMMA$1","WHITESPACE$3","AtrulePrelude","Selector","Value","createSingleNodeList","startIndex","parseCustomProperty","TYPE$9","STRING$1","IDENT$3","URL$3","FUNCTION$2","LEFTPARENTHESIS$1","prelude","lookupNonWSType","MediaQueryList","TYPE$a","WHITESPACE$4","COMMENT$3","IDENT$4","FUNCTION$3","COLON$1","LEFTPARENTHESIS$2","consumeRaw","parentheses","Declaration","scan","atrule","Block","import","media","page","SelectorList","supports","getFirstListNode","selectorList","nthWithOfClause","Nth","nth","pseudo","dir","lang","matches","not","cmpChar$2","isDigit$2","TYPE$b","WHITESPACE$5","COMMENT$4","IDENT$5","NUMBER$3","DIMENSION$2","checkInteger","disallowSign","checkTokenIsInteger","expectCharCode","msg","consumeB","consume","AnPlusB","TYPE$c","rawMode$1","ATKEYWORD","SEMICOLON","LEFTCURLYBRACKET","RIGHTCURLYBRACKET","consumeRaw$1","isDeclarationBlockAtrule","Atrule","nameLowerCase","toLowerCase","parseAtrulePrelude","parseWithFallback","bind","walkContext","TYPE$d","SEMICOLON$1","LEFTCURLYBRACKET$1","getLocationFromList","TYPE$e","IDENT$6","STRING$2","COLON$2","LEFTSQUAREBRACKET$2","RIGHTSQUAREBRACKET","getAttributeName","expectIdent","checkColon","getOperator","matcher","flagsPrefix","TYPE$f","rawMode$2","WHITESPACE$6","COMMENT$5","SEMICOLON$2","ATKEYWORD$1","LEFTCURLYBRACKET$2","RIGHTCURLYBRACKET$1","consumeRaw$2","consumeRule","Rule","consumeRawDeclaration","consumeDeclaration","isDeclaration","consumer","TYPE$g","LEFTSQUAREBRACKET$3","RIGHTSQUAREBRACKET$1","CDC_1","CDO_1","IDENT$7","IDENT$8","COMMENT$6","isCustomProperty","isCustomProperty$1","TYPE$k","rawMode$3","IDENT$9","HASH$3","COLON$3","SEMICOLON$3","DELIM$2","WHITESPACE$7","consumeValueRaw","consumeCustomPropertyRaw","consumeValue","startValueToken","important","readProperty","customProperty","parseValue","valueStart","getImportant","TYPE$l","rawMode$4","WHITESPACE$8","COMMENT$7","SEMICOLON$4","consumeRaw$3","DeclarationList","consumeNumber$2","DIMENSION$3","unit","numberEnd","RIGHTPARENTHESIS","_Function","consumeFunctionName","HASH$4","IDENT$a","HASH$5","TYPE$r","IDENT$b","NUMBER$4","DIMENSION$4","LEFTPARENTHESIS$3","RIGHTPARENTHESIS$1","COLON$4","DELIM$3","MediaFeature","Ratio","TYPE$s","WHITESPACE$9","COMMENT$8","IDENT$c","LEFTPARENTHESIS$4","MediaQuery","COMMA$2","relative","NUMBER$5","_Number","TYPE$t","LEFTPARENTHESIS$5","RIGHTPARENTHESIS$2","consumeNumber$3","PERCENTAGE$3","TYPE$v","IDENT$d","FUNCTION$4","COLON$5","RIGHTPARENTHESIS$3","TYPE$w","IDENT$e","FUNCTION$5","COLON$6","RIGHTPARENTHESIS$4","isDigit$3","TYPE$x","NUMBER$6","DELIM$4","consumeNumber$4","TYPE$y","rawMode$5","LEFTCURLYBRACKET$3","consumeRaw$4","consumePrelude","parseRulePrelude","COMMA$3","STRING$3","_String","TYPE$A","WHITESPACE$a","COMMENT$9","ATKEYWORD$2","CDO$1","CDC$1","consumeRaw$5","StyleSheet","IDENT$f","eatIdentifierOrAsterisk","isHexDigit$3","cmpChar$3","TYPE$C","NAME$3","IDENT$g","NUMBER$7","DIMENSION$5","eatHexSequence","allowDash","eatQuestionMarkSequence","count","startsWith","scanUnicodeRange","hexLength","isWhiteSpace$2","cmpStr$5","TYPE$D","FUNCTION$6","URL$4","RIGHTPARENTHESIS$5","rawStart","rawEnd","WHITESPACE$b","SPACE","freeze","parser$1","config","locationMap","needPositions","onParseError","onParseErrorThrow","getLastListNode","fallback","fallbackNode","location","parserConfig","parseContext","processConfig","positions","stylesheet","mediaQueryList","mediaQuery","rule","declarationList","allowOfClause","query","is_ref_selector","entities","CounterClockwiseContourIntegral","ClockwiseContourIntegral","DoubleLongLeftRightArrow","DiacriticalDoubleAcute","NotSquareSupersetEqual","CloseCurlyDoubleQuote","DoubleContourIntegral","FilledVerySmallSquare","NegativeVeryThinSpace","NotPrecedesSlantEqual","NotRightTriangleEqual","NotSucceedsSlantEqual","CapitalDifferentialD","DoubleLeftRightArrow","DoubleLongRightArrow","EmptyVerySmallSquare","NestedGreaterGreater","NotDoubleVerticalBar","NotLeftTriangleEqual","NotSquareSubsetEqual","OpenCurlyDoubleQuote","ReverseUpEquilibrium","DoubleLongLeftArrow","DownLeftRightVector","LeftArrowRightArrow","NegativeMediumSpace","RightArrowLeftArrow","SquareSupersetEqual","leftrightsquigarrow","DownRightTeeVector","DownRightVectorBar","LongLeftRightArrow","Longleftrightarrow","NegativeThickSpace","PrecedesSlantEqual","ReverseEquilibrium","RightDoubleBracket","RightDownTeeVector","RightDownVectorBar","RightTriangleEqual","SquareIntersection","SucceedsSlantEqual","blacktriangleright","longleftrightarrow","DoubleUpDownArrow","DoubleVerticalBar","DownLeftTeeVector","DownLeftVectorBar","FilledSmallSquare","GreaterSlantEqual","LeftDoubleBracket","LeftDownTeeVector","LeftDownVectorBar","LeftTriangleEqual","NegativeThinSpace","NotReverseElement","NotTildeFullEqual","RightAngleBracket","RightUpDownVector","SquareSubsetEqual","VerticalSeparator","blacktriangledown","blacktriangleleft","leftrightharpoons","rightleftharpoons","twoheadrightarrow","DiacriticalAcute","DiacriticalGrave","DiacriticalTilde","DoubleRightArrow","DownArrowUpArrow","EmptySmallSquare","GreaterEqualLess","GreaterFullEqual","LeftAngleBracket","LeftUpDownVector","LessEqualGreater","NonBreakingSpace","NotRightTriangle","NotSupersetEqual","RightTriangleBar","RightUpTeeVector","RightUpVectorBar","UnderParenthesis","UpArrowDownArrow","circlearrowright","downharpoonright","ntrianglerighteq","rightharpoondown","rightrightarrows","twoheadleftarrow","vartriangleright","CloseCurlyQuote","ContourIntegral","DoubleDownArrow","DoubleLeftArrow","DownRightVector","LeftRightVector","LeftTriangleBar","LeftUpTeeVector","LeftUpVectorBar","LowerRightArrow","NotGreaterEqual","NotGreaterTilde","NotLeftTriangle","OverParenthesis","RightDownVector","ShortRightArrow","UpperRightArrow","bigtriangledown","circlearrowleft","curvearrowright","downharpoonleft","leftharpoondown","leftrightarrows","nLeftrightarrow","nleftrightarrow","ntrianglelefteq","rightleftarrows","rightsquigarrow","rightthreetimes","straightepsilon","trianglerighteq","vartriangleleft","DiacriticalDot","DoubleRightTee","DownLeftVector","GreaterGreater","HorizontalLine","InvisibleComma","InvisibleTimes","LeftDownVector","LeftRightArrow","Leftrightarrow","LessSlantEqual","LongRightArrow","Longrightarrow","LowerLeftArrow","NestedLessLess","NotGreaterLess","NotLessGreater","NotSubsetEqual","NotVerticalBar","OpenCurlyQuote","ReverseElement","RightTeeVector","RightVectorBar","ShortDownArrow","ShortLeftArrow","SquareSuperset","TildeFullEqual","UpperLeftArrow","ZeroWidthSpace","curvearrowleft","doublebarwedge","downdownarrows","hookrightarrow","leftleftarrows","leftrightarrow","leftthreetimes","longrightarrow","looparrowright","nshortparallel","ntriangleright","rightarrowtail","rightharpoonup","trianglelefteq","upharpoonright","ApplyFunction","DifferentialD","DoubleLeftTee","DoubleUpArrow","LeftTeeVector","LeftVectorBar","LessFullEqual","LongLeftArrow","Longleftarrow","NotTildeEqual","NotTildeTilde","Poincareplane","PrecedesEqual","PrecedesTilde","RightArrowBar","RightTeeArrow","RightTriangle","RightUpVector","SucceedsEqual","SucceedsTilde","SupersetEqual","UpEquilibrium","VerticalTilde","VeryThinSpace","bigtriangleup","blacktriangle","divideontimes","fallingdotseq","hookleftarrow","leftarrowtail","leftharpoonup","longleftarrow","looparrowleft","measuredangle","ntriangleleft","shortparallel","smallsetminus","triangleright","upharpoonleft","DownArrowBar","DownTeeArrow","ExponentialE","GreaterEqual","GreaterTilde","HilbertSpace","HumpDownHump","Intersection","LeftArrowBar","LeftTeeArrow","LeftTriangle","LeftUpVector","NotCongruent","NotLessEqual","NotLessTilde","Proportional","RightCeiling","RoundImplies","ShortUpArrow","SquareSubset","UnderBracket","VerticalLine","blacklozenge","exponentiale","risingdotseq","triangledown","triangleleft","CircleMinus","CircleTimes","Equilibrium","GreaterLess","LeftCeiling","LessGreater","MediumSpace","NotPrecedes","NotSucceeds","OverBracket","RightVector","Rrightarrow","RuleDelayed","SmallCircle","SquareUnion","SubsetEqual","UpDownArrow","Updownarrow","VerticalBar","backepsilon","blacksquare","circledcirc","circleddash","curlyeqprec","curlyeqsucc","diamondsuit","eqslantless","expectation","nRightarrow","nrightarrow","preccurlyeq","precnapprox","quaternions","straightphi","succcurlyeq","succnapprox","thickapprox","updownarrow","Bernoullis","CirclePlus","EqualTilde","Fouriertrf","ImaginaryI","Laplacetrf","LeftVector","Lleftarrow","NotElement","NotGreater","Proportion","RightArrow","RightFloor","Rightarrow","TildeEqual","TildeTilde","UnderBrace","UpArrowBar","UpTeeArrow","circledast","complement","curlywedge","eqslantgtr","gtreqqless","lessapprox","lesseqqgtr","lmoustache","longmapsto","mapstodown","mapstoleft","nLeftarrow","nleftarrow","precapprox","rightarrow","rmoustache","sqsubseteq","sqsupseteq","subsetneqq","succapprox","supsetneqq","upuparrows","varepsilon","varnothing","Backslash","CenterDot","CircleDot","Congruent","Coproduct","DoubleDot","DownArrow","DownBreve","Downarrow","HumpEqual","LeftArrow","LeftFloor","Leftarrow","LessTilde","Mellintrf","MinusPlus","NotCupCap","NotExists","OverBrace","PlusMinus","Therefore","ThinSpace","TripleDot","UnionPlus","backprime","backsimeq","bigotimes","centerdot","checkmark","complexes","dotsquare","downarrow","gtrapprox","gtreqless","heartsuit","leftarrow","lesseqgtr","nparallel","nshortmid","nsubseteq","nsupseteq","pitchfork","rationals","spadesuit","subseteqq","subsetneq","supseteqq","supsetneq","therefore","triangleq","varpropto","DDotrahd","DotEqual","Integral","LessLess","NotEqual","NotTilde","PartialD","Precedes","RightTee","Succeeds","SuchThat","Superset","Uarrocir","UnderBar","andslope","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf","angmsdag","angmsdah","angrtvbd","approxeq","awconint","backcong","barwedge","bbrktbrk","bigoplus","bigsqcup","biguplus","bigwedge","boxminus","boxtimes","capbrcup","circledR","circledS","cirfnint","clubsuit","cupbrcap","curlyvee","cwconint","doteqdot","dotminus","drbkarow","dzigrarr","elinters","emptyset","eqvparsl","fpartint","geqslant","gesdotol","gnapprox","hksearow","hkswarow","imagline","imagpart","infintie","integers","intercal","intlarhk","laemptyv","ldrushar","leqslant","lesdotor","llcorner","lnapprox","lrcorner","lurdshar","mapstoup","multimap","naturals","otimesas","parallel","plusacir","pointint","precneqq","precnsim","profalar","profline","profsurf","raemptyv","realpart","rppolint","rtriltri","scpolint","setminus","shortmid","smeparsl","sqsubset","sqsupset","subseteq","succneqq","succnsim","supseteq","thetasym","thicksim","timesbar","triangle","triminus","trpezium","ulcorner","urcorner","varkappa","varsigma","vartheta","Because","Cayleys","Cconint","Cedilla","Diamond","DownTee","Element","Epsilon","Implies","LeftTee","NewLine","NoBreak","NotLess","Omicron","OverBar","Product","UpArrow","Uparrow","Upsilon","alefsym","angrtvb","angzarr","asympeq","backsim","because","bemptyv","between","bigcirc","bigodot","bigstar","boxplus","ccupssm","cemptyv","cirscir","coloneq","congdot","cudarrl","cudarrr","cularrp","curarrm","dbkarow","ddagger","ddotseq","demptyv","diamond","digamma","dotplus","dwangle","epsilon","eqcolon","equivDD","gesdoto","gtquest","gtrless","harrcir","intprod","isindot","larrbfs","larrsim","lbrksld","lbrkslu","ldrdhar","lesdoto","lessdot","lessgtr","lesssim","lotimes","lozenge","ltquest","luruhar","maltese","minusdu","napprox","natural","nearrow","nexists","notinva","notinvb","notinvc","notniva","notnivb","notnivc","npolint","nsqsube","nsqsupe","nvinfin","nwarrow","olcross","omicron","orderof","orslope","pertenk","planckh","pluscir","plussim","plustwo","precsim","quatint","questeq","rarrbfs","rarrsim","rbrksld","rbrkslu","rdldhar","realine","rotimes","ruluhar","searrow","simplus","simrarr","subedot","submult","subplus","subrarr","succsim","supdsub","supedot","suphsub","suplarr","supmult","supplus","swarrow","topfork","triplus","tritime","uparrow","upsilon","uwangle","vzigzag","zigrarr","Aacute","Abreve","Agrave","Assign","Atilde","Barwed","Bumpeq","Cacute","Ccaron","Ccedil","Colone","Conint","CupCap","Dagger","Dcaron","DotDot","Dstrok","Eacute","Ecaron","Egrave","Exists","ForAll","Gammad","Gbreve","Gcedil","HARDcy","Hstrok","Iacute","Igrave","Itilde","Jsercy","Kcedil","Lacute","Lambda","Lcaron","Lcedil","Lmidot","Lstrok","Nacute","Ncaron","Ncedil","Ntilde","Oacute","Odblac","Ograve","Oslash","Otilde","Otimes","Racute","Rarrtl","Rcaron","Rcedil","SHCHcy","SOFTcy","Sacute","Scaron","Scedil","Square","Subset","Supset","Tcaron","Tcedil","Tstrok","Uacute","Ubreve","Udblac","Ugrave","Utilde","Vdashl","Verbar","Vvdash","Yacute","Zacute","Zcaron","aacute","abreve","agrave","andand","angmsd","angsph","apacir","approx","atilde","barvee","barwed","becaus","bernou","bigcap","bigcup","bigvee","bkarow","bottom","bowtie","boxbox","bprime","brvbar","bullet","bumpeq","cacute","capand","capcap","capcup","capdot","ccaron","ccedil","circeq","cirmid","colone","commat","compfn","conint","coprod","copysr","cularr","cupcap","cupcup","cupdot","curarr","curren","cylcty","dagger","daleth","dcaron","dfisht","divide","divonx","dlcorn","dlcrop","dollar","drcorn","drcrop","dstrok","eacute","easter","ecaron","ecolon","egrave","egsdot","elsdot","emptyv","emsp13","emsp14","eparsl","eqcirc","equals","equest","female","ffilig","ffllig","forall","frac12","frac13","frac14","frac15","frac16","frac18","frac23","frac25","frac34","frac35","frac38","frac45","frac56","frac58","frac78","gacute","gammad","gbreve","gesdot","gesles","gtlPar","gtrarr","gtrdot","gtrsim","hairsp","hamilt","hardcy","hearts","hellip","hercon","homtht","horbar","hslash","hstrok","hybull","hyphen","iacute","igrave","iiiint","iinfin","incare","inodot","intcal","iquest","isinsv","itilde","jsercy","kappav","kcedil","kgreen","lAtail","lacute","lagran","lambda","langle","larrfs","larrhk","larrlp","larrpl","larrtl","latail","lbrace","lbrack","lcaron","lcedil","ldquor","lesdot","lesges","lfisht","lfloor","lharul","llhard","lmidot","lmoust","loplus","lowast","lowbar","lparlt","lrhard","lsaquo","lsquor","lstrok","lthree","ltimes","ltlarr","ltrPar","mapsto","marker","mcomma","midast","midcir","middot","minusb","minusd","mnplus","models","mstpos","nVDash","nVdash","nacute","ncaron","ncedil","nearhk","nequiv","nesear","nexist","nltrie","nprcue","nrtrie","nsccue","nsimeq","ntilde","numero","nvDash","nvHarr","nvdash","nvlArr","nvrArr","nwarhk","nwnear","oacute","odblac","odsold","ograve","ominus","origof","oslash","otilde","otimes","parsim","percnt","period","permil","phmmat","planck","plankv","plusdo","plusdu","plusmn","preceq","primes","prnsim","propto","prurel","puncsp","qprime","rAtail","racute","rangle","rarrap","rarrfs","rarrhk","rarrlp","rarrpl","rarrtl","ratail","rbrace","rbrack","rcaron","rcedil","rdquor","rfisht","rfloor","rharul","rmoust","roplus","rpargt","rsaquo","rsquor","rthree","rtimes","sacute","scaron","scedil","scnsim","searhk","seswar","sfrown","shchcy","sigmaf","sigmav","simdot","smashp","softcy","solbar","spades","sqsube","sqsupe","square","squarf","ssetmn","ssmile","sstarf","subdot","subset","subsim","subsub","subsup","succeq","supdot","supset","supsim","supsub","supsup","swarhk","swnwar","tcaron","tcedil","telrec","there4","thetav","thinsp","thksim","timesb","timesd","topbot","topcir","tprime","tridot","tstrok","uacute","ubreve","udblac","ufisht","ugrave","ulcorn","ulcrop","urcorn","urcrop","utilde","vangrt","varphi","varrho","veebar","vellip","verbar","wedbar","wedgeq","weierp","wreath","xoplus","xotime","xsqcup","xuplus","xwedge","yacute","zacute","zcaron","zeetrf","AElig","Acirc","Alpha","Amacr","Aogon","Aring","Breve","Ccirc","Cross","Dashv","Delta","Ecirc","Emacr","Eogon","Equal","Gamma","Gcirc","Hacek","Hcirc","IJlig","Icirc","Imacr","Iogon","Iukcy","Jcirc","Jukcy","Kappa","OElig","Ocirc","Omacr","Omega","Prime","RBarr","Scirc","Sigma","THORN","TRADE","TSHcy","Theta","Tilde","Ubrcy","Ucirc","Umacr","Union","Uogon","UpTee","Uring","VDash","Vdash","Wcirc","Wedge","Ycirc","acirc","acute","aelig","aleph","alpha","amacr","amalg","angle","angrt","angst","aogon","aring","asymp","awint","bcong","bdquo","bepsi","blank","blk12","blk14","blk34","boxDL","boxDR","boxDl","boxDr","boxHD","boxHU","boxHd","boxHu","boxUL","boxUR","boxUl","boxUr","boxVH","boxVL","boxVR","boxVh","boxVl","boxVr","boxdL","boxdR","boxdl","boxdr","boxhD","boxhU","boxhd","boxhu","boxuL","boxuR","boxul","boxur","boxvH","boxvL","boxvR","boxvh","boxvl","boxvr","breve","bsemi","bsime","bsolb","bumpE","bumpe","caret","caron","ccaps","ccirc","ccups","cedil","check","clubs","crarr","cross","csube","csupe","ctdot","cuepr","cuesc","cupor","cuvee","cuwed","cwint","dashv","dblac","ddarr","delta","dharl","dharr","diams","disin","doteq","dtdot","dtrif","duarr","duhar","eDDot","ecirc","efDot","emacr","eogon","eplus","epsiv","eqsim","equiv","erDot","erarr","esdot","exist","fflig","filig","fllig","fltns","forkv","frasl","frown","gamma","gcirc","gescc","gimel","gneqq","gnsim","grave","gsime","gsiml","gtcir","gtdot","harrw","hcirc","hoarr","icirc","iexcl","iiint","iiota","ijlig","imacr","image","imath","imped","infin","iogon","iprod","isinE","isins","isinv","iukcy","jcirc","jmath","jukcy","kappa","lAarr","lBarr","langd","laquo","larrb","lbarr","lbbrk","lbrke","lceil","ldquo","lescc","lhard","lharu","lhblk","llarr","lltri","lneqq","lnsim","loang","loarr","lobrk","lopar","lrarr","lrhar","lrtri","lsime","lsimg","lsquo","ltcir","ltdot","ltrie","ltrif","mDDot","mdash","micro","minus","mumap","nabla","napos","natur","ncong","ndash","neArr","nearr","ngsim","nhArr","nharr","nhpar","nlArr","nlarr","nless","nlsim","nltri","notin","notni","nprec","nrArr","nrarr","nrtri","nsime","nsmid","nspar","nsube","nsucc","nsupe","numsp","nwArr","nwarr","ocirc","odash","oelig","ofcir","ohbar","olarr","olcir","oline","omacr","omega","operp","oplus","orarr","order","ovbar","parsl","phone","plusb","pluse","pound","prcue","prime","prnap","prsim","quest","rAarr","rBarr","radic","rangd","raquo","rarrb","rarrc","rarrw","ratio","rbarr","rbbrk","rbrke","rceil","rdquo","reals","rhard","rharu","rlarr","rlhar","rnmid","roang","roarr","robrk","ropar","rrarr","rsquo","rtrie","rtrif","sbquo","sccue","scirc","scnap","scsim","sdotb","sdote","seArr","searr","setmn","sharp","sigma","simeq","simgE","simlE","simne","slarr","smile","sqcap","sqcup","sqsub","sqsup","srarr","starf","strns","subnE","subne","supnE","supne","swArr","swarr","szlig","theta","thkap","thorn","tilde","times","trade","trisb","tshcy","twixt","ubrcy","ucirc","udarr","udhar","uharl","uharr","uhblk","ultri","umacr","uogon","uplus","upsih","uring","urtri","utdot","utrif","uuarr","vBarv","vDash","varpi","vdash","veeeq","vltri","vprop","vrtri","wcirc","wedge","xcirc","xdtri","xhArr","xharr","xlArr","xlarr","xodot","xrArr","xrarr","xutri","ycirc","Aopf","Ascr","Auml","Barv","Beta","Bopf","Bscr","CHcy","COPY","Cdot","Copf","Cscr","DJcy","DScy","DZcy","Darr","Dopf","Dscr","Edot","Eopf","Escr","Esim","Euml","Fopf","Fscr","GJcy","Gdot","Gopf","Gscr","Hopf","Hscr","IEcy","IOcy","Idot","Iopf","Iota","Iscr","Iuml","Jopf","Jscr","KHcy","KJcy","Kopf","Kscr","LJcy","Lang","Larr","Lopf","Lscr","Mopf","Mscr","NJcy","Nopf","Nscr","Oopf","Oscr","Ouml","Popf","Pscr","QUOT","Qopf","Qscr","Rang","Rarr","Ropf","Rscr","SHcy","Sopf","Sqrt","Sscr","Star","TScy","Topf","Tscr","Uarr","Uopf","Upsi","Uscr","Uuml","Vbar","Vert","Vopf","Vscr","Wopf","Wscr","Xopf","Xscr","YAcy","YIcy","YUcy","Yopf","Yscr","Yuml","ZHcy","Zdot","Zeta","Zopf","Zscr","andd","andv","ange","aopf","apid","apos","ascr","auml","bNot","bbrk","beta","beth","bnot","bopf","boxH","boxV","boxh","boxv","bscr","bsim","bsol","bull","bump","cdot","cent","chcy","cirE","circ","cire","comp","cong","copf","cscr","csub","csup","dArr","dHar","darr","dash","diam","djcy","dopf","dscr","dscy","dsol","dtri","dzcy","eDot","ecir","edot","emsp","ensp","eopf","epar","epsi","escr","esim","euml","euro","excl","flat","fnof","fopf","fork","fscr","gdot","geqq","gjcy","gnap","gneq","gopf","gscr","gsim","gtcc","hArr","half","harr","hbar","hopf","hscr","iecy","imof","iocy","iopf","iota","iscr","isin","iuml","jopf","jscr","khcy","kjcy","kopf","kscr","lArr","lHar","larr","late","lcub","ldca","ldsh","leqq","ljcy","lnap","lneq","lopf","lozf","lpar","lscr","lsim","lsqb","ltcc","ltri","macr","male","malt","mlcp","mldr","mopf","mscr","nbsp","ncap","ncup","ngeq","ngtr","nisd","njcy","nldr","nleq","nmid","nopf","npar","nscr","nsim","nsub","nsup","ntgl","ntlg","oast","ocir","odiv","odot","ogon","oint","omid","oopf","opar","ordf","ordm","oror","oscr","osol","ouml","para","part","perp","phiv","plus","popf","prap","prnE","prod","pscr","qint","qopf","qscr","quot","rArr","rHar","race","rang","rarr","rcub","rdca","rdsh","real","rect","rhov","ring","ropf","rpar","rscr","rsqb","rtri","scap","scnE","sdot","sect","sext","shcy","sime","simg","siml","smid","smte","solb","sopf","spar","squf","sscr","subE","sube","succ","sung","sup1","sup2","sup3","supE","supe","tbrk","tdot","tint","toea","topf","tosa","trie","tscr","tscy","uArr","uHar","uarr","uopf","upsi","uscr","utri","uuml","vArr","vBar","varr","vert","vopf","vscr","wopf","wscr","xcap","xcup","xmap","xnis","xopf","xscr","xvee","yacy","yicy","yopf","yscr","yucy","yuml","zdot","zeta","zhcy","zopf","zscr","zwnj","AMP","Acy","Afr","And","Bcy","Bfr","Cap","Cfr","Chi","Cup","Dcy","Del","Dfr","Dot","ENG","ETH","Ecy","Efr","Eta","Fcy","Ffr","Gcy","Gfr","Hat","Hfr","Icy","Ifr","Int","Jcy","Jfr","Kcy","Kfr","Lcy","Lfr","Lsh","Mcy","Mfr","Ncy","Nfr","Not","Ocy","Ofr","Pcy","Pfr","Phi","Psi","Qfr","REG","Rcy","Rfr","Rho","Rsh","Scy","Sfr","Sub","Sum","Sup","Tab","Tau","Tcy","Tfr","Ucy","Ufr","Vcy","Vee","Vfr","Wfr","Xfr","Ycy","Yfr","Zcy","Zfr","acd","acy","afr","amp","and","ang","apE","ape","bcy","bfr","bot","cap","cfr","chi","cir","cup","dcy","deg","dfr","die","div","ecy","efr","egs","ell","els","eng","eta","eth","fcy","ffr","gEl","gap","gcy","gel","geq","ges","gfr","ggg","glE","gla","glj","gnE","gne","hfr","icy","iff","ifr","int","jcy","jfr","kcy","kfr","lEg","lap","lat","lcy","leg","leq","les","lfr","lgE","lnE","lne","loz","lrm","lsh","mcy","mfr","mho","mid","nap","ncy","nfr","nge","ngt","nis","niv","nle","nlt","npr","nsc","ocy","ofr","ogt","ohm","olt","ord","orv","pcy","pfr","phi","piv","prE","pre","psi","qfr","rcy","reg","rfr","rho","rlm","rsh","scE","sce","scy","sfr","shy","sim","smt","sol","squ","sub","sup","tau","tcy","tfr","top","ucy","ufr","uml","vcy","vee","vfr","wfr","xfr","ycy","yen","yfr","zcy","zfr","zwj","DD","GT","Gg","Gt","Im","LT","Ll","Lt","Mu","Nu","Or","Pi","Pr","Re","Sc","Xi","ac","af","ap","dd","ee","eg","el","gE","ge","gg","gl","gt","ic","ii","it","lE","le","lg","ll","lt","mp","mu","ne","ni","nu","oS","or","pi","pm","pr","rx","wp","wr","xi","meta_tags","read","script_start","read_until","acorn_error","content_start","styles","content_end","aria_attributes","aria_roles","svg_attributes","svg_attribute_lookup","attribute_lookup","allowfullscreen","property_name","applies_to","allowpaymentrequest","autofocus","autoplay","checked","controls","defer","disabled","formnovalidate","hidden","indeterminate","ismap","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected","metadata","charToInteger$1","chars$1","i$2","URL","require","atob","Chunk","intro","outro","storeName","edited","previous","writable","appendLeft","appendRight","clone","contains","eachNext","eachPrevious","edit","contentOnly","prependLeft","prependRight","sliceIndex","originalBefore","originalAfter","newChunk","trimEnd","trimmed","trimStart","btoa$2","SourceMap$1","file","sources","sourcesContent","guessIndent","tabbed","spaced","numSpaces","getRelativePath","to","fromParts","toParts","toUrl","toString$1","getLocator$1","originalLines","lineOffsets","j","Mappings","hires","generatedCodeLine","rawSegments","pending","addEdit","sourceIndex","addUneditedChunk","sourcemapLocations","originalCharIndex","warned","insertLeft","insertRight","MagicString","firstChunk","lastChunk","lastSearchedChunk","byStart","byEnd","indentExclusionRanges","storedNames","indentStr","addSourcemapLocation","char","TypeError","_split","cloned","originalChunk","clonedChunk","nextOriginalChunk","nextClonedChunk","generateDecodedMap","locate","includeContent","generateMap","getIndentString","isExcluded","exclude","exclusion","shouldIndentNextCharacter","indentStart","replacer","charIndex","_splitChunk","move","oldLeft","oldRight","newRight","newLeft","overwrite","lastChar","lastLine","lineIndex","lineStr","startChunk","containsEnd","sliceStart","sliceEnd","snip","searchForward","trim","trimLines","charType","trimEndAborted","aborted","trimStartAborted","BlockAppliesToNode","NodeExist","env","TEST","lexer","_a","prefixes","defaultPattern","escapeString","delimiter","path","tryConsume","mustConsume","value2","_a2","nextType","consumeText","result2","suffix","modifier","name_1","pattern_1","decode","pathname","_loop_1","i2","regexpToFunction","pathToRegexp","sensitive","stringToRegexp","_b","_c","_d","endsWith","route","tokens_1","mod","endToken","isEndDelimited","tokensToRegexp","groupsRegex","execResult","regexpToRegexp","paths","parts","arrayToRegexp","Env","Get","Deno","Delete","delete","GetAsObject","toObject","decodeURIComponent","mtc","decodeURI","normalize","Request","MatchRoute","Core","PathName"],"mappings":"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A,UACA,cACA,WACA,gBACA,OACA,WACA,QACA,OACA,eACA,WACA,MACA,OACA,MACA,YACA,OACA,SACA,SACA,aACA,WACA,UACA,UACA,SACA,aACA,iBACA,SACA,iBACA,MACA,cACA,aACA,SACA,aACA,cACA,YACA,YACA,WACA,MACA,kBACA,WAEa,IAAIA,IAAI,CACrB,YACA,QACA,QACA,OACA,QACA,QACA,QACA,WACA,WACA,UACA,SACA,KACA,OACA,OACA,OACA,SACA,UACA,QACA,UACA,MACA,WACA,KACA,aACA,SACA,KACA,aACA,YACA,MACA,MACA,OACA,UACA,UACA,YACA,SACA,SACA,SACA,QACA,SACA,OACA,QACA,OACA,MACA,SACA,MACA,OACA,QACA,OACA,UAwBJ,SAAS+W,GAAK2gB,EAAOC,EAAc,MAC/B,OAAqB,IAAjBD,EAAM33B,OACC23B,EAAM,GACV,GAAGA,EAAM1mB,MAAM,GAAI,GAAG1O,KAAK,SAASq1B,KAAeD,EAAMA,EAAM33B,OAAS,KAOnF,IAAI63B,GAAgB,CAChBC,iBAAmBnP,KACfxmB,KAAM,mBACNwmB,QAAAA,IAEJoP,oBAAqB,CACjB51B,KAAM,sBACNwmB,QAAS,gCAEbqP,kBAAmB,CAACC,EAAMvzB,MACtBvC,KAAM,aAAa81B,IACnBtP,QAAS,kCAAkCjkB,WAE/CwzB,gBAAiB,CACb/1B,KAAM,kBACNwmB,QAAS,6DAEbwP,0BAA2B,CACvBh2B,KAAM,4BACNwmB,QAAS,uCAEbyP,qBAAuBp0B,KACnB7B,KAAM,uBACNwmB,QAAS,GAAG3kB,2BAEhBq0B,sBAAuB,CACnBl2B,KAAM,mBACNwmB,QAAS,qCAEb2P,oBAAqB,CACjBn2B,KAAM,sBACNwmB,QAAS,8BAEb4P,cAAe,CACXp2B,KAAM,gBACNwmB,QAAS,iBAEb6P,uCAAyC7oB,KACrCxN,KAAM,0BACNwmB,QAAS,qBAAqBhZ,mCAElC8oB,sCAAuC,CACnCt2B,KAAM,0BACNwmB,QAAS,+DAEb+P,6BAA8B,CAC1Bv2B,KAAM,+BACNwmB,QAAS,gCAEbgQ,6BAA+Bj0B,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CVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,IACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,IACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,MACVC,SAAU,MACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,IACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,MACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,KACVC,SAAU,IACVC,SAAU,IACVC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,IACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,IACTC,QAAS,KACTC,QAAS,KACTC,QAAS,GACTC,QAAS,KACTC,QAAS,KACTC,QAAS,IACTC,QAAS,IACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,IACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,MACTC,QAAS,KACTC,QAAS,KACTC,QAAS,MACTC,QAAS,KACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,IACTC,QAAS,KACTC,QAAS,MACTC,QAAS,IACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,MACTC,QAAS,KACTC,QAAS,KACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,IACTC,QAAS,KACTC,QAAS,MACTC,QAAS,KACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,QAAS,IACTC,QAAS,MACTC,QAAS,MACTC,QAAS,KACTC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,GACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,GACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,GACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,GACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,GACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,GACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,GACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRx/C,OAAQ,KACRy/C,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,IACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,KACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KACRC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPngD,MAAO,KACPogznF,MAAO,GACPF,MAAO,GACP4nF,MAAO,KACPC,MAAO,MACPC,MAAO,MACPC,MAAO,MACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,MACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,IACPC,MAAO,KACPC,MAAO,IACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,MACPC,MAAO,MACPC,MAAO,IACPC,MAAO,KACPC,MAAO,IACPt2E,MAAO,KACPuvqF,MAAO,MACPwqrxD,KAAM,MACNsxD,KAAM,KACNC,KAAM,MACNC,KAAM,IACNC,KAAM,MACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,MACNC,KAAM,MACNC,KAAM,OACNC,KAAM,MACNC,KAAM,GACNC,KAAM,OACNC,KAAM,KACNC,KAAM,GACNC,KAAM,MACNC,KAAM,KACNC,KAAM,IACNC,KAAM,KACNC,KAAM,MACNC,KAAM,MACNC,KAAM,KACNC,KAAM,OACNC,KAAM,OACNC,KAAM,IACNC,KAAM,MACNC,KAAM,MACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,OACNC,KAAM,KACNC,KAAM,OACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,MACNC,KAAM,KACNC,KAAM,IACNC,KAAM,KACNC,KAAM,MACNC,KAAM,OACNC,KAAM,MACNC,KAAM,IACNC,KAAM,IACNC,KAAM,MACNC,KAAM,KACNC,KAAM,KACNC,KAAM,IACNC,KAAM,IACNC,KAAM,KACNC,KAAM,KACNC,KAAM,IACNC,KAAM,GACNC,KAAM,OACNC,KAAM,MACNnqG,KAAM,KACNoqG,KAAM,MACNC,KAAM,KACN7wF,KAAM,KACN8wF,KAAM,OACNC,KAAM,MACNC,KAAM,OACNC,KAAM,OACNC,KAAM,GACNC,KAAM,KACNC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,KAAM,KACNC,KAAM,IACNC,KAAM,MACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,IACNC,KAAM,OACNC,KAAM,GACNC,KAAM,OACNC,KAAM,GACNC,KAAM,KACNC,KAAM,MACNC,KAAM,MACNC,KAAM,KACNC,KAAM,IACN9qG,KAAM,GACN+qG,KAAM,MACNC,KAAM,KACNC,KAAM,KACNC,KAAM,MACNC,KAAM,MACNC,KAAM,KACNC,KAAM,MACNC,KAAM,MACNC,KAAM,OACNC,KAAM,KACNC,KAAM,KACNC,KAAM,OACNlqG,KAAM,KACNmqG,KAAM,MACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,MACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,MACNC,KAAM,OACNC,KAAM,MACNC,KAAM,KACNC,KAAM,OACNC,KAAM,KACNC,KAAM,KACNC,KAAM,MACNC,KAAM,KACNC,KAAM,OACNC,KAAM,IACNC,KAAM,OACNC,KAAM,KACNC,KAAM,IACNC,KAAM,KACNC,KAAM,MACNC,KAAM,KACNC,KAAM,IACNC,KAAM,OACNC,KAAM,OACNC,KAAM,OACNC,KAAM,OACNC,KAAM,KACNC,KAAM,KACNC,KAAM,MACNC,KAAM,KACNC,KAAM,OACNC,KAAM,OACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,OACNC,KAAM,OACNC,KAAM,KACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,KACNC,KAAM,OACNC,KAAM,OACNC,KAAM,KACNC,IAAK,GACLC,IAAK,KACLC,IAAK,OACLC,IAAK,MACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,KACLC,IAAK,IACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,OACLC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,IAAK,KACLC,IAAK,OACLC,IAAK,IACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,OACLC,IAAK,GACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLh5G,IAAK,MACLi5G,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,OACLC,IAAK,MACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,OACLC,IAAK,IACLC,IAAK,IACLC,IAAK,OACLC,IAAK,IACLC,IAAK,KACLC,IAAK,KACLC,IAAK,IACLC,IAAK,KACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,EACLC,IAAK,IACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,KACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,OACLC,IAAK,GACLC,IAAK,KACLC,IAAK,KACLC,IAAK,MACLC,IAAK,KACLjgF,IAAK,GACLkgF,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,KACLC,IAAK,OACLC,IAAK,IACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,IACLC,IAAK,OACLC,IAAK,IACLC,IAAK,IACL10G,IAAK,IACL20G,IAAK,KACLC,IAAK,OACLC,IAAK,MACLC,IAAK,KACLC,IAAK,MACLC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,IAAK,KACLC,IAAK,OACLC,IAAK,MACLC,IAAK,MACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,MACLC,IAAK,OACLC,IAAK,KACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,KACLC,IAAK,MACLC,IAAK,OACLC,IAAK,KACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,KACLC,IAAK,OACLC,IAAK,KACLC,IAAK,OACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,MACLC,IAAK,OACLC,IAAK,MACLC,IAAK,KACLC,IAAK,MACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLp9G,IAAK,KACLq9G,IAAK,KACLC,IAAK,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"}